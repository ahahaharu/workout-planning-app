{"version":3,"file":"index.js","sources":["../src/classes/User/User.js","../src/classes/services/UserService.js","../src/classes/Exercise/Exercise.js","../src/classes/Exercise/CardioSession.js","../src/classes/Exercise/CardioExercise.js","../src/classes/Exercise/Constants/ExerciseType.js","../src/classes/Exercise/EnduranceSession.js","../src/classes/Exercise/EnduranceExercise.js","../src/classes/Exercise/Set.js","../src/classes/Exercise/StrengthExercise.js","../src/classes/Exercise/Factory/ExerciseFactory.js","../src/classes/services/ExerciseService.js","../src/classes/Exercise/Strategies/ExerciseStrategy.js","../src/classes/Exercise/Strategies/StrengthExerciseStrategy.js","../src/classes/Exercise/Strategies/CardioExerciseStrategy.js","../src/classes/Exercise/Strategies/EnduranceExerciseStrategy.js","../src/classes/Exercise/Strategies/ExerciseStrategyFactory.js","../src/classes/WorkoutPlan/WorkoutPlan.js","../src/classes/services/WorkoutPlanService.js","../src/classes/Workout/Workout.js","../src/classes/services/WorkoutService.js","../src/classes/services/StatisticsService.js","../src/classes/services/StorageService.js","../src/classes/services/LocalStorageManager.js","../src/classes/WorkoutPlanner.js","../src/index.js"],"sourcesContent":["export class User {\r\n  constructor(id, name, password, email, currentWeight, height) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.password = password;\r\n    this.email = email;\r\n    this.currentWeight = currentWeight;\r\n    this.weightHistory = [{ date: new Date(), weight: currentWeight }];\r\n    this.height = height;\r\n    this.workoutsHistory = [];\r\n    this.workoutPlans = [];\r\n  }\r\n\r\n  updateWeight(newWeight) {\r\n    this.currentWeight = newWeight;\r\n    this.weightHistory.push({ date: new Date(), weight: newWeight });\r\n  }\r\n\r\n  addWorkoutPlan(workoutPlan) {\r\n    this.workoutPlans.push(workoutPlan);\r\n  }\r\n\r\n  getWorkoutPlans() {\r\n    return this.workoutPlans;\r\n  }\r\n\r\n  addWorkout(workout) {\r\n    this.workoutsHistory.push(workout);\r\n  }\r\n\r\n  getWorkoutHistory() {\r\n    return this.workoutsHistory;\r\n  }\r\n\r\n  updateProfile(name, password, email, height) {\r\n    this.name = name || this.name;\r\n    this.password = password || this.password;\r\n    this.email = email || this.email;\r\n    this.height = height || this.height;\r\n  }\r\n}\r\n","import { User } from \"../User/User.js\";\r\n\r\nexport class UserService {\r\n  constructor(storageManager) {\r\n    this.storageManager = storageManager;\r\n    this.users = this.storageManager.getUsers() || [];\r\n    this.currentUser = null;\r\n\r\n    this._deserializeUsers();\r\n  }\r\n\r\n  _deserializeUsers() {\r\n    this.users = this.users.map((userData) => {\r\n      const user = new User(\r\n        userData.id,\r\n        userData.name,\r\n        userData.password,\r\n        userData.email,\r\n        userData.currentWeight,\r\n        userData.height\r\n      );\r\n\r\n      if (userData.weightHistory && userData.weightHistory.length) {\r\n        user.weightHistory = userData.weightHistory.map((entry) => ({\r\n          date: new Date(entry.date),\r\n          weight: entry.weight,\r\n        }));\r\n      }\r\n\r\n      return user;\r\n    });\r\n  }\r\n\r\n  _saveUsers() {\r\n    this.storageManager.saveUsers(this.users);\r\n  }\r\n\r\n  getUserById(id) {\r\n    const user = this.users.find((user) => user.id === id);\r\n    if (!user) {\r\n      throw new Error(`Пользователь с ID ${id} не найден`);\r\n    }\r\n    return user;\r\n  }\r\n\r\n  generateUserId() {\r\n    if (!this.users.length) return 1;\r\n    return Math.max(...this.users.map((user) => user.id)) + 1;\r\n  }\r\n\r\n  registerUser(name, password, email, currentWeight, height) {\r\n    if (this.users.some((user) => user.email === email)) {\r\n      throw new Error(\"Пользователь с таким email уже существует\");\r\n    }\r\n    const id = this.generateUserId();\r\n    const newUser = new User(id, name, password, email, currentWeight, height);\r\n    this.users.push(newUser);\r\n    this._saveUsers();\r\n    return newUser;\r\n  }\r\n\r\n  loginUser(email, password) {\r\n    const user = this.users.find((user) => user.email === email);\r\n    if (!user) {\r\n      throw new Error(\"Пользователя с таким email не существует\");\r\n    }\r\n\r\n    if (user.password !== password) {\r\n      throw new Error(\"Неверный пароль\");\r\n    }\r\n\r\n    this.currentUser = user;\r\n    return user;\r\n  }\r\n\r\n  updateUserWeight(newWeight) {\r\n    this.validateCurrentUser();\r\n    this.currentUser.updateWeight(newWeight);\r\n    this._saveUsers();\r\n  }\r\n\r\n  updateUserProfile(name, password, email, height) {\r\n    this.validateCurrentUser();\r\n    this.currentUser.updateProfile(name, password, email, height);\r\n    this._saveUsers();\r\n  }\r\n\r\n  getCurrentUser() {\r\n    return this.currentUser;\r\n  }\r\n\r\n  validateCurrentUser() {\r\n    if (!this.currentUser) {\r\n      throw new Error(\"Пользователь не авторизован\");\r\n    }\r\n  }\r\n\r\n  getAllUsers() {\r\n    return this.users;\r\n  }\r\n}\r\n","export class Exercise {\r\n  constructor(id, name, image, description, mediaUrl, type) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.image = image;\r\n    this.description = description || \"\";\r\n    this.mediaUrl = mediaUrl;\r\n    this.type = type;\r\n    this.notes = [];\r\n  }\r\n\r\n  updateExercise(name, description, mediaUrl) {\r\n    this.name = name || this.name;\r\n    this.description = description || this.description;\r\n    this.mediaUrl = mediaUrl || this.mediaUrl;\r\n  }\r\n\r\n  addNote(note) {\r\n    this.notes.push(note);\r\n  }\r\n}\r\n","export class CardioSession {\r\n  constructor(duration, distance, caloriesBurned = null) {\r\n    this.duration = duration; // in minutes\r\n    this.distance = distance; // in kilometers\r\n    this.caloriesBurned = caloriesBurned;\r\n  }\r\n\r\n  calculatePace() {\r\n    if (!this.distance || this.distance === 0) return 0;\r\n    return this.duration / this.distance; // minutes per kilometer\r\n  }\r\n\r\n  calculateSpeed() {\r\n    if (!this.duration || this.duration === 0) return 0;\r\n    return (this.distance / this.duration) * 60; // km/h\r\n  }\r\n}\r\n","import { Exercise } from \"./Exercise.js\";\r\nimport { CardioSession } from \"./CardioSession.js\";\r\n\r\nexport class CardioExercise extends Exercise {\r\n  constructor(id, name, image, description, mediaUrl, type, cardioType) {\r\n    super(id, name, image, description, mediaUrl, type);\r\n    this.cardioType = cardioType; // \"Running\", \"Cycling\", \"Swimming\"\r\n    this.sessions = [];\r\n  }\r\n\r\n  addSession(duration, distance, caloriesBurned = null) {\r\n    this.sessions.push(new CardioSession(duration, distance, caloriesBurned));\r\n  }\r\n\r\n  removeSession(sessionIndex) {\r\n    this.sessions.splice(sessionIndex, 1);\r\n  }\r\n\r\n  getSessions() {\r\n    return this.sessions;\r\n  }\r\n\r\n  updateSession(index, duration, distance, caloriesBurned) {\r\n    this.sessions[index].duration = duration || this.sessions[index].duration;\r\n    this.sessions[index].distance = distance || this.sessions[index].distance;\r\n    this.sessions[index].caloriesBurned =\r\n      caloriesBurned || this.sessions[index].caloriesBurned;\r\n  }\r\n\r\n  getTotalDuration() {\r\n    return this.sessions.reduce(\r\n      (acc, session) => acc + (session.duration || 0),\r\n      0\r\n    );\r\n  }\r\n\r\n  getTotalDistance() {\r\n    return this.sessions.reduce(\r\n      (acc, session) => acc + (session.distance || 0),\r\n      0\r\n    );\r\n  }\r\n\r\n  getTotalCalories() {\r\n    return this.sessions.reduce(\r\n      (acc, session) => acc + (session.caloriesBurned || 0),\r\n      0\r\n    );\r\n  }\r\n\r\n  getAveragePace() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return (\r\n      this.sessions.reduce((acc, session) => acc + session.calculatePace(), 0) /\r\n      this.sessions.length\r\n    );\r\n  }\r\n\r\n  getBestPace() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return Math.min(\r\n      ...this.sessions\r\n        .map((session) => session.calculatePace())\r\n        .filter((pace) => pace > 0)\r\n    );\r\n  }\r\n\r\n  getAverageSpeed() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return (\r\n      this.sessions.reduce(\r\n        (acc, session) => acc + session.calculateSpeed(),\r\n        0\r\n      ) / this.sessions.length\r\n    );\r\n  }\r\n\r\n  getBestSpeed() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return Math.max(\r\n      ...this.sessions.map((session) => session.calculateSpeed())\r\n    );\r\n  }\r\n}\r\n","export const ExerciseType = {\r\n  STRENGTH: \"Strength\",\r\n  CARDIO: \"Cardio\",\r\n  ENDURANCE: \"Endurance\",\r\n};\r\n","export class EnduranceSession {\r\n  constructor(duration, difficulty = null) {\r\n    this.duration = duration; // in seconds\r\n    this.difficulty = difficulty; // subjective rating 1-10\r\n  }\r\n\r\n  calculateIntensity() {\r\n    if (!this.difficulty || !this.duration) return 0;\r\n    return (this.difficulty * this.duration) / 60; // intensity score per minute\r\n  }\r\n}\r\n","import { Exercise } from \"./Exercise.js\";\r\nimport { EnduranceSession } from \"./EnduranceSession.js\";\r\n\r\nexport class EnduranceExercise extends Exercise {\r\n  constructor(id, name, image, description, mediaUrl, type, targetMuscle) {\r\n    super(id, name, image, description, mediaUrl, type);\r\n    this.targetMuscle = targetMuscle; // \"Core\", \"Arms\", \"Legs\", etc.\r\n    this.sessions = [];\r\n  }\r\n\r\n  addSession(duration, difficulty = null) {\r\n    this.sessions.push(new EnduranceSession(duration, difficulty));\r\n  }\r\n\r\n  removeSession(sessionIndex) {\r\n    this.sessions.splice(sessionIndex, 1);\r\n  }\r\n\r\n  getSessions() {\r\n    return this.sessions;\r\n  }\r\n\r\n  updateSession(index, duration, difficulty) {\r\n    this.sessions[index].duration = duration || this.sessions[index].duration;\r\n    this.sessions[index].difficulty =\r\n      difficulty || this.sessions[index].difficulty;\r\n  }\r\n\r\n  getTotalDuration() {\r\n    return this.sessions.reduce(\r\n      (acc, session) => acc + (session.duration || 0),\r\n      0\r\n    );\r\n  }\r\n\r\n  getAverageDuration() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return this.getTotalDuration() / this.sessions.length;\r\n  }\r\n\r\n  getMaxDuration() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return Math.max(...this.sessions.map((session) => session.duration));\r\n  }\r\n\r\n  getAverageDifficulty() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return (\r\n      this.sessions.reduce(\r\n        (acc, session) => acc + (session.difficulty || 0),\r\n        0\r\n      ) / this.sessions.length\r\n    );\r\n  }\r\n\r\n  getTotalIntensity() {\r\n    return this.sessions.reduce(\r\n      (acc, session) => acc + session.calculateIntensity(),\r\n      0\r\n    );\r\n  }\r\n\r\n  getAverageIntensity() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return this.getTotalIntensity() / this.sessions.length;\r\n  }\r\n}\r\n","export class Set {\r\n  constructor(reps, weight = null) {\r\n    this.reps = reps;\r\n    this.weight = weight;\r\n  }\r\n\r\n  calculateOneRepMax() {\r\n    if (!this.weight || !this.reps) return 0;\r\n    return Math.round(this.weight * (1 + this.reps / 30));\r\n  }\r\n}\r\n","import { Exercise } from \"./Exercise.js\";\r\nimport { Set } from \"./Set.js\";\r\n\r\nexport class StrengthExercise extends Exercise {\r\n  constructor(id, name, image, description, mediaUrl, type, bodyPart, sets) {\r\n    super(id, name, image, description, mediaUrl, type);\r\n    this.bodyPart = bodyPart;\r\n    this.sets = sets || [];\r\n  }\r\n\r\n  addSet(reps, weight) {\r\n    this.sets.push(new Set(reps, weight));\r\n  }\r\n\r\n  removeSet(setIndex) {\r\n    this.sets.splice(setIndex, 1);\r\n  }\r\n\r\n  getSets() {\r\n    return this.sets;\r\n  }\r\n\r\n  updateSet(index, reps, weight) {\r\n    this.sets[index].reps = reps || this.sets[index].reps;\r\n    this.sets[index].weight = weight || this.sets[index].weight;\r\n  }\r\n\r\n  getAverageOneRepMax() {\r\n    return (\r\n      this.sets.reduce((acc, val) => acc + val.calculateOneRepMax(), 0) /\r\n      this.sets.length\r\n    );\r\n  }\r\n\r\n  getBestOneRepMax() {\r\n    return Math.max(...this.sets.map((set) => set.calculateOneRepMax()));\r\n  }\r\n\r\n  getMaxWeight() {\r\n    return Math.max(...this.sets.map((set) => set.weight));\r\n  }\r\n\r\n  getTotalWeight() {\r\n    return this.sets.reduce(\r\n      (acc, set) => acc + (set.weight || 0) * set.reps,\r\n      0\r\n    );\r\n  }\r\n}\r\n","import { CardioExercise } from \"../CardioExercise.js\";\r\nimport { ExerciseType } from \"../Constants/ExerciseType.js\";\r\nimport { EnduranceExercise } from \"../EnduranceExercise.js\";\r\nimport { StrengthExercise } from \"../StrengthExercise.js\";\r\n\r\nexport class ExerciseFactory {\r\n  static createExercise(\r\n    type,\r\n    id,\r\n    name,\r\n    image,\r\n    description,\r\n    mediaUrl,\r\n    specificParam\r\n  ) {\r\n    switch (type) {\r\n      case ExerciseType.STRENGTH:\r\n        return this.createStrengthExercise(\r\n          id,\r\n          name,\r\n          image,\r\n          description,\r\n          mediaUrl,\r\n          specificParam\r\n        );\r\n      case ExerciseType.CARDIO:\r\n        return this.createCardioExercise(\r\n          id,\r\n          name,\r\n          image,\r\n          description,\r\n          mediaUrl,\r\n          specificParam\r\n        );\r\n      case ExerciseType.ENDURANCE:\r\n        return this.createEnduranceExercise(\r\n          id,\r\n          name,\r\n          image,\r\n          description,\r\n          mediaUrl,\r\n          specificParam\r\n        );\r\n      default:\r\n        throw new Error(`Неподдерживаемый тип упражнения: ${type}`);\r\n    }\r\n  }\r\n\r\n  static createStrengthExercise(\r\n    id,\r\n    name,\r\n    image,\r\n    description,\r\n    mediaUrl,\r\n    bodyPart,\r\n    sets = []\r\n  ) {\r\n    return new StrengthExercise(\r\n      id,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      ExerciseType.STRENGTH,\r\n      bodyPart,\r\n      sets\r\n    );\r\n  }\r\n\r\n  static createCardioExercise(\r\n    id,\r\n    name,\r\n    image,\r\n    description,\r\n    mediaUrl,\r\n    cardioType\r\n  ) {\r\n    return new CardioExercise(\r\n      id,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      ExerciseType.CARDIO,\r\n      cardioType\r\n    );\r\n  }\r\n\r\n  static createEnduranceExercise(\r\n    id,\r\n    name,\r\n    image,\r\n    description,\r\n    mediaUrl,\r\n    targetMuscle\r\n  ) {\r\n    return new EnduranceExercise(\r\n      id,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      ExerciseType.ENDURANCE,\r\n      targetMuscle\r\n    );\r\n  }\r\n}\r\n","import { ExerciseFactory } from \"../Exercise/Factory/ExerciseFactory.js\";\r\nimport { ExerciseType } from \"../Exercise/Constants/ExerciseType.js\";\r\nimport { StrengthExercise } from \"../Exercise/StrengthExercise.js\";\r\nimport { CardioExercise } from \"../Exercise/CardioExercise.js\";\r\nimport { EnduranceExercise } from \"../Exercise/EnduranceExercise.js\";\r\nimport { Set } from \"../Exercise/Set.js\";\r\nimport { CardioSession } from \"../Exercise/CardioSession.js\";\r\nimport { EnduranceSession } from \"../Exercise/EnduranceSession.js\";\r\n\r\nexport class ExerciseService {\r\n  constructor(storageManager) {\r\n    this.storageManager = storageManager;\r\n    this.exercises = this.storageManager.getExercises() || [];\r\n\r\n    this._deserializeExercises();\r\n  }\r\n\r\n  _deserializeExercises() {\r\n    this.exercises = this.exercises.map((exerciseData) => {\r\n      let exercise;\r\n\r\n      if (exerciseData.type === ExerciseType.STRENGTH) {\r\n        exercise = new StrengthExercise(\r\n          exerciseData.id,\r\n          exerciseData.name,\r\n          exerciseData.image,\r\n          exerciseData.description,\r\n          exerciseData.mediaUrl,\r\n          exerciseData.type,\r\n          exerciseData.bodyPart,\r\n          []\r\n        );\r\n\r\n        if (exerciseData.sets && exerciseData.sets.length) {\r\n          exerciseData.sets.forEach((set) => {\r\n            exercise.addSet(set.reps, set.weight);\r\n          });\r\n        }\r\n      } else if (exerciseData.type === ExerciseType.CARDIO) {\r\n        exercise = new CardioExercise(\r\n          exerciseData.id,\r\n          exerciseData.name,\r\n          exerciseData.image,\r\n          exerciseData.description,\r\n          exerciseData.mediaUrl,\r\n          exerciseData.type,\r\n          exerciseData.cardioType\r\n        );\r\n\r\n        if (exerciseData.sessions && exerciseData.sessions.length) {\r\n          exerciseData.sessions.forEach((session) => {\r\n            exercise.addSession(\r\n              session.duration,\r\n              session.distance,\r\n              session.caloriesBurned\r\n            );\r\n          });\r\n        }\r\n      } else if (exerciseData.type === ExerciseType.ENDURANCE) {\r\n        exercise = new EnduranceExercise(\r\n          exerciseData.id,\r\n          exerciseData.name,\r\n          exerciseData.image,\r\n          exerciseData.description,\r\n          exerciseData.mediaUrl,\r\n          exerciseData.type,\r\n          exerciseData.targetMuscle\r\n        );\r\n\r\n        if (exerciseData.sessions && exerciseData.sessions.length) {\r\n          exerciseData.sessions.forEach((session) => {\r\n            exercise.addSession(session.duration, session.difficulty);\r\n          });\r\n        }\r\n      }\r\n\r\n      if (exerciseData.notes && exerciseData.notes.length) {\r\n        exerciseData.notes.forEach((note) => {\r\n          exercise.addNote(note);\r\n        });\r\n      }\r\n\r\n      return exercise;\r\n    });\r\n  }\r\n\r\n  _saveExercises() {\r\n    this.storageManager.saveExercises(this.exercises);\r\n  }\r\n\r\n  generateExerciseId() {\r\n    if (!this.exercises.length) return 0;\r\n    return Math.max(...this.exercises.map((exercise) => exercise.id)) + 1;\r\n  }\r\n\r\n  createStrengthExercise(name, image, description, mediaUrl, bodyPart) {\r\n    const id = this.generateExerciseId();\r\n    const newExercise = ExerciseFactory.createStrengthExercise(\r\n      id,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      bodyPart\r\n    );\r\n\r\n    this.exercises.push(newExercise);\r\n    this._saveExercises();\r\n    return newExercise;\r\n  }\r\n\r\n  createCardioExercise(name, image, description, mediaUrl, cardioType) {\r\n    const id = this.generateExerciseId();\r\n    const newExercise = ExerciseFactory.createCardioExercise(\r\n      id,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      cardioType\r\n    );\r\n\r\n    this.exercises.push(newExercise);\r\n    this._saveExercises();\r\n    return newExercise;\r\n  }\r\n\r\n  createEnduranceExercise(name, image, description, mediaUrl, targetMuscle) {\r\n    const id = this.generateExerciseId();\r\n    const newExercise = ExerciseFactory.createEnduranceExercise(\r\n      id,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      targetMuscle\r\n    );\r\n\r\n    this.exercises.push(newExercise);\r\n    this._saveExercises();\r\n    return newExercise;\r\n  }\r\n\r\n  createGenericExercise(\r\n    type,\r\n    name,\r\n    image,\r\n    description,\r\n    mediaUrl,\r\n    specificParam\r\n  ) {\r\n    const id = this.generateExerciseId();\r\n    const newExercise = ExerciseFactory.createExercise(\r\n      type,\r\n      id,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      specificParam\r\n    );\r\n\r\n    this.exercises.push(newExercise);\r\n    this._saveExercises();\r\n    return newExercise;\r\n  }\r\n\r\n  removeExercise(exerciseId) {\r\n    this.exercises = this.exercises.filter(\r\n      (exercise) => exercise.id !== exerciseId\r\n    );\r\n    this._saveExercises();\r\n  }\r\n\r\n  clearExerciseSets(workoutId, exerciseId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) return;\r\n\r\n    const exercise = workout.exercises.find((ex) => ex.id === exerciseId);\r\n    if (!exercise) return;\r\n\r\n    if (exercise.sets) exercise.sets = [];\r\n    if (exercise.completedSets) exercise.completedSets = [];\r\n\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  clearExerciseCardioSessions(workoutId, exerciseId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) return;\r\n\r\n    const exercise = workout.exercises.find((ex) => ex.id === exerciseId);\r\n    if (!exercise) return;\r\n\r\n    if (exercise.sessions) exercise.sessions = [];\r\n    if (exercise.completedSessions) exercise.completedSessions = [];\r\n\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  clearExerciseEnduranceSessions(workoutId, exerciseId) {\r\n    this.clearExerciseCardioSessions(workoutId, exerciseId);\r\n  }\r\n\r\n  getExerciseById(exerciseId) {\r\n    return this.exercises.find((exercise) => exercise.id === exerciseId);\r\n  }\r\n\r\n  getAllExercises() {\r\n    return this.exercises;\r\n  }\r\n}\r\n","export class ExerciseStrategy {\r\n  copyExercise(exercise) {\r\n    throw new Error(\"Method must be implemented by concrete strategy\");\r\n  }\r\n\r\n  addTrackingData(exercise, data) {\r\n    throw new Error(\"Method must be implemented by concrete strategy\");\r\n  }\r\n\r\n  updateTrackingData(exercise, index, data) {\r\n    throw new Error(\"Method must be implemented by concrete strategy\");\r\n  }\r\n\r\n  getStatistics(exercise) {\r\n    throw new Error(\"Method must be implemented by concrete strategy\");\r\n  }\r\n\r\n  calculateProgress(firstExercise, lastExercise) {\r\n    throw new Error(\"Method must be implemented by concrete strategy\");\r\n  }\r\n\r\n  hasChanges(exercise, planExercise) {\r\n    throw new Error(\"Method must be implemented by concrete strategy\");\r\n  }\r\n\r\n  updatePlanData(source, target) {\r\n    throw new Error(\"Method must be implemented by concrete strategy\");\r\n  }\r\n}\r\n","import { ExerciseStrategy } from \"./ExerciseStrategy.js\";\r\nimport { StrengthExercise } from \"../StrengthExercise.js\";\r\n\r\nexport class StrengthExerciseStrategy extends ExerciseStrategy {\r\n  copyExercise(exercise) {\r\n    const newExercise = new StrengthExercise(\r\n      exercise.id,\r\n      exercise.name,\r\n      exercise.image,\r\n      exercise.description,\r\n      exercise.mediaUrl,\r\n      exercise.type,\r\n      exercise.bodyPart,\r\n      []\r\n    );\r\n\r\n    const sets = exercise.getSets\r\n      ? exercise.getSets()\r\n      : Array.isArray(exercise.sets)\r\n      ? exercise.sets\r\n      : [];\r\n\r\n    if (sets && sets.length) {\r\n      sets.forEach((set) => {\r\n        if (\r\n          set &&\r\n          typeof set === \"object\" &&\r\n          \"reps\" in set &&\r\n          \"weight\" in set\r\n        ) {\r\n          newExercise.addSet(set.reps, set.weight);\r\n        }\r\n      });\r\n    }\r\n\r\n    return newExercise;\r\n  }\r\n\r\n  addTrackingData(exercise, data) {\r\n    if (!data.reps || !data.weight) {\r\n      throw new Error(\"Reps and weight required for strength exercise\");\r\n    }\r\n    exercise.addSet(data.reps, data.weight);\r\n  }\r\n\r\n  updateTrackingData(exercise, index, data) {\r\n    if (!exercise.sets[index]) {\r\n      throw new Error(`Set at index ${index} not found`);\r\n    }\r\n    exercise.updateSet(index, data.reps, data.weight);\r\n  }\r\n\r\n  getStatistics(exercise) {\r\n    return {\r\n      totalWeight: exercise.getTotalWeight(),\r\n      bestOneRepMax: exercise.getBestOneRepMax(),\r\n      maxWeight: exercise.getMaxWeight(),\r\n    };\r\n  }\r\n\r\n  calculateProgress(firstExercise, lastExercise) {\r\n    return {\r\n      bestOneReMaxProgress:\r\n        lastExercise.getBestOneRepMax() - firstExercise.getBestOneRepMax(),\r\n      maxWeightProgress:\r\n        lastExercise.getMaxWeight() - firstExercise.getMaxWeight(),\r\n      totalWeightProgress:\r\n        lastExercise.getTotalWeight() - firstExercise.getTotalWeight(),\r\n    };\r\n  }\r\n\r\n  hasChanges(exercise, planExercise) {\r\n    if (exercise.sets.length !== planExercise.sets.length) return true;\r\n\r\n    for (let i = 0; i < exercise.sets.length; i++) {\r\n      if (\r\n        exercise.sets[i].reps !== planExercise.sets[i].reps ||\r\n        exercise.sets[i].weight !== planExercise.sets[i].weight\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  updatePlanData(source, target) {\r\n    target.sets = [];\r\n\r\n    for (const set of source.sets) {\r\n      target.addSet(set.reps, set.weight);\r\n    }\r\n  }\r\n}\r\n","import { ExerciseStrategy } from \"./ExerciseStrategy.js\";\r\nimport { CardioExercise } from \"../CardioExercise.js\";\r\n\r\nexport class CardioExerciseStrategy extends ExerciseStrategy {\r\n  copyExercise(exercise) {\r\n    const newExercise = new CardioExercise(\r\n      exercise.id,\r\n      exercise.name,\r\n      exercise.image,\r\n      exercise.description,\r\n      exercise.mediaUrl,\r\n      exercise.type,\r\n      exercise.cardioType\r\n    );\r\n\r\n    const sessions = exercise.getSessions\r\n      ? exercise.getSessions()\r\n      : Array.isArray(exercise.sessions)\r\n      ? exercise.sessions\r\n      : [];\r\n\r\n    if (sessions && sessions.length) {\r\n      sessions.forEach((session) => {\r\n        if (session && typeof session === \"object\") {\r\n          newExercise.addSession(\r\n            session.duration,\r\n            session.distance,\r\n            session.caloriesBurned\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    return newExercise;\r\n  }\r\n\r\n  addTrackingData(exercise, data) {\r\n    if (!data.duration || !data.distance) {\r\n      throw new Error(\"Duration and distance required for cardio exercise\");\r\n    }\r\n    exercise.addSession(data.duration, data.distance, data.caloriesBurned);\r\n  }\r\n\r\n  updateTrackingData(exercise, index, data) {\r\n    if (!exercise.sessions[index]) {\r\n      throw new Error(`Session at index ${index} not found`);\r\n    }\r\n    exercise.updateSession(\r\n      index,\r\n      data.duration,\r\n      data.distance,\r\n      data.caloriesBurned\r\n    );\r\n  }\r\n\r\n  getStatistics(exercise) {\r\n    const sessions = exercise.sessions || [];\r\n    const totalDistance = sessions.reduce(\r\n      (sum, session) => sum + (Number(session.distance) || 0),\r\n      0\r\n    );\r\n    const totalDuration = sessions.reduce(\r\n      (sum, session) => sum + (Number(session.duration) || 0),\r\n      0\r\n    );\r\n    const totalCalories = sessions.reduce(\r\n      (sum, session) => sum + (Number(session.caloriesBurned) || 0),\r\n      0\r\n    );\r\n\r\n    let bestPace = 0;\r\n    let averagePace = 0;\r\n    let bestSpeed = 0;\r\n    let averageSpeed = 0;\r\n\r\n    if (sessions.length > 0 && totalDistance > 0) {\r\n      const paces = sessions\r\n        .filter((s) => (Number(s.distance) || 0) > 0)\r\n        .map((s) => (Number(s.duration) || 0) / (Number(s.distance) || 1));\r\n\r\n      bestPace = Math.min(...paces);\r\n      averagePace = totalDuration / totalDistance;\r\n\r\n      const speeds = sessions\r\n        .filter((s) => (Number(s.duration) || 0) > 0)\r\n        .map(\r\n          (s) => ((Number(s.distance) || 0) / (Number(s.duration) || 1)) * 60\r\n        );\r\n\r\n      bestSpeed = Math.max(...speeds);\r\n      averageSpeed = totalDistance / (totalDuration / 60);\r\n    }\r\n\r\n    return {\r\n      totalDistance,\r\n      distance: totalDistance,\r\n      totalDuration,\r\n      duration: totalDuration,\r\n      bestPace,\r\n      averagePace,\r\n      bestSpeed,\r\n      averageSpeed,\r\n      totalCalories,\r\n      caloriesBurned: totalCalories,\r\n    };\r\n  }\r\n\r\n  calculateProgress(firstExercise, lastExercise) {\r\n    const firstStats = this.getStatistics(firstExercise);\r\n    const lastStats = this.getStatistics(lastExercise);\r\n\r\n    return {\r\n      distanceProgress: lastStats.totalDistance - firstStats.totalDistance,\r\n      durationProgress: lastStats.totalDuration - firstStats.totalDuration,\r\n      caloriesProgress: lastStats.totalCalories - firstStats.totalCalories,\r\n\r\n      totalDistanceProgress: lastStats.totalDistance - firstStats.totalDistance,\r\n      totalDurationProgress: lastStats.totalDuration - firstStats.totalDuration,\r\n      bestPaceProgress: lastStats.bestPace - firstStats.bestPace,\r\n      bestSpeedProgress: lastStats.bestSpeed - firstStats.bestSpeed,\r\n      totalCaloriesProgress: lastStats.totalCalories - firstStats.totalCalories,\r\n    };\r\n  }\r\n\r\n  hasChanges(exercise, planExercise) {\r\n    if (exercise.sessions.length !== planExercise.sessions.length) return true;\r\n\r\n    for (let i = 0; i < exercise.sessions.length; i++) {\r\n      if (\r\n        exercise.sessions[i].duration !== planExercise.sessions[i].duration ||\r\n        exercise.sessions[i].distance !== planExercise.sessions[i].distance ||\r\n        exercise.sessions[i].caloriesBurned !==\r\n          planExercise.sessions[i].caloriesBurned\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  updatePlanData(source, target) {\r\n    target.sessions = [];\r\n\r\n    for (const session of source.sessions) {\r\n      target.addSession(\r\n        session.duration,\r\n        session.distance,\r\n        session.caloriesBurned\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { ExerciseStrategy } from \"./ExerciseStrategy.js\";\r\nimport { EnduranceExercise } from \"../EnduranceExercise.js\";\r\n\r\nexport class EnduranceExerciseStrategy extends ExerciseStrategy {\r\n  copyExercise(exercise) {\r\n    const newExercise = new EnduranceExercise(\r\n      exercise.id,\r\n      exercise.name,\r\n      exercise.image,\r\n      exercise.description,\r\n      exercise.mediaUrl,\r\n      exercise.type,\r\n      exercise.targetMuscle\r\n    );\r\n\r\n    const sessions = exercise.getSessions\r\n      ? exercise.getSessions()\r\n      : Array.isArray(exercise.sessions)\r\n      ? exercise.sessions\r\n      : [];\r\n\r\n    if (sessions && sessions.length) {\r\n      sessions.forEach((session) => {\r\n        if (session && typeof session === \"object\") {\r\n          newExercise.addSession(session.duration, session.difficulty);\r\n        }\r\n      });\r\n    }\r\n\r\n    return newExercise;\r\n  }\r\n\r\n  addTrackingData(exercise, data) {\r\n    if (!data.duration) {\r\n      throw new Error(\"Duration required for endurance exercise\");\r\n    }\r\n    exercise.addSession(data.duration, data.difficulty);\r\n  }\r\n\r\n  updateTrackingData(exercise, index, data) {\r\n    if (!exercise.sessions[index]) {\r\n      throw new Error(`Session at index ${index} not found`);\r\n    }\r\n    exercise.updateSession(index, data.duration, data.difficulty);\r\n  }\r\n\r\n  getStatistics(exercise) {\r\n    const sessions = exercise.sessions || [];\r\n    const totalDuration = sessions.reduce(\r\n      (sum, session) => sum + (Number(session.duration) || 0),\r\n      0\r\n    );\r\n    const averageDifficulty =\r\n      sessions.length > 0\r\n        ? sessions.reduce(\r\n            (sum, session) => sum + (Number(session.difficulty) || 0),\r\n            0\r\n          ) / sessions.length\r\n        : 0;\r\n\r\n    const maxDuration =\r\n      sessions.length > 0\r\n        ? Math.max(...sessions.map((session) => Number(session.duration) || 0))\r\n        : 0;\r\n\r\n    return {\r\n      totalDuration,\r\n      duration: totalDuration,\r\n      maxDuration,\r\n      averageDifficulty,\r\n      totalIntensity: averageDifficulty,\r\n      difficulty: averageDifficulty,\r\n      sessionsCount: sessions.length,\r\n    };\r\n  }\r\n\r\n  calculateProgress(firstExercise, lastExercise) {\r\n    const firstStats = this.getStatistics(firstExercise);\r\n    const lastStats = this.getStatistics(lastExercise);\r\n\r\n    return {\r\n      durationProgress: lastStats.totalDuration - firstStats.totalDuration,\r\n      intensityProgress: lastStats.totalIntensity - firstStats.totalIntensity,\r\n      totalDurationProgress: lastStats.totalDuration - firstStats.totalDuration,\r\n      maxDurationProgress: lastStats.maxDuration - firstStats.maxDuration,\r\n      averageDifficultyProgress:\r\n        lastStats.averageDifficulty - firstStats.averageDifficulty,\r\n      totalIntensityProgress:\r\n        lastStats.totalIntensity - firstStats.totalIntensity,\r\n    };\r\n  }\r\n\r\n  hasChanges(exercise, planExercise) {\r\n    if (exercise.sessions.length !== planExercise.sessions.length) return true;\r\n\r\n    for (let i = 0; i < exercise.sessions.length; i++) {\r\n      if (\r\n        exercise.sessions[i].duration !== planExercise.sessions[i].duration ||\r\n        exercise.sessions[i].difficulty !== planExercise.sessions[i].difficulty\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  updatePlanData(source, target) {\r\n    target.sessions = [];\r\n\r\n    for (const session of source.sessions) {\r\n      target.addSession(session.duration, session.difficulty);\r\n    }\r\n  }\r\n}\r\n","import { ExerciseType } from \"../Constants/ExerciseType.js\";\r\nimport { StrengthExerciseStrategy } from \"./StrengthExerciseStrategy.js\";\r\nimport { CardioExerciseStrategy } from \"./CardioExerciseStrategy.js\";\r\nimport { EnduranceExerciseStrategy } from \"./EnduranceExerciseStrategy.js\";\r\n\r\nexport class ExerciseStrategyFactory {\r\n  constructor() {\r\n    this.strategies = {\r\n      [ExerciseType.STRENGTH]: new StrengthExerciseStrategy(),\r\n      [ExerciseType.CARDIO]: new CardioExerciseStrategy(),\r\n      [ExerciseType.ENDURANCE]: new EnduranceExerciseStrategy(),\r\n    };\r\n  }\r\n\r\n  getStrategy(exerciseType) {\r\n    const strategy = this.strategies[exerciseType];\r\n    if (!strategy) {\r\n      throw new Error(`No strategy found for exercise type: ${exerciseType}`);\r\n    }\r\n    return strategy;\r\n  }\r\n\r\n  registerStrategy(exerciseType, strategy) {\r\n    this.strategies[exerciseType] = strategy;\r\n  }\r\n}\r\n","import { StrengthExercise } from \"../Exercise/StrengthExercise.js\";\r\nimport { CardioExercise } from \"../Exercise/CardioExercise.js\";\r\nimport { EnduranceExercise } from \"../Exercise/EnduranceExercise.js\";\r\nimport { ExerciseType } from \"../Exercise/Constants/ExerciseType.js\";\r\nimport { ExerciseStrategyFactory } from \"../Exercise/Strategies/ExerciseStrategyFactory.js\";\r\n\r\nexport class WorkoutPlan {\r\n  constructor(id, ownerId, name, description, exercises) {\r\n    this.id = id;\r\n    this.ownerId = ownerId;\r\n    this.name = name;\r\n    this.description = description || \"\";\r\n    this.exercises = [];\r\n    this.notes = [];\r\n\r\n    this.strategyFactory = new ExerciseStrategyFactory();\r\n  }\r\n\r\n  updateWorkoutPlan(name, description) {\r\n    this.name = name || this.name;\r\n    this.description = description || this.description;\r\n  }\r\n\r\n  addExercise(exercise) {\r\n    try {\r\n      const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n      const newExercise = strategy.copyExercise(exercise);\r\n      this.exercises.push(newExercise);\r\n      return newExercise;\r\n    } catch (error) {\r\n      throw new Error(`Failed to add exercise: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  getExerciseById(exerciseId) {\r\n    return this.exercises.find((ex) => ex.id === exerciseId);\r\n  }\r\n\r\n  addTrackingData(exerciseId, data) {\r\n    const exercise = this.getExerciseById(exerciseId);\r\n    if (!exercise) {\r\n      throw new Error(`Exercise with id ${exerciseId} not found`);\r\n    }\r\n\r\n    const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n    strategy.addTrackingData(exercise, data);\r\n    return exercise;\r\n  }\r\n\r\n  addSetToExercise(exerciseId, reps, weight) {\r\n    return this.addTrackingData(exerciseId, { reps, weight });\r\n  }\r\n\r\n  addSessionToExercise(exerciseId, duration, distance, caloriesBurned = null) {\r\n    return this.addTrackingData(exerciseId, {\r\n      duration,\r\n      distance,\r\n      caloriesBurned,\r\n    });\r\n  }\r\n\r\n  addEnduranceSessionToExercise(exerciseId, duration, difficulty = null) {\r\n    return this.addTrackingData(exerciseId, { duration, difficulty });\r\n  }\r\n\r\n  updateTrackingData(exerciseId, index, data) {\r\n    const exercise = this.getExerciseById(exerciseId);\r\n    if (!exercise) {\r\n      throw new Error(`Exercise with id ${exerciseId} not found`);\r\n    }\r\n\r\n    const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n    strategy.updateTrackingData(exercise, index, data);\r\n  }\r\n\r\n  updateSetInExercise(exerciseId, setIndex, reps, weight) {\r\n    return this.updateTrackingData(exerciseId, setIndex, { reps, weight });\r\n  }\r\n\r\n  updateSessionInExercise(\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    distance,\r\n    caloriesBurned\r\n  ) {\r\n    return this.updateTrackingData(exerciseId, sessionIndex, {\r\n      duration,\r\n      distance,\r\n      caloriesBurned,\r\n    });\r\n  }\r\n\r\n  updateEnduranceSessionInExercise(\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    difficulty\r\n  ) {\r\n    return this.updateTrackingData(exerciseId, sessionIndex, {\r\n      duration,\r\n      difficulty,\r\n    });\r\n  }\r\n\r\n  removeExercise(exerciseId) {\r\n    this.exercises = this.exercises.filter(\r\n      (exercise) => exercise.id !== exerciseId\r\n    );\r\n  }\r\n\r\n  removeTrackingData(exerciseId, index) {\r\n    const exercise = this.getExerciseById(exerciseId);\r\n    if (!exercise) {\r\n      throw new Error(`Exercise with id ${exerciseId} not found`);\r\n    }\r\n\r\n    const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n\r\n    if (exercise.type === \"Strength\" && exercise.sets) {\r\n      exercise.sets.splice(index, 1);\r\n    } else if (\r\n      (exercise.type === \"Cardio\" || exercise.type === \"Endurance\") &&\r\n      exercise.sessions\r\n    ) {\r\n      exercise.sessions.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  // Методы-обёртки для обратной совместимости\r\n  removeSetFromExercise(exerciseId, setIndex) {\r\n    return this.removeTrackingData(exerciseId, setIndex);\r\n  }\r\n\r\n  removeSessionFromExercise(exerciseId, sessionIndex) {\r\n    return this.removeTrackingData(exerciseId, sessionIndex);\r\n  }\r\n\r\n  removeEnduranceSessionFromExercise(exerciseId, sessionIndex) {\r\n    return this.removeTrackingData(exerciseId, sessionIndex);\r\n  }\r\n\r\n  addNote(note) {\r\n    this.notes.push(note);\r\n  }\r\n\r\n  removeNote(noteIndex) {\r\n    this.notes.splice(noteIndex, 1);\r\n  }\r\n}\r\n","import { ExerciseType } from \"../Exercise/Constants/ExerciseType.js\";\r\nimport { WorkoutPlan } from \"../WorkoutPlan/WorkoutPlan.js\";\r\nimport { ExerciseStrategyFactory } from \"../Exercise/Strategies/ExerciseStrategyFactory.js\";\r\n\r\nexport class WorkoutPlanService {\r\n  constructor(exerciseService, storageManager) {\r\n    this.exerciseService = exerciseService;\r\n    this.storageManager = storageManager;\r\n    this.workoutPlans = this.storageManager.getWorkoutPlans() || [];\r\n    this.strategyFactory = new ExerciseStrategyFactory();\r\n\r\n    this._deserializeWorkoutPlans();\r\n  }\r\n\r\n  _deserializeWorkoutPlans() {\r\n    this.workoutPlans = this.workoutPlans.map((planData) => {\r\n      const workoutPlan = new WorkoutPlan(\r\n        planData.id,\r\n        planData.ownerId,\r\n        planData.name,\r\n        planData.description\r\n      );\r\n\r\n      if (planData.notes && planData.notes.length) {\r\n        planData.notes.forEach((note) => {\r\n          workoutPlan.addNote(note);\r\n        });\r\n      }\r\n\r\n      if (planData.exercises && planData.exercises.length) {\r\n        planData.exercises.forEach((exerciseData) => {\r\n          const originalExercise = this.exerciseService.getExerciseById(\r\n            exerciseData.id\r\n          );\r\n          if (originalExercise) {\r\n            const planExercise = workoutPlan.addExercise(originalExercise);\r\n\r\n            if (\r\n              exerciseData.type === ExerciseType.STRENGTH &&\r\n              exerciseData.sets\r\n            ) {\r\n              exerciseData.sets.forEach((set) => {\r\n                workoutPlan.addSetToExercise(\r\n                  exerciseData.id,\r\n                  set.reps,\r\n                  set.weight\r\n                );\r\n              });\r\n            } else if (\r\n              exerciseData.type === ExerciseType.CARDIO &&\r\n              exerciseData.sessions\r\n            ) {\r\n              exerciseData.sessions.forEach((session) => {\r\n                workoutPlan.addSessionToExercise(\r\n                  exerciseData.id,\r\n                  session.duration,\r\n                  session.distance,\r\n                  session.caloriesBurned\r\n                );\r\n              });\r\n            } else if (\r\n              exerciseData.type === ExerciseType.ENDURANCE &&\r\n              exerciseData.sessions\r\n            ) {\r\n              exerciseData.sessions.forEach((session) => {\r\n                workoutPlan.addEnduranceSessionToExercise(\r\n                  exerciseData.id,\r\n                  session.duration,\r\n                  session.difficulty\r\n                );\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      return workoutPlan;\r\n    });\r\n  }\r\n\r\n  _saveWorkoutPlans() {\r\n    this.storageManager.saveWorkoutPlans(this.workoutPlans);\r\n  }\r\n\r\n  generateWorkoutPlanId() {\r\n    if (!this.workoutPlans.length) return 0;\r\n    return Math.max(...this.workoutPlans.map((plan) => plan.id)) + 1;\r\n  }\r\n\r\n  createWorkoutPlan(ownerId, name, description) {\r\n    const id = this.generateWorkoutPlanId();\r\n    const workoutPlan = new WorkoutPlan(id, ownerId, name, description);\r\n\r\n    this.workoutPlans.push(workoutPlan);\r\n    this._saveWorkoutPlans();\r\n    return workoutPlan;\r\n  }\r\n\r\n  deleteWorkoutPlan(workoutPlanId) {\r\n    this.workoutPlans = this.workoutPlans.filter(\r\n      (workoutPlan) => workoutPlan.id !== workoutPlanId\r\n    );\r\n    this._saveWorkoutPlans();\r\n  }\r\n\r\n  addExerciseToWorkoutPlan(workoutPlanId, exerciseId) {\r\n    const workoutPlan = this.getWorkoutPlanById(workoutPlanId);\r\n    const exercise = this.exerciseService.getExerciseById(exerciseId);\r\n\r\n    if (!workoutPlan) {\r\n      throw new Error(`План тренировки с ID ${workoutPlanId} не найден`);\r\n    }\r\n\r\n    if (!exercise) {\r\n      throw new Error(`Упражнение с ID ${exerciseId} не найдено`);\r\n    }\r\n\r\n    workoutPlan.addExercise(exercise);\r\n    this._saveWorkoutPlans();\r\n    return workoutPlan;\r\n  }\r\n\r\n  removeExerciseFromWorkoutPlan(workoutPlanId, exerciseId) {\r\n    const workoutPlan = this.getWorkoutPlanById(workoutPlanId);\r\n\r\n    if (!workoutPlan) {\r\n      throw new Error(`План тренировки с ID ${workoutPlanId} не найден`);\r\n    }\r\n\r\n    workoutPlan.removeExercise(exerciseId);\r\n    this._saveWorkoutPlans();\r\n    return workoutPlan;\r\n  }\r\n\r\n  addTrackingDataToExercise(workoutPlanId, exerciseId, data) {\r\n    const workoutPlan = this.getWorkoutPlanById(workoutPlanId);\r\n\r\n    if (!workoutPlan) {\r\n      throw new Error(`План тренировки с ID ${workoutPlanId} не найден`);\r\n    }\r\n\r\n    const exercise = workoutPlan.exercises.find(\r\n      (exercise) => exercise.id === exerciseId\r\n    );\r\n\r\n    if (!exercise) {\r\n      throw new Error(`Упражнение с ID ${exerciseId} не найдено в плане`);\r\n    }\r\n\r\n    try {\r\n      const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n      strategy.addTrackingData(exercise, data);\r\n      this._saveWorkoutPlans();\r\n      return exercise;\r\n    } catch (error) {\r\n      throw new Error(`Ошибка добавления данных: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  addSetToExerciseInWorkoutPlan(workoutPlanId, exerciseId, reps, weight) {\r\n    return this.addTrackingDataToExercise(workoutPlanId, exerciseId, {\r\n      reps,\r\n      weight,\r\n    });\r\n  }\r\n\r\n  addSessionToExerciseInWorkoutPlan(\r\n    workoutPlanId,\r\n    exerciseId,\r\n    duration,\r\n    distance,\r\n    caloriesBurned = null\r\n  ) {\r\n    return this.addTrackingDataToExercise(workoutPlanId, exerciseId, {\r\n      duration,\r\n      distance,\r\n      caloriesBurned,\r\n    });\r\n  }\r\n\r\n  addEnduranceSessionToExerciseInWorkoutPlan(\r\n    workoutPlanId,\r\n    exerciseId,\r\n    duration,\r\n    difficulty = null\r\n  ) {\r\n    return this.addTrackingDataToExercise(workoutPlanId, exerciseId, {\r\n      duration,\r\n      difficulty,\r\n    });\r\n  }\r\n\r\n  updateTrackingDataInExercise(workoutPlanId, exerciseId, index, data) {\r\n    const workoutPlan = this.getWorkoutPlanById(workoutPlanId);\r\n\r\n    if (!workoutPlan) {\r\n      throw new Error(`План тренировки с ID ${workoutPlanId} не найден`);\r\n    }\r\n\r\n    const exercise = workoutPlan.exercises.find(\r\n      (exercise) => exercise.id === exerciseId\r\n    );\r\n\r\n    if (!exercise) {\r\n      throw new Error(`Упражнение с ID ${exerciseId} не найдено в плане`);\r\n    }\r\n\r\n    try {\r\n      const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n      strategy.updateTrackingData(exercise, index, data);\r\n      this._saveWorkoutPlans();\r\n      return exercise;\r\n    } catch (error) {\r\n      throw new Error(`Ошибка обновления данных: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  updateSetInExercise(workoutPlanId, exerciseId, setIndex, reps, weight) {\r\n    return this.updateTrackingDataInExercise(\r\n      workoutPlanId,\r\n      exerciseId,\r\n      setIndex,\r\n      { reps, weight }\r\n    );\r\n  }\r\n\r\n  updateSessionInExercise(\r\n    workoutPlanId,\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    distance,\r\n    caloriesBurned\r\n  ) {\r\n    return this.updateTrackingDataInExercise(\r\n      workoutPlanId,\r\n      exerciseId,\r\n      sessionIndex,\r\n      { duration, distance, caloriesBurned }\r\n    );\r\n  }\r\n\r\n  updateEnduranceSessionInExercise(\r\n    workoutPlanId,\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    difficulty\r\n  ) {\r\n    return this.updateTrackingDataInExercise(\r\n      workoutPlanId,\r\n      exerciseId,\r\n      sessionIndex,\r\n      { duration, difficulty }\r\n    );\r\n  }\r\n\r\n  removeTrackingDataFromExercise(workoutPlanId, exerciseId, index) {\r\n    const workoutPlan = this.getWorkoutPlanById(workoutPlanId);\r\n\r\n    if (!workoutPlan) {\r\n      throw new Error(`План тренировки с ID ${workoutPlanId} не найден`);\r\n    }\r\n\r\n    workoutPlan.removeTrackingData(exerciseId, index);\r\n    this._saveWorkoutPlans();\r\n    return workoutPlan;\r\n  }\r\n\r\n  removeSetFromExercise(workoutPlanId, exerciseId, setIndex) {\r\n    return this.removeTrackingDataFromExercise(\r\n      workoutPlanId,\r\n      exerciseId,\r\n      setIndex\r\n    );\r\n  }\r\n\r\n  removeSessionFromExercise(workoutPlanId, exerciseId, sessionIndex) {\r\n    return this.removeTrackingDataFromExercise(\r\n      workoutPlanId,\r\n      exerciseId,\r\n      sessionIndex\r\n    );\r\n  }\r\n\r\n  getWorkoutPlanById(workoutPlanId) {\r\n    return this.workoutPlans.find(\r\n      (workoutPlan) => workoutPlan.id === workoutPlanId\r\n    );\r\n  }\r\n\r\n  getWorkoutPlansForUser(userId) {\r\n    return this.workoutPlans.filter((plan) => plan.ownerId === userId);\r\n  }\r\n\r\n  getAllWorkoutPlans() {\r\n    return this.workoutPlans;\r\n  }\r\n\r\n  addCardioSessionToExerciseInWorkoutPlan(\r\n    planId,\r\n    exerciseId,\r\n    duration,\r\n    distance,\r\n    caloriesBurned\r\n  ) {\r\n    const plan = this.getWorkoutPlanById(planId);\r\n    if (!plan) throw new Error(`План ${planId} не найден`);\r\n\r\n    const exerciseIndex = plan.exercises.findIndex(\r\n      (ex) => ex.id === exerciseId\r\n    );\r\n    if (exerciseIndex === -1)\r\n      throw new Error(`Упражнение ${exerciseId} не найдено в плане ${planId}`);\r\n\r\n    if (!plan.exercises[exerciseIndex].sessions) {\r\n      plan.exercises[exerciseIndex].sessions = [];\r\n    }\r\n\r\n    plan.exercises[exerciseIndex].sessions.push({\r\n      duration,\r\n      distance,\r\n      caloriesBurned,\r\n    });\r\n\r\n    this._savePlans();\r\n    return plan;\r\n  }\r\n\r\n  addEnduranceSessionToExerciseInWorkoutPlan(\r\n    planId,\r\n    exerciseId,\r\n    duration,\r\n    difficulty\r\n  ) {\r\n    const plan = this.getWorkoutPlanById(planId);\r\n    if (!plan) throw new Error(`План ${planId} не найден`);\r\n\r\n    const exerciseIndex = plan.exercises.findIndex(\r\n      (ex) => ex.id === exerciseId\r\n    );\r\n    if (exerciseIndex === -1)\r\n      throw new Error(`Упражнение ${exerciseId} не найдено в плане ${planId}`);\r\n\r\n    if (!plan.exercises[exerciseIndex].sessions) {\r\n      plan.exercises[exerciseIndex].sessions = [];\r\n    }\r\n\r\n    plan.exercises[exerciseIndex].sessions.push({\r\n      duration,\r\n      difficulty,\r\n    });\r\n\r\n    this._savePlans();\r\n    return plan;\r\n  }\r\n}\r\n","import { ExerciseType } from \"../Exercise/Constants/ExerciseType.js\";\r\nimport { ExerciseStrategyFactory } from \"../Exercise/Strategies/ExerciseStrategyFactory.js\";\r\n\r\nexport class Workout {\r\n  constructor(id, ownerId, date, plan = null) {\r\n    this.id = id;\r\n    this.ownerId = ownerId;\r\n    this.date = date || new Date();\r\n    this.plan = plan;\r\n    this.exercises = [];\r\n\r\n    this.strategyFactory = new ExerciseStrategyFactory();\r\n\r\n    if (plan && plan.exercises) {\r\n      this.exercises = plan.exercises\r\n        .map((ex) => {\r\n          try {\r\n            const strategy = this.strategyFactory.getStrategy(ex.type);\r\n            return strategy.copyExercise(ex);\r\n          } catch (error) {\r\n            console.error(`Error copying exercise: ${error.message}`);\r\n            return null;\r\n          }\r\n        })\r\n        .filter((ex) => ex !== null);\r\n    }\r\n  }\r\n\r\n  addExercise(exercise) {\r\n    try {\r\n      const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n      const newExercise = strategy.copyExercise(exercise);\r\n      this.exercises.push(newExercise);\r\n      return newExercise;\r\n    } catch (error) {\r\n      throw new Error(`Failed to add exercise: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  getExerciseById(exerciseId) {\r\n    return this.exercises.find((ex) => ex.id === exerciseId);\r\n  }\r\n\r\n  recordTrackingData(exerciseId, data) {\r\n    const exercise = this.getExerciseById(exerciseId);\r\n    if (!exercise) {\r\n      throw new Error(`Exercise with id ${exerciseId} not found`);\r\n    }\r\n\r\n    const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n    strategy.addTrackingData(exercise, data);\r\n  }\r\n\r\n  recordSet(exerciseId, reps, weight) {\r\n    return this.recordTrackingData(exerciseId, { reps, weight });\r\n  }\r\n\r\n  recordCardioSession(exerciseId, duration, distance, caloriesBurned = null) {\r\n    return this.recordTrackingData(exerciseId, {\r\n      duration,\r\n      distance,\r\n      caloriesBurned,\r\n    });\r\n  }\r\n\r\n  recordEnduranceSession(exerciseId, duration, difficulty = null) {\r\n    return this.recordTrackingData(exerciseId, { duration, difficulty });\r\n  }\r\n\r\n  updateTrackingData(exerciseId, index, data) {\r\n    const exercise = this.getExerciseById(exerciseId);\r\n    if (!exercise) {\r\n      throw new Error(`Exercise with id ${exerciseId} not found`);\r\n    }\r\n\r\n    const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n    strategy.updateTrackingData(exercise, index, data);\r\n  }\r\n\r\n  updateSet(exerciseId, setIndex, reps, weight) {\r\n    return this.updateTrackingData(exerciseId, setIndex, { reps, weight });\r\n  }\r\n\r\n  updateCardioSession(\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    distance,\r\n    caloriesBurned\r\n  ) {\r\n    return this.updateTrackingData(exerciseId, sessionIndex, {\r\n      duration,\r\n      distance,\r\n      caloriesBurned,\r\n    });\r\n  }\r\n\r\n  updateEnduranceSession(exerciseId, sessionIndex, duration, difficulty) {\r\n    return this.updateTrackingData(exerciseId, sessionIndex, {\r\n      duration,\r\n      difficulty,\r\n    });\r\n  }\r\n\r\n  getTotalStatisticByType(exerciseType, statName) {\r\n    return this.exercises\r\n      .filter((ex) => ex.type === exerciseType)\r\n      .reduce((total, exercise) => {\r\n        const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n        const stats = strategy.getStatistics(exercise);\r\n        return total + (stats[statName] || 0);\r\n      }, 0);\r\n  }\r\n\r\n  getTotalWeight() {\r\n    return this.getTotalStatisticByType(ExerciseType.STRENGTH, \"totalWeight\");\r\n  }\r\n\r\n  getTotalDistance() {\r\n    return this.getTotalStatisticByType(ExerciseType.CARDIO, \"totalDistance\");\r\n  }\r\n\r\n  getTotalDuration() {\r\n    return this.getTotalStatisticByType(ExerciseType.CARDIO, \"totalDuration\");\r\n  }\r\n\r\n  getTotalCalories() {\r\n    return this.getTotalStatisticByType(ExerciseType.CARDIO, \"totalCalories\");\r\n  }\r\n\r\n  getTotalEnduranceDuration() {\r\n    return this.getTotalStatisticByType(\r\n      ExerciseType.ENDURANCE,\r\n      \"totalDuration\"\r\n    );\r\n  }\r\n\r\n  getMaxEnduranceDuration() {\r\n    const durations = this.exercises\r\n      .filter((ex) => ex.type === ExerciseType.ENDURANCE)\r\n      .map((exercise) => {\r\n        const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n        const stats = strategy.getStatistics(exercise);\r\n        return stats.maxDuration || 0;\r\n      });\r\n\r\n    return durations.length ? Math.max(...durations) : 0;\r\n  }\r\n\r\n  getTotalEnduranceIntensity() {\r\n    return this.getTotalStatisticByType(\r\n      ExerciseType.ENDURANCE,\r\n      \"totalIntensity\"\r\n    );\r\n  }\r\n\r\n  hasChangesFromPlan() {\r\n    if (!this.plan) return false;\r\n\r\n    if (this.plan.exercises.length > this.exercises.length) return true;\r\n\r\n    for (const exercise of this.exercises) {\r\n      const planExercise = this.plan.exercises.find(\r\n        (ex) => ex.id === exercise.id\r\n      );\r\n\r\n      if (!planExercise) return true;\r\n\r\n      const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n      if (strategy.hasChanges(exercise, planExercise)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  updatePlanSets() {\r\n    if (!this.plan) return false;\r\n\r\n    for (const exercise of this.exercises) {\r\n      const planExercise = this.plan.exercises.find(\r\n        (ex) => ex.id === exercise.id\r\n      );\r\n\r\n      if (planExercise) {\r\n        const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n        strategy.updatePlanData(exercise, planExercise);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import { Workout } from \"../Workout/Workout.js\";\r\n\r\nexport class WorkoutService {\r\n  constructor(exerciseService, workoutPlanService, storageManager) {\r\n    this.exerciseService = exerciseService;\r\n    this.workoutPlanService = workoutPlanService;\r\n    this.storageManager = storageManager;\r\n    this.workouts = this.storageManager.getWorkouts() || [];\r\n\r\n    this._deserializeWorkouts();\r\n  }\r\n\r\n  _deserializeWorkouts() {\r\n    this.workouts = this.workouts.map((workoutData) => {\r\n      let plan = null;\r\n\r\n      if (workoutData.plan && workoutData.plan.id !== undefined) {\r\n        plan = this.workoutPlanService.getWorkoutPlanById(workoutData.plan.id);\r\n      }\r\n\r\n      const workout = new Workout(\r\n        workoutData.id,\r\n        workoutData.ownerId,\r\n        new Date(workoutData.date),\r\n        plan\r\n      );\r\n\r\n      if (workoutData.exercises && workoutData.exercises.length) {\r\n        workoutData.exercises.forEach((exerciseData) => {\r\n          if (!workout.getExerciseById(exerciseData.id)) {\r\n            const originalExercise = this.exerciseService.getExerciseById(\r\n              exerciseData.id\r\n            );\r\n            if (originalExercise) {\r\n              const workoutExercise = workout.addExercise(originalExercise);\r\n\r\n              if (exerciseData.sets && exerciseData.sets.length) {\r\n                exerciseData.sets.forEach((set) => {\r\n                  workout.recordSet(exerciseData.id, set.reps, set.weight);\r\n                });\r\n              } else if (\r\n                exerciseData.sessions &&\r\n                exerciseData.sessions.length\r\n              ) {\r\n                if (exerciseData.type === \"Cardio\") {\r\n                  exerciseData.sessions.forEach((session) => {\r\n                    workout.recordCardioSession(\r\n                      exerciseData.id,\r\n                      session.duration,\r\n                      session.distance,\r\n                      session.caloriesBurned\r\n                    );\r\n                  });\r\n                } else if (exerciseData.type === \"Endurance\") {\r\n                  exerciseData.sessions.forEach((session) => {\r\n                    workout.recordEnduranceSession(\r\n                      exerciseData.id,\r\n                      session.duration,\r\n                      session.difficulty\r\n                    );\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      return workout;\r\n    });\r\n  }\r\n\r\n  _saveWorkouts() {\r\n    this.storageManager.saveWorkouts(this.workouts);\r\n  }\r\n\r\n  generateWorkoutId() {\r\n    if (!this.workouts.length) return 0;\r\n    return Math.max(...this.workouts.map((workout) => workout.id)) + 1;\r\n  }\r\n\r\n  createWorkout(ownerId, date = null, workoutPlanId) {\r\n    let plan = null;\r\n    if (workoutPlanId !== undefined) {\r\n      plan = this.workoutPlanService.getWorkoutPlanById(workoutPlanId);\r\n      if (!plan) {\r\n        throw new Error(`План тренировки с ID ${workoutPlanId} не найден`);\r\n      }\r\n    }\r\n\r\n    const id = this.generateWorkoutId();\r\n    const workout = new Workout(id, ownerId, date || new Date(), plan);\r\n\r\n    this.workouts.push(workout);\r\n    this._saveWorkouts();\r\n    return workout;\r\n  }\r\n\r\n  addExerciseToWorkout(workoutId, exerciseId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    const exercise = this.exerciseService.getExerciseById(exerciseId);\r\n\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n\r\n    if (!exercise) {\r\n      throw new Error(`Упражнение с ID ${exerciseId} не найдено`);\r\n    }\r\n\r\n    const addedExercise = workout.addExercise(exercise);\r\n    this._saveWorkouts();\r\n    return workout;\r\n  }\r\n\r\n  recordSetInWorkout(workoutId, exerciseId, reps, weight) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n\r\n    workout.recordSet(exerciseId, reps, weight);\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  updateSetInWorkout(workoutId, exerciseId, setIndex, reps, weight) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n\r\n    workout.updateSet(exerciseId, setIndex, reps, weight);\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  recordCardioSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    duration,\r\n    distance,\r\n    caloriesBurned = null\r\n  ) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n\r\n    workout.recordCardioSession(exerciseId, duration, distance, caloriesBurned);\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  updateCardioSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    distance,\r\n    caloriesBurned\r\n  ) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n\r\n    workout.updateCardioSession(\r\n      exerciseId,\r\n      sessionIndex,\r\n      duration,\r\n      distance,\r\n      caloriesBurned\r\n    );\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  recordEnduranceSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    duration,\r\n    difficulty = null\r\n  ) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n\r\n    workout.recordEnduranceSession(exerciseId, duration, difficulty);\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  updateEnduranceSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    difficulty\r\n  ) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n\r\n    workout.updateEnduranceSession(\r\n      exerciseId,\r\n      sessionIndex,\r\n      duration,\r\n      difficulty\r\n    );\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  getWorkoutById(workoutId) {\r\n    return this.workouts.find((workout) => workout.id === workoutId);\r\n  }\r\n\r\n  getWorkoutsForUser(userId) {\r\n    return this.workouts.filter((workout) => workout.ownerId === userId);\r\n  }\r\n\r\n  getAllWorkouts() {\r\n    return this.workouts;\r\n  }\r\n\r\n  getTotalWeightForWorkout(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    return workout.getTotalWeight();\r\n  }\r\n\r\n  getTotalDistanceForWorkout(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    return workout.getTotalDistance();\r\n  }\r\n\r\n  getTotalDurationForWorkout(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    return workout.getTotalDuration();\r\n  }\r\n\r\n  getTotalEnduranceDurationForWorkout(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    return workout.getTotalEnduranceDuration();\r\n  }\r\n\r\n  getMaxEnduranceDurationForWorkout(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    return workout.getMaxEnduranceDuration();\r\n  }\r\n\r\n  getEnduranceTotalIntensityForWorkout(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    return workout.getTotalEnduranceIntensity();\r\n  }\r\n\r\n  hasChangesFromPlan(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    return workout.hasChangesFromPlan();\r\n  }\r\n\r\n  updatePlanSetsInWorkout(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    const result = workout.updatePlanSets();\r\n    this._saveWorkouts();\r\n    return result;\r\n  }\r\n\r\n  getExerciseInWorkout(workoutId, exerciseId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n\r\n    const exercise = workout.exercises.find((ex) => ex.id === exerciseId);\r\n    if (!exercise) {\r\n      throw new Error(\r\n        `Упражнение с ID ${exerciseId} не найдено в тренировке ${workoutId}`\r\n      );\r\n    }\r\n\r\n    return exercise;\r\n  }\r\n\r\n  clearExerciseSets(workoutId, exerciseId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) return;\r\n\r\n    const exercise = workout.exercises.find((ex) => ex.id === exerciseId);\r\n    if (!exercise) return;\r\n\r\n    // Очищаем подходы\r\n    if (exercise.sets) exercise.sets = [];\r\n    if (exercise.completedSets) exercise.completedSets = [];\r\n\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  clearExerciseCardioSessions(workoutId, exerciseId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) return;\r\n\r\n    const exercise = workout.exercises.find((ex) => ex.id === exerciseId);\r\n    if (!exercise) return;\r\n\r\n    // Очищаем сессии кардио\r\n    if (exercise.sessions) exercise.sessions = [];\r\n    if (exercise.completedSessions) exercise.completedSessions = [];\r\n\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  clearExerciseEnduranceSessions(workoutId, exerciseId) {\r\n    this.clearExerciseCardioSessions(workoutId, exerciseId);\r\n  }\r\n}\r\n","import { ExerciseType } from \"../Exercise/Constants/ExerciseType.js\";\r\nimport { ExerciseStrategyFactory } from \"../Exercise/Strategies/ExerciseStrategyFactory.js\";\r\n\r\nexport class StatisticsService {\r\n  constructor(userService, workoutService) {\r\n    this.userService = userService;\r\n    this.workoutService = workoutService;\r\n    this.strategyFactory = new ExerciseStrategyFactory();\r\n  }\r\n\r\n  getUserWeightProgress(userId, startDate = null, endDate = null) {\r\n    const user = this.userService.getUserById(userId);\r\n    if (!user) {\r\n      throw new Error(`User with ID ${userId} not found`);\r\n    }\r\n\r\n    const userWeightHistory = user.weightHistory;\r\n    const start = startDate ? new Date(startDate) : null;\r\n    const end = endDate ? new Date(endDate) : null;\r\n\r\n    const dateWeights = userWeightHistory.filter((weight) => {\r\n      const weightDate = weight.date;\r\n      return (!start || weightDate >= start) && (!end || weightDate <= end);\r\n    });\r\n\r\n    if (dateWeights.length === 0) {\r\n      return {\r\n        userWeightProgress: 0,\r\n        dateWeights: [],\r\n      };\r\n    }\r\n\r\n    const userWeightProgress =\r\n      dateWeights[dateWeights.length - 1].weight - dateWeights[0].weight;\r\n\r\n    return {\r\n      userWeightProgress,\r\n      dateWeights,\r\n    };\r\n  }\r\n\r\n  getWorkoutsByDate(userId, startDate = null, endDate = null) {\r\n    const workouts = this.workoutService.getWorkoutsForUser(userId);\r\n\r\n    const start = startDate ? new Date(startDate) : null;\r\n    const end = endDate ? new Date(endDate) : null;\r\n\r\n    return workouts.filter((workout) => {\r\n      const workoutDate = workout.date;\r\n      return (!start || workoutDate >= start) && (!end || workoutDate <= end);\r\n    });\r\n  }\r\n\r\n  getWorkoutProgress(userId, startDate = null, endDate = null) {\r\n    const workoutsByDate = this.getWorkoutsByDate(userId, startDate, endDate);\r\n\r\n    if (workoutsByDate.length === 0) {\r\n      return {\r\n        totalWeightProgress: 0,\r\n        totalDistanceProgress: 0,\r\n        totalDurationProgress: 0,\r\n        workoutsByDate: [],\r\n      };\r\n    }\r\n\r\n    const totalWeightProgress =\r\n      workoutsByDate[workoutsByDate.length - 1].getTotalWeight() -\r\n      workoutsByDate[0].getTotalWeight();\r\n\r\n    const totalDistanceProgress =\r\n      workoutsByDate[workoutsByDate.length - 1].getTotalDistance() -\r\n      workoutsByDate[0].getTotalDistance();\r\n\r\n    const totalDurationProgress =\r\n      workoutsByDate[workoutsByDate.length - 1].getTotalDuration() -\r\n      workoutsByDate[0].getTotalDuration();\r\n\r\n    const progressByDate = workoutsByDate.map((workout) => ({\r\n      date: workout.date,\r\n      totalWeight: workout.getTotalWeight(),\r\n      totalDistance: workout.getTotalDistance(),\r\n      totalDuration: workout.getTotalDuration(),\r\n    }));\r\n\r\n    return {\r\n      totalWeightProgress,\r\n      totalDistanceProgress,\r\n      totalDurationProgress,\r\n      workoutsByDate: progressByDate,\r\n    };\r\n  }\r\n\r\n  getExerciseProgress(userId, exerciseId, startDate = null, endDate = null) {\r\n    const workoutsByDate = this.getWorkoutsByDate(userId, startDate, endDate);\r\n    const exercises = [];\r\n\r\n    for (const workout of workoutsByDate) {\r\n      const exercise = workout.exercises.find(\r\n        (exercise) => exercise.id === exerciseId\r\n      );\r\n      if (exercise) {\r\n        exercises.push({\r\n          date: workout.date,\r\n          exercise: exercise,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (exercises.length === 0) {\r\n      return {\r\n        progress: [],\r\n        message: \"No exercise data found for the specified period\",\r\n      };\r\n    }\r\n\r\n    const firstExercise = exercises[0].exercise;\r\n\r\n    try {\r\n      const strategy = this.strategyFactory.getStrategy(firstExercise.type);\r\n\r\n      const progressData = exercises.map((item) => {\r\n        return {\r\n          date: item.date,\r\n          exerciseId: item.exercise.id,\r\n          ...strategy.getStatistics(item.exercise),\r\n        };\r\n      });\r\n\r\n      const progressMetrics = strategy.calculateProgress(\r\n        exercises[0].exercise,\r\n        exercises[exercises.length - 1].exercise\r\n      );\r\n\r\n      const exerciseType = firstExercise.type.toUpperCase();\r\n      let additionalMetrics = {};\r\n\r\n      if (exerciseType === \"ENDURANCE\" || exerciseType === \"ENDURANCE\") {\r\n        if (\r\n          !progressMetrics.intensityProgress &&\r\n          progressMetrics.totalIntensityProgress\r\n        ) {\r\n          additionalMetrics.intensityProgress =\r\n            progressMetrics.totalIntensityProgress;\r\n        }\r\n      } else if (exerciseType === \"CARDIO\" || exerciseType === \"CARDIO\") {\r\n        if (\r\n          !progressMetrics.distanceProgress &&\r\n          progressMetrics.totalDistanceProgress\r\n        ) {\r\n          additionalMetrics.distanceProgress =\r\n            progressMetrics.totalDistanceProgress;\r\n        }\r\n        if (\r\n          !progressMetrics.durationProgress &&\r\n          progressMetrics.totalDurationProgress\r\n        ) {\r\n          additionalMetrics.durationProgress =\r\n            progressMetrics.totalDurationProgress;\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...progressMetrics,\r\n        ...additionalMetrics,\r\n        progress: progressData,\r\n      };\r\n    } catch (error) {\r\n      console.error(`Error calculating progress: ${error.message}`);\r\n      return {\r\n        progress: [],\r\n        message: `Error calculating progress: ${error.message}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  getUserStatisticsSummary(userId, startDate = null, endDate = null) {\r\n    const weightProgress = this.getUserWeightProgress(\r\n      userId,\r\n      startDate,\r\n      endDate\r\n    );\r\n    const workoutProgress = this.getWorkoutProgress(userId, startDate, endDate);\r\n\r\n    const user = this.userService.getUserById(userId);\r\n    const currentWeight = user ? user.currentWeight : null;\r\n    const initialWeight =\r\n      user && user.weightHistory.length > 0\r\n        ? user.weightHistory[0].weight\r\n        : null;\r\n\r\n    return {\r\n      weightMetrics: {\r\n        initialWeight,\r\n        currentWeight,\r\n        change: weightProgress.userWeightProgress,\r\n        history: weightProgress.dateWeights,\r\n      },\r\n      workoutMetrics: {\r\n        totalWorkouts: workoutProgress.workoutsByDate.length,\r\n        totalWeightLifted: workoutProgress.workoutsByDate.reduce(\r\n          (sum, workout) => sum + workout.totalWeight,\r\n          0\r\n        ),\r\n        totalDistanceCovered: workoutProgress.workoutsByDate.reduce(\r\n          (sum, workout) => sum + workout.totalDistance,\r\n          0\r\n        ),\r\n        totalDurationSpent: workoutProgress.workoutsByDate.reduce(\r\n          (sum, workout) => sum + workout.totalDuration,\r\n          0\r\n        ),\r\n        progress: workoutProgress,\r\n      },\r\n    };\r\n  }\r\n}\r\n","export class StorageService {\r\n    constructor(storageKey) {\r\n      this.storageKey = storageKey;\r\n    }\r\n  \r\n    getData() {\r\n      if (typeof window === 'undefined') return null;\r\n      const data = localStorage.getItem(this.storageKey);\r\n      return data ? JSON.parse(data) : null;\r\n    }\r\n  \r\n    saveData(data) {\r\n      if (typeof window === 'undefined') return;\r\n      localStorage.setItem(this.storageKey, JSON.stringify(data));\r\n    }\r\n  \r\n    clearData() {\r\n      if (typeof window === 'undefined') return;\r\n      localStorage.removeItem(this.storageKey);\r\n    }\r\n  }","import { StorageService } from \"./StorageService.js\";\r\n\r\nexport class LocalStorageManager {\r\n  constructor() {\r\n    this.userStorage = new StorageService(\"workout-app-users\");\r\n    this.exerciseStorage = new StorageService(\"workout-app-exercises\");\r\n    this.workoutPlanStorage = new StorageService(\"workout-app-workout-plans\");\r\n    this.workoutStorage = new StorageService(\"workout-app-workouts\");\r\n\r\n    // Инициализация хранилища при первом использовании\r\n    this._initializeStorage();\r\n  }\r\n\r\n  _initializeStorage() {\r\n    // Проверка, запущено ли в браузере\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    if (!this.userStorage.getData()) {\r\n      this.userStorage.saveData([]);\r\n    }\r\n\r\n    if (!this.exerciseStorage.getData()) {\r\n      this.exerciseStorage.saveData([]);\r\n    }\r\n\r\n    if (!this.workoutPlanStorage.getData()) {\r\n      this.workoutPlanStorage.saveData([]);\r\n    }\r\n\r\n    if (!this.workoutStorage.getData()) {\r\n      this.workoutStorage.saveData([]);\r\n    }\r\n  }\r\n\r\n  syncLocalStorageWithLibrary(planner) {\r\n    if (!planner || !planner.storageManager) {\r\n      console.error(\"Планировщик или storageManager недоступны\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const users = JSON.parse(\r\n        localStorage.getItem(\"workout-app-users\") || \"[]\"\r\n      );\r\n      const exercises = JSON.parse(\r\n        localStorage.getItem(\"workout-app-exercises\") || \"[]\"\r\n      );\r\n      const workouts = JSON.parse(\r\n        localStorage.getItem(\"workout-app-workouts\") || \"[]\"\r\n      );\r\n      const workoutPlans = JSON.parse(\r\n        localStorage.getItem(\"workout-app-workout-plans\") || \"[]\"\r\n      );\r\n\r\n      console.log(\"Синхронизация данных из localStorage с библиотекой:\");\r\n      console.log(`- Пользователей: ${users.length}`);\r\n      console.log(`- Упражнений: ${exercises.length}`);\r\n      console.log(`- Тренировок: ${workouts.length}`);\r\n      console.log(`- Планов тренировок: ${workoutPlans.length}`);\r\n\r\n      planner.storageManager.saveUsers(users);\r\n      planner.storageManager.saveExercises(exercises);\r\n      planner.storageManager.saveWorkouts(workouts);\r\n      planner.storageManager.saveWorkoutPlans(workoutPlans);\r\n\r\n      planner.exerciseService._deserializeExercises();\r\n      planner.workoutService._deserializeWorkouts();\r\n      planner.workoutPlanService._deserializeWorkoutPlans();\r\n\r\n      const exercisesAfter = planner.exerciseService.getAllExercises();\r\n      const workoutsAfter = planner.workoutService.getAllWorkouts();\r\n\r\n      console.log(\"После синхронизации:\");\r\n      console.log(`- Упражнений в сервисе: ${exercisesAfter.length}`);\r\n      console.log(`- Тренировок в сервисе: ${workoutsAfter.length}`);\r\n\r\n      return {\r\n        success: true,\r\n        counts: {\r\n          users: users.length,\r\n          exercises: exercises.length,\r\n          workouts: workouts.length,\r\n          workoutPlans: workoutPlans.length,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Ошибка при синхронизации данных:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n      };\r\n    }\r\n  }\r\n\r\n  getUsers() {\r\n    return this.userStorage.getData() || [];\r\n  }\r\n\r\n  saveUsers(users) {\r\n    this.userStorage.saveData(users);\r\n  }\r\n\r\n  getExercises() {\r\n    return this.exerciseStorage.getData() || [];\r\n  }\r\n\r\n  saveExercises(exercises) {\r\n    this.exerciseStorage.saveData(exercises);\r\n  }\r\n\r\n  getWorkoutPlans() {\r\n    return this.workoutPlanStorage.getData() || [];\r\n  }\r\n\r\n  saveWorkoutPlans(plans) {\r\n    this.workoutPlanStorage.saveData(plans);\r\n  }\r\n\r\n  getWorkouts() {\r\n    return this.workoutStorage.getData() || [];\r\n  }\r\n\r\n  saveWorkouts(workouts) {\r\n    this.workoutStorage.saveData(workouts);\r\n  }\r\n\r\n  clearAllData() {\r\n    this.userStorage.clearData();\r\n    this.exerciseStorage.clearData();\r\n    this.workoutPlanStorage.clearData();\r\n    this.workoutStorage.clearData();\r\n    this._initializeStorage();\r\n  }\r\n}\r\n","import { UserService } from \"./services/UserService.js\";\r\nimport { ExerciseService } from \"./services/ExerciseService.js\";\r\nimport { WorkoutPlanService } from \"./services/WorkoutPlanService.js\";\r\nimport { WorkoutService } from \"./services/WorkoutService.js\";\r\nimport { StatisticsService } from \"./services/StatisticsService.js\";\r\nimport { LocalStorageManager } from \"./services/LocalStorageManager.js\";\r\nimport { ExerciseType } from \"./Exercise/Constants/ExerciseType.js\";\r\n\r\nexport class WorkoutPlanner {\r\n  constructor() {\r\n    // Инициализируем менеджер хранилища\r\n    this.storageManager = new LocalStorageManager();\r\n    \r\n    // Инициализируем сервисы с использованием LocalStorageManager\r\n    this.userService = new UserService(this.storageManager);\r\n    this.exerciseService = new ExerciseService(this.storageManager);\r\n    this.workoutPlanService = new WorkoutPlanService(this.exerciseService, this.storageManager);\r\n    this.workoutService = new WorkoutService(\r\n      this.exerciseService,\r\n      this.workoutPlanService,\r\n      this.storageManager\r\n    );\r\n    this.statisticsService = new StatisticsService(\r\n      this.userService,\r\n      this.workoutService\r\n    );\r\n  }\r\n\r\n  // =========== Управление Пользователями ===========\r\n\r\n  showUsers() {\r\n    console.log(this.userService.getAllUsers());\r\n  }\r\n\r\n  userReg(name, password, email, currentWeight, height) {\r\n    try {\r\n      const newUser = this.userService.registerUser(\r\n        name,\r\n        password,\r\n        email,\r\n        currentWeight,\r\n        height\r\n      );\r\n      console.log(`Пользователь ${newUser.name} зарегестрирован`);\r\n      return newUser;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  userLogin(email, password) {\r\n    try {\r\n      const user = this.userService.loginUser(email, password);\r\n      console.log(`Пользователь ${user.name} вошёл в систему`);\r\n      return user;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  updateWeight(newWeight) {\r\n    try {\r\n      this.userService.updateUserWeight(newWeight);\r\n      console.log(`Пользователь обновил вес на ${newWeight} кг`);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  updateProfile(name, password, email, height) {\r\n    try {\r\n      this.userService.updateUserProfile(name, password, email, height);\r\n      console.log(\"Пользователь обновил профиль\");\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // =========== Управление упражнениями ===========\r\n\r\n  showExercises() {\r\n    console.log(this.exerciseService.getAllExercises());\r\n  }\r\n\r\n  createStrengthExercise(name, image, description, mediaUrl, bodyPart, sets) {\r\n    const newExercise = this.exerciseService.createStrengthExercise(\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      bodyPart,\r\n      sets\r\n    );\r\n    console.log(`Упражнение ${newExercise.name} добавлено`);\r\n    return newExercise;\r\n  }\r\n\r\n  createCardioExercise(name, image, description, mediaUrl, cardioType) {\r\n    const newExercise = this.exerciseService.createCardioExercise(\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      cardioType\r\n    );\r\n    console.log(`Кардио упражнение ${newExercise.name} добавлено`);\r\n    return newExercise;\r\n  }\r\n\r\n  createEnduranceExercise(name, image, description, mediaUrl, targetMuscle) {\r\n    const newExercise = this.exerciseService.createEnduranceExercise(\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      targetMuscle\r\n    );\r\n    console.log(`Упражнение на выносливость ${newExercise.name} добавлено`);\r\n    return newExercise;\r\n  }\r\n\r\n  createGenericExercise(\r\n    type,\r\n    name,\r\n    image,\r\n    description,\r\n    mediaUrl,\r\n    specificParam\r\n  ) {\r\n    const newExercise = this.exerciseService.createGenericExercise(\r\n      type,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      specificParam\r\n    );\r\n    console.log(`${type} упражнение ${newExercise.name} добавлено`);\r\n    return newExercise;\r\n  }\r\n\r\n  removeExercise(exerciseId) {\r\n    this.exerciseService.removeExercise(exerciseId);\r\n  }\r\n\r\n  // =========== Управление планами тренировок ===========\r\n\r\n  showWorkoutPlans() {\r\n    console.log(this.workoutPlanService.getAllWorkoutPlans());\r\n  }\r\n\r\n  createWorkoutPlan(name, description) {\r\n    try {\r\n      const userId = this.userService.getCurrentUser().id;\r\n      const workoutPlan = this.workoutPlanService.createWorkoutPlan(\r\n        userId,\r\n        name,\r\n        description\r\n      );\r\n      console.log(\"Программа тренировок создана\");\r\n      return workoutPlan;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  deleteWorkoutPlan(workoutPlanId) {\r\n    try {\r\n      this.workoutPlanService.deleteWorkoutPlan(workoutPlanId);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  addExerciseToWorkoutPlan(workoutPlanId, exerciseId) {\r\n    try {\r\n      const exercise = this.exerciseService.getExerciseById(exerciseId);\r\n      const workoutPlan = this.workoutPlanService.addExerciseToWorkoutPlan(\r\n        workoutPlanId,\r\n        exerciseId\r\n      );\r\n      console.log(\r\n        `Упражнение ${exercise.name} добавлено в программу тренировок ${workoutPlan.name}`\r\n      );\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  removeExerciseFromWorkoutPlan(workoutPlanId, exerciseId) {\r\n    try {\r\n      return this.workoutPlanService.removeExerciseFromWorkoutPlan(\r\n        workoutPlanId,\r\n        exerciseId\r\n      );\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  addSetToExerciseInWorkoutPlan(workoutPlanId, exerciseId, reps, weight) {\r\n    try {\r\n      this.workoutPlanService.addSetToExerciseInWorkoutPlan(\r\n        workoutPlanId,\r\n        exerciseId,\r\n        reps,\r\n        weight\r\n      );\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  addSessionToExerciseInWorkoutPlan(\r\n    workoutPlanId,\r\n    exerciseId,\r\n    duration,\r\n    distance,\r\n    caloriesBurned = null\r\n  ) {\r\n    try {\r\n      const exercise =\r\n        this.workoutPlanService.addSessionToExerciseInWorkoutPlan(\r\n          workoutPlanId,\r\n          exerciseId,\r\n          duration,\r\n          distance,\r\n          caloriesBurned\r\n        );\r\n      console.log(`Кардио сессия добавлена в упражнение ${exercise.name}`);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  addEnduranceSessionToExerciseInWorkoutPlan(\r\n    workoutPlanId,\r\n    exerciseId,\r\n    duration,\r\n    difficulty = null\r\n  ) {\r\n    try {\r\n      const exercise =\r\n        this.workoutPlanService.addEnduranceSessionToExerciseInWorkoutPlan(\r\n          workoutPlanId,\r\n          exerciseId,\r\n          duration,\r\n          difficulty\r\n        );\r\n      console.log(\r\n        `Сессия выносливости добавлена в упражнение ${exercise.name}`\r\n      );\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getWorkoutPlanExercises(workoutPlanId) {\r\n    try {\r\n      const workoutPlan =\r\n        this.workoutPlanService.getWorkoutPlanById(workoutPlanId);\r\n      console.log(workoutPlan.exercises);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // =========== Управление тренировками ===========\r\n\r\n  showWorkouts() {\r\n    console.log(this.workoutService.getAllWorkouts());\r\n  }\r\n\r\n  createWorkout(date = null, workoutPlanId) {\r\n    try {\r\n      const userId = this.userService.getCurrentUser().id;\r\n      const workout = this.workoutService.createWorkout(\r\n        userId,\r\n        date,\r\n        workoutPlanId\r\n      );\r\n      console.log(\"Тренировка создана\");\r\n      return workout;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  addExerciseToWorkout(workoutId, exerciseId) {\r\n    try {\r\n      const workout = this.workoutService.addExerciseToWorkout(\r\n        workoutId,\r\n        exerciseId\r\n      );\r\n      const exercise = this.exerciseService.getExerciseById(exerciseId);\r\n      console.log(`Exercise ${exercise.name} added to workout`);\r\n      return workout;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  recordSetInWorkout(workoutId, exerciseId, reps, weight) {\r\n    try {\r\n      this.workoutService.recordSetInWorkout(\r\n        workoutId,\r\n        exerciseId,\r\n        reps,\r\n        weight\r\n      );\r\n      console.log(`Записан сет со значениями ${reps} повторений ${weight} кг`);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  updateSetInWorkout(workoutId, exerciseId, setIndex, reps, weight) {\r\n    try {\r\n      this.workoutService.updateSetInWorkout(\r\n        workoutId,\r\n        exerciseId,\r\n        setIndex,\r\n        reps,\r\n        weight\r\n      );\r\n      console.log(`Сет обновлён со значениями ${reps} подходов ${weight} кг`);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  recordCardioSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    duration,\r\n    distance,\r\n    caloriesBurned = null\r\n  ) {\r\n    try {\r\n      this.workoutService.recordCardioSessionInWorkout(\r\n        workoutId,\r\n        exerciseId,\r\n        duration,\r\n        distance,\r\n        caloriesBurned\r\n      );\r\n      console.log(`Записана кардио сессия: ${duration} минут, ${distance} км`);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  updateCardioSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    distance,\r\n    caloriesBurned\r\n  ) {\r\n    try {\r\n      this.workoutService.updateCardioSessionInWorkout(\r\n        workoutId,\r\n        exerciseId,\r\n        sessionIndex,\r\n        duration,\r\n        distance,\r\n        caloriesBurned\r\n      );\r\n      console.log(`Кардио сессия обновлена: ${duration} минут, ${distance} км`);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  recordEnduranceSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    duration,\r\n    difficulty = null\r\n  ) {\r\n    try {\r\n      this.workoutService.recordEnduranceSessionInWorkout(\r\n        workoutId,\r\n        exerciseId,\r\n        duration,\r\n        difficulty\r\n      );\r\n      console.log(\r\n        `Записана сессия выносливости: ${duration} секунд, сложность: ${\r\n          difficulty || \"не указана\"\r\n        }`\r\n      );\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  updateEnduranceSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    difficulty\r\n  ) {\r\n    try {\r\n      this.workoutService.updateEnduranceSessionInWorkout(\r\n        workoutId,\r\n        exerciseId,\r\n        sessionIndex,\r\n        duration,\r\n        difficulty\r\n      );\r\n      console.log(\r\n        `Сессия выносливости обновлена: ${duration} секунд, сложность: ${\r\n          difficulty || \"не указана\"\r\n        }`\r\n      );\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  showWorkout(workoutId) {\r\n    try {\r\n      const workout = this.workoutService.getWorkoutById(workoutId);\r\n      console.log(workout);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  hasChangesFromPlan(workoutId) {\r\n    try {\r\n      return this.workoutService.hasChangesFromPlan(workoutId);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  updatePlanSetsInWorkout(workoutId) {\r\n    try {\r\n      return this.workoutService.updatePlanSetsInWorkout(workoutId);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // =========== Управление показателями тренировки ===========\r\n\r\n  getTotalWeightForWorkout(workoutId) {\r\n    try {\r\n      const totalWeight =\r\n        this.workoutService.getTotalWeightForWorkout(workoutId);\r\n      console.log(\"Общий вес за тренировку: \" + totalWeight);\r\n      return totalWeight;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getTotalDistanceForWorkout(workoutId) {\r\n    try {\r\n      const totalDistance =\r\n        this.workoutService.getTotalDistanceForWorkout(workoutId);\r\n      console.log(\"Общая дистанция за тренировку: \" + totalDistance + \" км\");\r\n      return totalDistance;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getTotalDurationForWorkout(workoutId) {\r\n    try {\r\n      const totalDuration =\r\n        this.workoutService.getTotalDurationForWorkout(workoutId);\r\n      console.log(\r\n        \"Общая длительность кардио за тренировку: \" + totalDuration + \" минут\"\r\n      );\r\n      return totalDuration;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getTotalEnduranceDurationForWorkout(workoutId) {\r\n    try {\r\n      const totalDuration =\r\n        this.workoutService.getTotalEnduranceDurationForWorkout(workoutId);\r\n      console.log(\r\n        \"Общее время упражнений на выносливость за тренировку: \" +\r\n          totalDuration +\r\n          \" секунд\"\r\n      );\r\n      return totalDuration;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getMaxEnduranceDurationForWorkout(workoutId) {\r\n    try {\r\n      const maxDuration =\r\n        this.workoutService.getMaxEnduranceDurationForWorkout(workoutId);\r\n      console.log(\r\n        \"Максимальная продолжительность упражнения на выносливость: \" +\r\n          maxDuration +\r\n          \" секунд\"\r\n      );\r\n      return maxDuration;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getEnduranceTotalIntensityForWorkout(workoutId) {\r\n    try {\r\n      const totalIntensity =\r\n        this.workoutService.getEnduranceTotalIntensityForWorkout(workoutId);\r\n      console.log(\r\n        \"Общая интенсивность упражнений на выносливость: \" + totalIntensity\r\n      );\r\n      return totalIntensity;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // =========== Управление статистикой ===========\r\n\r\n  getUserWeightProgress(startDate = null, endDate = null) {\r\n    try {\r\n      const currentUser = this.userService.getCurrentUser();\r\n      const dateWeights = this.statisticsService.getUserWeightProgress(\r\n        currentUser.id,\r\n        startDate,\r\n        endDate\r\n      );\r\n      console.log(dateWeights);\r\n      return dateWeights;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getWorkoutProgress(startDate = null, endDate = null) {\r\n    try {\r\n      const currentUser = this.userService.getCurrentUser();\r\n      const workoutProgress = this.statisticsService.getWorkoutProgress(\r\n        currentUser.id,\r\n        startDate,\r\n        endDate\r\n      );\r\n      console.log(workoutProgress);\r\n      return workoutProgress;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getExerciseProgress(exerciseId, startDate = null, endDate = null) {\r\n    try {\r\n      const currentUser = this.userService.getCurrentUser();\r\n      const exerciseProgress = this.statisticsService.getExerciseProgress(\r\n        currentUser.id,\r\n        exerciseId,\r\n        startDate,\r\n        endDate\r\n      );\r\n      console.log(exerciseProgress);\r\n      return exerciseProgress;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getCardioProgress(exerciseId, startDate = null, endDate = null) {\r\n    try {\r\n      const exercise = this.exerciseService.getExerciseById(exerciseId);\r\n\r\n      if (!exercise || exercise.type !== ExerciseType.CARDIO) {\r\n        console.log(\"Кардио упражнение не найдено\");\r\n        return;\r\n      }\r\n\r\n      const currentUser = this.userService.getCurrentUser();\r\n      const cardioProgress = this.statisticsService.getExerciseProgress(\r\n        currentUser.id,\r\n        exerciseId,\r\n        startDate,\r\n        endDate\r\n      );\r\n\r\n      console.log(\"Прогресс кардио упражнения:\", cardioProgress);\r\n      return cardioProgress;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getEnduranceProgress(exerciseId, startDate = null, endDate = null) {\r\n    try {\r\n      const exercise = this.exerciseService.getExerciseById(exerciseId);\r\n\r\n      if (!exercise || exercise.type !== ExerciseType.ENDURANCE) {\r\n        console.log(\"Упражнение на выносливость не найдено\");\r\n        return;\r\n      }\r\n\r\n      const currentUser = this.userService.getCurrentUser();\r\n      const enduranceProgress = this.statisticsService.getExerciseProgress(\r\n        currentUser.id,\r\n        exerciseId,\r\n        startDate,\r\n        endDate\r\n      );\r\n\r\n      console.log(\"Прогресс упражнения на выносливость:\", enduranceProgress);\r\n      return enduranceProgress;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n","import { WorkoutPlanner } from \"./classes/WorkoutPlanner.js\";\r\nimport { User } from \"./classes/User/User.js\";\r\nimport { Exercise } from \"./classes/Exercise/Exercise.js\";\r\nimport { StrengthExercise } from \"./classes/Exercise/StrengthExercise.js\";\r\nimport { CardioExercise } from \"./classes/Exercise/CardioExercise.js\";\r\nimport { EnduranceExercise } from \"./classes/Exercise/EnduranceExercise.js\";\r\nimport { WorkoutPlan } from \"./classes/WorkoutPlan/WorkoutPlan.js\";\r\nimport { Workout } from \"./classes/Workout/Workout.js\";\r\nimport { ExerciseType } from \"./classes/Exercise/Constants/ExerciseType.js\";\r\nimport { ExerciseFactory } from \"./classes/Exercise/Factory/ExerciseFactory.js\";\r\nimport { LocalStorageManager } from \"./classes/services/LocalStorageManager.js\";\r\nimport { UserService } from \"./classes/services/UserService.js\";\r\nimport { ExerciseService } from \"./classes/services/ExerciseService.js\";\r\nimport { WorkoutPlanService } from \"./classes/services/WorkoutPlanService.js\";\r\nimport { WorkoutService } from \"./classes/services/WorkoutService.js\";\r\nimport { StatisticsService } from \"./classes/services/StatisticsService.js\";\r\n\r\n// Экспортируем функцию для создания экземпляра WorkoutPlanner\r\nexport const createWorkoutPlanner = () => {\r\n  return new WorkoutPlanner();\r\n};\r\n\r\n// Экспортируем основные классы и типы для использования в React-приложении\r\nexport {\r\n  User,\r\n  Exercise,\r\n  StrengthExercise,\r\n  CardioExercise, \r\n  EnduranceExercise,\r\n  WorkoutPlan,\r\n  Workout,\r\n  ExerciseType,\r\n  ExerciseFactory,\r\n  LocalStorageManager,\r\n  UserService,\r\n  ExerciseService,\r\n  WorkoutPlanService,\r\n  WorkoutService,\r\n  StatisticsService\r\n};\r\n"],"names":["User","constructor","id","name","password","email","currentWeight","height","this","weightHistory","date","Date","weight","workoutsHistory","workoutPlans","updateWeight","newWeight","push","addWorkoutPlan","workoutPlan","getWorkoutPlans","addWorkout","workout","getWorkoutHistory","updateProfile","UserService","storageManager","users","getUsers","currentUser","_deserializeUsers","map","userData","user","length","entry","_saveUsers","saveUsers","getUserById","find","Error","generateUserId","Math","max","registerUser","some","newUser","loginUser","updateUserWeight","validateCurrentUser","updateUserProfile","getCurrentUser","getAllUsers","Exercise","image","description","mediaUrl","type","notes","updateExercise","addNote","note","CardioSession","duration","distance","caloriesBurned","calculatePace","calculateSpeed","CardioExercise","cardioType","super","sessions","addSession","removeSession","sessionIndex","splice","getSessions","updateSession","index","getTotalDuration","reduce","acc","session","getTotalDistance","getTotalCalories","getAveragePace","getBestPace","min","filter","pace","getAverageSpeed","getBestSpeed","ExerciseType","STRENGTH","CARDIO","ENDURANCE","EnduranceSession","difficulty","calculateIntensity","EnduranceExercise","targetMuscle","getAverageDuration","getMaxDuration","getAverageDifficulty","getTotalIntensity","getAverageIntensity","Set","reps","calculateOneRepMax","round","StrengthExercise","bodyPart","sets","addSet","removeSet","setIndex","getSets","updateSet","getAverageOneRepMax","val","getBestOneRepMax","set","getMaxWeight","getTotalWeight","ExerciseFactory","createExercise","specificParam","createStrengthExercise","createCardioExercise","createEnduranceExercise","ExerciseService","exercises","getExercises","_deserializeExercises","exerciseData","exercise","forEach","_saveExercises","saveExercises","generateExerciseId","newExercise","createGenericExercise","removeExercise","exerciseId","clearExerciseSets","workoutId","getWorkoutById","ex","completedSets","_saveWorkouts","clearExerciseCardioSessions","completedSessions","clearExerciseEnduranceSessions","getExerciseById","getAllExercises","ExerciseStrategy","copyExercise","addTrackingData","data","updateTrackingData","getStatistics","calculateProgress","firstExercise","lastExercise","hasChanges","planExercise","updatePlanData","source","target","StrengthExerciseStrategy","Array","isArray","totalWeight","bestOneRepMax","maxWeight","bestOneReMaxProgress","maxWeightProgress","totalWeightProgress","i","CardioExerciseStrategy","totalDistance","sum","Number","totalDuration","totalCalories","bestPace","averagePace","bestSpeed","averageSpeed","paces","s","speeds","firstStats","lastStats","distanceProgress","durationProgress","caloriesProgress","totalDistanceProgress","totalDurationProgress","bestPaceProgress","bestSpeedProgress","totalCaloriesProgress","EnduranceExerciseStrategy","averageDifficulty","maxDuration","totalIntensity","sessionsCount","intensityProgress","maxDurationProgress","averageDifficultyProgress","totalIntensityProgress","ExerciseStrategyFactory","strategies","getStrategy","exerciseType","strategy","registerStrategy","WorkoutPlan","ownerId","strategyFactory","updateWorkoutPlan","addExercise","error","message","addSetToExercise","addSessionToExercise","addEnduranceSessionToExercise","updateSetInExercise","updateSessionInExercise","updateEnduranceSessionInExercise","removeTrackingData","removeSetFromExercise","removeSessionFromExercise","removeEnduranceSessionFromExercise","removeNote","noteIndex","WorkoutPlanService","exerciseService","_deserializeWorkoutPlans","planData","originalExercise","_saveWorkoutPlans","saveWorkoutPlans","generateWorkoutPlanId","plan","createWorkoutPlan","deleteWorkoutPlan","workoutPlanId","addExerciseToWorkoutPlan","getWorkoutPlanById","removeExerciseFromWorkoutPlan","addTrackingDataToExercise","addSetToExerciseInWorkoutPlan","addSessionToExerciseInWorkoutPlan","addEnduranceSessionToExerciseInWorkoutPlan","updateTrackingDataInExercise","removeTrackingDataFromExercise","getWorkoutPlansForUser","userId","getAllWorkoutPlans","addCardioSessionToExerciseInWorkoutPlan","planId","exerciseIndex","findIndex","_savePlans","Workout","console","recordTrackingData","recordSet","recordCardioSession","recordEnduranceSession","updateCardioSession","updateEnduranceSession","getTotalStatisticByType","statName","total","getTotalEnduranceDuration","getMaxEnduranceDuration","durations","getTotalEnduranceIntensity","hasChangesFromPlan","updatePlanSets","WorkoutService","workoutPlanService","workouts","getWorkouts","_deserializeWorkouts","workoutData","undefined","saveWorkouts","generateWorkoutId","createWorkout","addExerciseToWorkout","recordSetInWorkout","updateSetInWorkout","recordCardioSessionInWorkout","updateCardioSessionInWorkout","recordEnduranceSessionInWorkout","updateEnduranceSessionInWorkout","getWorkoutsForUser","getAllWorkouts","getTotalWeightForWorkout","getTotalDistanceForWorkout","getTotalDurationForWorkout","getTotalEnduranceDurationForWorkout","getMaxEnduranceDurationForWorkout","getEnduranceTotalIntensityForWorkout","updatePlanSetsInWorkout","result","getExerciseInWorkout","StatisticsService","userService","workoutService","getUserWeightProgress","startDate","endDate","userWeightHistory","start","end","dateWeights","weightDate","userWeightProgress","getWorkoutsByDate","workoutDate","getWorkoutProgress","workoutsByDate","getExerciseProgress","progress","progressData","item","progressMetrics","toUpperCase","additionalMetrics","getUserStatisticsSummary","weightProgress","workoutProgress","weightMetrics","initialWeight","change","history","workoutMetrics","totalWorkouts","totalWeightLifted","totalDistanceCovered","totalDurationSpent","StorageService","storageKey","getData","window","localStorage","getItem","JSON","parse","saveData","setItem","stringify","clearData","removeItem","LocalStorageManager","userStorage","exerciseStorage","workoutPlanStorage","workoutStorage","_initializeStorage","syncLocalStorageWithLibrary","planner","log","exercisesAfter","workoutsAfter","success","counts","plans","clearAllData","WorkoutPlanner","statisticsService","showUsers","userReg","userLogin","showExercises","showWorkoutPlans","getWorkoutPlanExercises","showWorkouts","showWorkout","exerciseProgress","getCardioProgress","cardioProgress","getEnduranceProgress","enduranceProgress"],"mappings":"aAAO,MAAMA,EACX,WAAAC,CAAYC,EAAIC,EAAMC,EAAUC,EAAOC,EAAeC,GACpDC,KAAKN,GAAKA,EACVM,KAAKL,KAAOA,EACZK,KAAKJ,SAAWA,EAChBI,KAAKH,MAAQA,EACbG,KAAKF,cAAgBA,EACrBE,KAAKC,cAAgB,CAAC,CAAEC,KAAM,IAAIC,KAAQC,OAAQN,IAClDE,KAAKD,OAASA,EACdC,KAAKK,gBAAkB,GACvBL,KAAKM,aAAe,EACrB,CAED,YAAAC,CAAaC,GACXR,KAAKF,cAAgBU,EACrBR,KAAKC,cAAcQ,KAAK,CAAEP,KAAM,IAAIC,KAAQC,OAAQI,GACrD,CAED,cAAAE,CAAeC,GACbX,KAAKM,aAAaG,KAAKE,EACxB,CAED,eAAAC,GACE,OAAOZ,KAAKM,YACb,CAED,UAAAO,CAAWC,GACTd,KAAKK,gBAAgBI,KAAKK,EAC3B,CAED,iBAAAC,GACE,OAAOf,KAAKK,eACb,CAED,aAAAW,CAAcrB,EAAMC,EAAUC,EAAOE,GACnCC,KAAKL,KAAOA,GAAQK,KAAKL,KACzBK,KAAKJ,SAAWA,GAAYI,KAAKJ,SACjCI,KAAKH,MAAQA,GAASG,KAAKH,MAC3BG,KAAKD,OAASA,GAAUC,KAAKD,MAC9B,ECrCI,MAAMkB,EACX,WAAAxB,CAAYyB,GACVlB,KAAKkB,eAAiBA,EACtBlB,KAAKmB,MAAQnB,KAAKkB,eAAeE,YAAc,GAC/CpB,KAAKqB,YAAc,KAEnBrB,KAAKsB,mBACN,CAED,iBAAAA,GACEtB,KAAKmB,MAAQnB,KAAKmB,MAAMI,KAAKC,IAC3B,MAAMC,EAAO,IAAIjC,EACfgC,EAAS9B,GACT8B,EAAS7B,KACT6B,EAAS5B,SACT4B,EAAS3B,MACT2B,EAAS1B,cACT0B,EAASzB,QAUX,OAPIyB,EAASvB,eAAiBuB,EAASvB,cAAcyB,SACnDD,EAAKxB,cAAgBuB,EAASvB,cAAcsB,KAAKI,IAAW,CAC1DzB,KAAM,IAAIC,KAAKwB,EAAMzB,MACrBE,OAAQuB,EAAMvB,YAIXqB,CAAI,GAEd,CAED,UAAAG,GACE5B,KAAKkB,eAAeW,UAAU7B,KAAKmB,MACpC,CAED,WAAAW,CAAYpC,GACV,MAAM+B,EAAOzB,KAAKmB,MAAMY,MAAMN,GAASA,EAAK/B,KAAOA,IACnD,IAAK+B,EACH,MAAM,IAAIO,MAAM,qBAAqBtC,eAEvC,OAAO+B,CACR,CAED,cAAAQ,GACE,OAAKjC,KAAKmB,MAAMO,OACTQ,KAAKC,OAAOnC,KAAKmB,MAAMI,KAAKE,GAASA,EAAK/B,MAAO,EADzB,CAEhC,CAED,YAAA0C,CAAazC,EAAMC,EAAUC,EAAOC,EAAeC,GACjD,GAAIC,KAAKmB,MAAMkB,MAAMZ,GAASA,EAAK5B,QAAUA,IAC3C,MAAM,IAAImC,MAAM,6CAElB,MAAMtC,EAAKM,KAAKiC,iBACVK,EAAU,IAAI9C,EAAKE,EAAIC,EAAMC,EAAUC,EAAOC,EAAeC,GAGnE,OAFAC,KAAKmB,MAAMV,KAAK6B,GAChBtC,KAAK4B,aACEU,CACR,CAED,SAAAC,CAAU1C,EAAOD,GACf,MAAM6B,EAAOzB,KAAKmB,MAAMY,MAAMN,GAASA,EAAK5B,QAAUA,IACtD,IAAK4B,EACH,MAAM,IAAIO,MAAM,4CAGlB,GAAIP,EAAK7B,WAAaA,EACpB,MAAM,IAAIoC,MAAM,mBAIlB,OADAhC,KAAKqB,YAAcI,EACZA,CACR,CAED,gBAAAe,CAAiBhC,GACfR,KAAKyC,sBACLzC,KAAKqB,YAAYd,aAAaC,GAC9BR,KAAK4B,YACN,CAED,iBAAAc,CAAkB/C,EAAMC,EAAUC,EAAOE,GACvCC,KAAKyC,sBACLzC,KAAKqB,YAAYL,cAAcrB,EAAMC,EAAUC,EAAOE,GACtDC,KAAK4B,YACN,CAED,cAAAe,GACE,OAAO3C,KAAKqB,WACb,CAED,mBAAAoB,GACE,IAAKzC,KAAKqB,YACR,MAAM,IAAIW,MAAM,8BAEnB,CAED,WAAAY,GACE,OAAO5C,KAAKmB,KACb,ECnGI,MAAM0B,EACX,WAAApD,CAAYC,EAAIC,EAAMmD,EAAOC,EAAaC,EAAUC,GAClDjD,KAAKN,GAAKA,EACVM,KAAKL,KAAOA,EACZK,KAAK8C,MAAQA,EACb9C,KAAK+C,YAAcA,GAAe,GAClC/C,KAAKgD,SAAWA,EAChBhD,KAAKiD,KAAOA,EACZjD,KAAKkD,MAAQ,EACd,CAED,cAAAC,CAAexD,EAAMoD,EAAaC,GAChChD,KAAKL,KAAOA,GAAQK,KAAKL,KACzBK,KAAK+C,YAAcA,GAAe/C,KAAK+C,YACvC/C,KAAKgD,SAAWA,GAAYhD,KAAKgD,QAClC,CAED,OAAAI,CAAQC,GACNrD,KAAKkD,MAAMzC,KAAK4C,EACjB,ECnBI,MAAMC,EACX,WAAA7D,CAAY8D,EAAUC,EAAUC,EAAiB,MAC/CzD,KAAKuD,SAAWA,EAChBvD,KAAKwD,SAAWA,EAChBxD,KAAKyD,eAAiBA,CACvB,CAED,aAAAC,GACE,OAAK1D,KAAKwD,UAA8B,IAAlBxD,KAAKwD,SACpBxD,KAAKuD,SAAWvD,KAAKwD,SADsB,CAEnD,CAED,cAAAG,GACE,OAAK3D,KAAKuD,UAA8B,IAAlBvD,KAAKuD,SACnBvD,KAAKwD,SAAWxD,KAAKuD,SAAY,GADS,CAEnD,ECZI,MAAMK,UAAuBf,EAClC,WAAApD,CAAYC,EAAIC,EAAMmD,EAAOC,EAAaC,EAAUC,EAAMY,GACxDC,MAAMpE,EAAIC,EAAMmD,EAAOC,EAAaC,EAAUC,GAC9CjD,KAAK6D,WAAaA,EAClB7D,KAAK+D,SAAW,EACjB,CAED,UAAAC,CAAWT,EAAUC,EAAUC,EAAiB,MAC9CzD,KAAK+D,SAAStD,KAAK,IAAI6C,EAAcC,EAAUC,EAAUC,GAC1D,CAED,aAAAQ,CAAcC,GACZlE,KAAK+D,SAASI,OAAOD,EAAc,EACpC,CAED,WAAAE,GACE,OAAOpE,KAAK+D,QACb,CAED,aAAAM,CAAcC,EAAOf,EAAUC,EAAUC,GACvCzD,KAAK+D,SAASO,GAAOf,SAAWA,GAAYvD,KAAK+D,SAASO,GAAOf,SACjEvD,KAAK+D,SAASO,GAAOd,SAAWA,GAAYxD,KAAK+D,SAASO,GAAOd,SACjExD,KAAK+D,SAASO,GAAOb,eACnBA,GAAkBzD,KAAK+D,SAASO,GAAOb,cAC1C,CAED,gBAAAc,GACE,OAAOvE,KAAK+D,SAASS,QACnB,CAACC,EAAKC,IAAYD,GAAOC,EAAQnB,UAAY,IAC7C,EAEH,CAED,gBAAAoB,GACE,OAAO3E,KAAK+D,SAASS,QACnB,CAACC,EAAKC,IAAYD,GAAOC,EAAQlB,UAAY,IAC7C,EAEH,CAED,gBAAAoB,GACE,OAAO5E,KAAK+D,SAASS,QACnB,CAACC,EAAKC,IAAYD,GAAOC,EAAQjB,gBAAkB,IACnD,EAEH,CAED,cAAAoB,GACE,OAA6B,IAAzB7E,KAAK+D,SAASrC,OAAqB,EAErC1B,KAAK+D,SAASS,QAAO,CAACC,EAAKC,IAAYD,EAAMC,EAAQhB,iBAAiB,GACtE1D,KAAK+D,SAASrC,MAEjB,CAED,WAAAoD,GACE,OAA6B,IAAzB9E,KAAK+D,SAASrC,OAAqB,EAChCQ,KAAK6C,OACP/E,KAAK+D,SACLxC,KAAKmD,GAAYA,EAAQhB,kBACzBsB,QAAQC,GAASA,EAAO,IAE9B,CAED,eAAAC,GACE,OAA6B,IAAzBlF,KAAK+D,SAASrC,OAAqB,EAErC1B,KAAK+D,SAASS,QACZ,CAACC,EAAKC,IAAYD,EAAMC,EAAQf,kBAChC,GACE3D,KAAK+D,SAASrC,MAErB,CAED,YAAAyD,GACE,OAA6B,IAAzBnF,KAAK+D,SAASrC,OAAqB,EAChCQ,KAAKC,OACPnC,KAAK+D,SAASxC,KAAKmD,GAAYA,EAAQf,mBAE7C,EClFS,MAACyB,EAAe,CAC1BC,SAAU,WACVC,OAAQ,SACRC,UAAW,aCHN,MAAMC,EACX,WAAA/F,CAAY8D,EAAUkC,EAAa,MACjCzF,KAAKuD,SAAWA,EAChBvD,KAAKyF,WAAaA,CACnB,CAED,kBAAAC,GACE,OAAK1F,KAAKyF,YAAezF,KAAKuD,SACtBvD,KAAKyF,WAAazF,KAAKuD,SAAY,GADI,CAEhD,ECNI,MAAMoC,UAA0B9C,EACrC,WAAApD,CAAYC,EAAIC,EAAMmD,EAAOC,EAAaC,EAAUC,EAAM2C,GACxD9B,MAAMpE,EAAIC,EAAMmD,EAAOC,EAAaC,EAAUC,GAC9CjD,KAAK4F,aAAeA,EACpB5F,KAAK+D,SAAW,EACjB,CAED,UAAAC,CAAWT,EAAUkC,EAAa,MAChCzF,KAAK+D,SAAStD,KAAK,IAAI+E,EAAiBjC,EAAUkC,GACnD,CAED,aAAAxB,CAAcC,GACZlE,KAAK+D,SAASI,OAAOD,EAAc,EACpC,CAED,WAAAE,GACE,OAAOpE,KAAK+D,QACb,CAED,aAAAM,CAAcC,EAAOf,EAAUkC,GAC7BzF,KAAK+D,SAASO,GAAOf,SAAWA,GAAYvD,KAAK+D,SAASO,GAAOf,SACjEvD,KAAK+D,SAASO,GAAOmB,WACnBA,GAAczF,KAAK+D,SAASO,GAAOmB,UACtC,CAED,gBAAAlB,GACE,OAAOvE,KAAK+D,SAASS,QACnB,CAACC,EAAKC,IAAYD,GAAOC,EAAQnB,UAAY,IAC7C,EAEH,CAED,kBAAAsC,GACE,OAA6B,IAAzB7F,KAAK+D,SAASrC,OAAqB,EAChC1B,KAAKuE,mBAAqBvE,KAAK+D,SAASrC,MAChD,CAED,cAAAoE,GACE,OAA6B,IAAzB9F,KAAK+D,SAASrC,OAAqB,EAChCQ,KAAKC,OAAOnC,KAAK+D,SAASxC,KAAKmD,GAAYA,EAAQnB,WAC3D,CAED,oBAAAwC,GACE,OAA6B,IAAzB/F,KAAK+D,SAASrC,OAAqB,EAErC1B,KAAK+D,SAASS,QACZ,CAACC,EAAKC,IAAYD,GAAOC,EAAQe,YAAc,IAC/C,GACEzF,KAAK+D,SAASrC,MAErB,CAED,iBAAAsE,GACE,OAAOhG,KAAK+D,SAASS,QACnB,CAACC,EAAKC,IAAYD,EAAMC,EAAQgB,sBAChC,EAEH,CAED,mBAAAO,GACE,OAA6B,IAAzBjG,KAAK+D,SAASrC,OAAqB,EAChC1B,KAAKgG,oBAAsBhG,KAAK+D,SAASrC,MACjD,ECjEI,MAAMwE,EACX,WAAAzG,CAAY0G,EAAM/F,EAAS,MACzBJ,KAAKmG,KAAOA,EACZnG,KAAKI,OAASA,CACf,CAED,kBAAAgG,GACE,OAAKpG,KAAKI,QAAWJ,KAAKmG,KACnBjE,KAAKmE,MAAMrG,KAAKI,QAAU,EAAIJ,KAAKmG,KAAO,KADV,CAExC,ECNI,MAAMG,UAAyBzD,EACpC,WAAApD,CAAYC,EAAIC,EAAMmD,EAAOC,EAAaC,EAAUC,EAAMsD,EAAUC,GAClE1C,MAAMpE,EAAIC,EAAMmD,EAAOC,EAAaC,EAAUC,GAC9CjD,KAAKuG,SAAWA,EAChBvG,KAAKwG,KAAOA,GAAQ,EACrB,CAED,MAAAC,CAAON,EAAM/F,GACXJ,KAAKwG,KAAK/F,KAAK,IAAIyF,EAAIC,EAAM/F,GAC9B,CAED,SAAAsG,CAAUC,GACR3G,KAAKwG,KAAKrC,OAAOwC,EAAU,EAC5B,CAED,OAAAC,GACE,OAAO5G,KAAKwG,IACb,CAED,SAAAK,CAAUvC,EAAO6B,EAAM/F,GACrBJ,KAAKwG,KAAKlC,GAAO6B,KAAOA,GAAQnG,KAAKwG,KAAKlC,GAAO6B,KACjDnG,KAAKwG,KAAKlC,GAAOlE,OAASA,GAAUJ,KAAKwG,KAAKlC,GAAOlE,MACtD,CAED,mBAAA0G,GACE,OACE9G,KAAKwG,KAAKhC,QAAO,CAACC,EAAKsC,IAAQtC,EAAMsC,EAAIX,sBAAsB,GAC/DpG,KAAKwG,KAAK9E,MAEb,CAED,gBAAAsF,GACE,OAAO9E,KAAKC,OAAOnC,KAAKwG,KAAKjF,KAAK0F,GAAQA,EAAIb,uBAC/C,CAED,YAAAc,GACE,OAAOhF,KAAKC,OAAOnC,KAAKwG,KAAKjF,KAAK0F,GAAQA,EAAI7G,SAC/C,CAED,cAAA+G,GACE,OAAOnH,KAAKwG,KAAKhC,QACf,CAACC,EAAKwC,IAAQxC,GAAOwC,EAAI7G,QAAU,GAAK6G,EAAId,MAC5C,EAEH,EC1CI,MAAMiB,EACX,qBAAOC,CACLpE,EACAvD,EACAC,EACAmD,EACAC,EACAC,EACAsE,GAEA,OAAQrE,GACN,KAAKmC,EAAaC,SAChB,OAAOrF,KAAKuH,uBACV7H,EACAC,EACAmD,EACAC,EACAC,EACAsE,GAEJ,KAAKlC,EAAaE,OAChB,OAAOtF,KAAKwH,qBACV9H,EACAC,EACAmD,EACAC,EACAC,EACAsE,GAEJ,KAAKlC,EAAaG,UAChB,OAAOvF,KAAKyH,wBACV/H,EACAC,EACAmD,EACAC,EACAC,EACAsE,GAEJ,QACE,MAAM,IAAItF,MAAM,oCAAoCiB,KAEzD,CAED,6BAAOsE,CACL7H,EACAC,EACAmD,EACAC,EACAC,EACAuD,EACAC,EAAO,IAEP,OAAO,IAAIF,EACT5G,EACAC,EACAmD,EACAC,EACAC,EACAoC,EAAaC,SACbkB,EACAC,EAEH,CAED,2BAAOgB,CACL9H,EACAC,EACAmD,EACAC,EACAC,EACAa,GAEA,OAAO,IAAID,EACTlE,EACAC,EACAmD,EACAC,EACAC,EACAoC,EAAaE,OACbzB,EAEH,CAED,8BAAO4D,CACL/H,EACAC,EACAmD,EACAC,EACAC,EACA4C,GAEA,OAAO,IAAID,EACTjG,EACAC,EACAmD,EACAC,EACAC,EACAoC,EAAaG,UACbK,EAEH,EChGI,MAAM8B,EACX,WAAAjI,CAAYyB,GACVlB,KAAKkB,eAAiBA,EACtBlB,KAAK2H,UAAY3H,KAAKkB,eAAe0G,gBAAkB,GAEvD5H,KAAK6H,uBACN,CAED,qBAAAA,GACE7H,KAAK2H,UAAY3H,KAAK2H,UAAUpG,KAAKuG,IACnC,IAAIC,EA+DJ,OA7DID,EAAa7E,OAASmC,EAAaC,UACrC0C,EAAW,IAAIzB,EACbwB,EAAapI,GACboI,EAAanI,KACbmI,EAAahF,MACbgF,EAAa/E,YACb+E,EAAa9E,SACb8E,EAAa7E,KACb6E,EAAavB,SACb,IAGEuB,EAAatB,MAAQsB,EAAatB,KAAK9E,QACzCoG,EAAatB,KAAKwB,SAASf,IACzBc,EAAStB,OAAOQ,EAAId,KAAMc,EAAI7G,OAAO,KAGhC0H,EAAa7E,OAASmC,EAAaE,QAC5CyC,EAAW,IAAInE,EACbkE,EAAapI,GACboI,EAAanI,KACbmI,EAAahF,MACbgF,EAAa/E,YACb+E,EAAa9E,SACb8E,EAAa7E,KACb6E,EAAajE,YAGXiE,EAAa/D,UAAY+D,EAAa/D,SAASrC,QACjDoG,EAAa/D,SAASiE,SAAStD,IAC7BqD,EAAS/D,WACPU,EAAQnB,SACRmB,EAAQlB,SACRkB,EAAQjB,eACT,KAGIqE,EAAa7E,OAASmC,EAAaG,YAC5CwC,EAAW,IAAIpC,EACbmC,EAAapI,GACboI,EAAanI,KACbmI,EAAahF,MACbgF,EAAa/E,YACb+E,EAAa9E,SACb8E,EAAa7E,KACb6E,EAAalC,cAGXkC,EAAa/D,UAAY+D,EAAa/D,SAASrC,QACjDoG,EAAa/D,SAASiE,SAAStD,IAC7BqD,EAAS/D,WAAWU,EAAQnB,SAAUmB,EAAQe,WAAW,KAK3DqC,EAAa5E,OAAS4E,EAAa5E,MAAMxB,QAC3CoG,EAAa5E,MAAM8E,SAAS3E,IAC1B0E,EAAS3E,QAAQC,EAAK,IAInB0E,CAAQ,GAElB,CAED,cAAAE,GACEjI,KAAKkB,eAAegH,cAAclI,KAAK2H,UACxC,CAED,kBAAAQ,GACE,OAAKnI,KAAK2H,UAAUjG,OACbQ,KAAKC,OAAOnC,KAAK2H,UAAUpG,KAAKwG,GAAaA,EAASrI,MAAO,EADjC,CAEpC,CAED,sBAAA6H,CAAuB5H,EAAMmD,EAAOC,EAAaC,EAAUuD,GACzD,MAAM7G,EAAKM,KAAKmI,qBACVC,EAAchB,EAAgBG,uBAClC7H,EACAC,EACAmD,EACAC,EACAC,EACAuD,GAKF,OAFAvG,KAAK2H,UAAUlH,KAAK2H,GACpBpI,KAAKiI,iBACEG,CACR,CAED,oBAAAZ,CAAqB7H,EAAMmD,EAAOC,EAAaC,EAAUa,GACvD,MAAMnE,EAAKM,KAAKmI,qBACVC,EAAchB,EAAgBI,qBAClC9H,EACAC,EACAmD,EACAC,EACAC,EACAa,GAKF,OAFA7D,KAAK2H,UAAUlH,KAAK2H,GACpBpI,KAAKiI,iBACEG,CACR,CAED,uBAAAX,CAAwB9H,EAAMmD,EAAOC,EAAaC,EAAU4C,GAC1D,MAAMlG,EAAKM,KAAKmI,qBACVC,EAAchB,EAAgBK,wBAClC/H,EACAC,EACAmD,EACAC,EACAC,EACA4C,GAKF,OAFA5F,KAAK2H,UAAUlH,KAAK2H,GACpBpI,KAAKiI,iBACEG,CACR,CAED,qBAAAC,CACEpF,EACAtD,EACAmD,EACAC,EACAC,EACAsE,GAEA,MAAM5H,EAAKM,KAAKmI,qBACVC,EAAchB,EAAgBC,eAClCpE,EACAvD,EACAC,EACAmD,EACAC,EACAC,EACAsE,GAKF,OAFAtH,KAAK2H,UAAUlH,KAAK2H,GACpBpI,KAAKiI,iBACEG,CACR,CAED,cAAAE,CAAeC,GACbvI,KAAK2H,UAAY3H,KAAK2H,UAAU3C,QAC7B+C,GAAaA,EAASrI,KAAO6I,IAEhCvI,KAAKiI,gBACN,CAED,iBAAAO,CAAkBC,EAAWF,GAC3B,MAAMzH,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EAAS,OAEd,MAAMiH,EAAWjH,EAAQ6G,UAAU5F,MAAM4G,GAAOA,EAAGjJ,KAAO6I,IACrDR,IAEDA,EAASvB,OAAMuB,EAASvB,KAAO,IAC/BuB,EAASa,gBAAeb,EAASa,cAAgB,IAErD5I,KAAK6I,gBACN,CAED,2BAAAC,CAA4BL,EAAWF,GACrC,MAAMzH,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EAAS,OAEd,MAAMiH,EAAWjH,EAAQ6G,UAAU5F,MAAM4G,GAAOA,EAAGjJ,KAAO6I,IACrDR,IAEDA,EAAShE,WAAUgE,EAAShE,SAAW,IACvCgE,EAASgB,oBAAmBhB,EAASgB,kBAAoB,IAE7D/I,KAAK6I,gBACN,CAED,8BAAAG,CAA+BP,EAAWF,GACxCvI,KAAK8I,4BAA4BL,EAAWF,EAC7C,CAED,eAAAU,CAAgBV,GACd,OAAOvI,KAAK2H,UAAU5F,MAAMgG,GAAaA,EAASrI,KAAO6I,GAC1D,CAED,eAAAW,GACE,OAAOlJ,KAAK2H,SACb,EClNI,MAAMwB,EACX,YAAAC,CAAarB,GACX,MAAM,IAAI/F,MAAM,kDACjB,CAED,eAAAqH,CAAgBtB,EAAUuB,GACxB,MAAM,IAAItH,MAAM,kDACjB,CAED,kBAAAuH,CAAmBxB,EAAUzD,EAAOgF,GAClC,MAAM,IAAItH,MAAM,kDACjB,CAED,aAAAwH,CAAczB,GACZ,MAAM,IAAI/F,MAAM,kDACjB,CAED,iBAAAyH,CAAkBC,EAAeC,GAC/B,MAAM,IAAI3H,MAAM,kDACjB,CAED,UAAA4H,CAAW7B,EAAU8B,GACnB,MAAM,IAAI7H,MAAM,kDACjB,CAED,cAAA8H,CAAeC,EAAQC,GACrB,MAAM,IAAIhI,MAAM,kDACjB,ECxBI,MAAMiI,UAAiCd,EAC5C,YAAAC,CAAarB,GACX,MAAMK,EAAc,IAAI9B,EACtByB,EAASrI,GACTqI,EAASpI,KACToI,EAASjF,MACTiF,EAAShF,YACTgF,EAAS/E,SACT+E,EAAS9E,KACT8E,EAASxB,SACT,IAGIC,EAAOuB,EAASnB,QAClBmB,EAASnB,UACTsD,MAAMC,QAAQpC,EAASvB,MACvBuB,EAASvB,KACT,GAeJ,OAbIA,GAAQA,EAAK9E,QACf8E,EAAKwB,SAASf,IAEVA,GACe,iBAARA,GACP,SAAUA,GACV,WAAYA,GAEZmB,EAAY3B,OAAOQ,EAAId,KAAMc,EAAI7G,OAClC,IAIEgI,CACR,CAED,eAAAiB,CAAgBtB,EAAUuB,GACxB,IAAKA,EAAKnD,OAASmD,EAAKlJ,OACtB,MAAM,IAAI4B,MAAM,kDAElB+F,EAAStB,OAAO6C,EAAKnD,KAAMmD,EAAKlJ,OACjC,CAED,kBAAAmJ,CAAmBxB,EAAUzD,EAAOgF,GAClC,IAAKvB,EAASvB,KAAKlC,GACjB,MAAM,IAAItC,MAAM,gBAAgBsC,eAElCyD,EAASlB,UAAUvC,EAAOgF,EAAKnD,KAAMmD,EAAKlJ,OAC3C,CAED,aAAAoJ,CAAczB,GACZ,MAAO,CACLqC,YAAarC,EAASZ,iBACtBkD,cAAetC,EAASf,mBACxBsD,UAAWvC,EAASb,eAEvB,CAED,iBAAAuC,CAAkBC,EAAeC,GAC/B,MAAO,CACLY,qBACEZ,EAAa3C,mBAAqB0C,EAAc1C,mBAClDwD,kBACEb,EAAazC,eAAiBwC,EAAcxC,eAC9CuD,oBACEd,EAAaxC,iBAAmBuC,EAAcvC,iBAEnD,CAED,UAAAyC,CAAW7B,EAAU8B,GACnB,GAAI9B,EAASvB,KAAK9E,SAAWmI,EAAarD,KAAK9E,OAAQ,OAAO,EAE9D,IAAK,IAAIgJ,EAAI,EAAGA,EAAI3C,EAASvB,KAAK9E,OAAQgJ,IACxC,GACE3C,EAASvB,KAAKkE,GAAGvE,OAAS0D,EAAarD,KAAKkE,GAAGvE,MAC/C4B,EAASvB,KAAKkE,GAAGtK,SAAWyJ,EAAarD,KAAKkE,GAAGtK,OAEjD,OAAO,EAIX,OAAO,CACR,CAED,cAAA0J,CAAeC,EAAQC,GACrBA,EAAOxD,KAAO,GAEd,IAAK,MAAMS,KAAO8C,EAAOvD,KACvBwD,EAAOvD,OAAOQ,EAAId,KAAMc,EAAI7G,OAE/B,ECzFI,MAAMuK,UAA+BxB,EAC1C,YAAAC,CAAarB,GACX,MAAMK,EAAc,IAAIxE,EACtBmE,EAASrI,GACTqI,EAASpI,KACToI,EAASjF,MACTiF,EAAShF,YACTgF,EAAS/E,SACT+E,EAAS9E,KACT8E,EAASlE,YAGLE,EAAWgE,EAAS3D,YACtB2D,EAAS3D,cACT8F,MAAMC,QAAQpC,EAAShE,UACvBgE,EAAShE,SACT,GAcJ,OAZIA,GAAYA,EAASrC,QACvBqC,EAASiE,SAAStD,IACZA,GAA8B,iBAAZA,GACpB0D,EAAYpE,WACVU,EAAQnB,SACRmB,EAAQlB,SACRkB,EAAQjB,eAEX,IAIE2E,CACR,CAED,eAAAiB,CAAgBtB,EAAUuB,GACxB,IAAKA,EAAK/F,WAAa+F,EAAK9F,SAC1B,MAAM,IAAIxB,MAAM,sDAElB+F,EAAS/D,WAAWsF,EAAK/F,SAAU+F,EAAK9F,SAAU8F,EAAK7F,eACxD,CAED,kBAAA8F,CAAmBxB,EAAUzD,EAAOgF,GAClC,IAAKvB,EAAShE,SAASO,GACrB,MAAM,IAAItC,MAAM,oBAAoBsC,eAEtCyD,EAAS1D,cACPC,EACAgF,EAAK/F,SACL+F,EAAK9F,SACL8F,EAAK7F,eAER,CAED,aAAA+F,CAAczB,GACZ,MAAMhE,EAAWgE,EAAShE,UAAY,GAChC6G,EAAgB7G,EAASS,QAC7B,CAACqG,EAAKnG,IAAYmG,GAAOC,OAAOpG,EAAQlB,WAAa,IACrD,GAEIuH,EAAgBhH,EAASS,QAC7B,CAACqG,EAAKnG,IAAYmG,GAAOC,OAAOpG,EAAQnB,WAAa,IACrD,GAEIyH,EAAgBjH,EAASS,QAC7B,CAACqG,EAAKnG,IAAYmG,GAAOC,OAAOpG,EAAQjB,iBAAmB,IAC3D,GAGF,IAAIwH,EAAW,EACXC,EAAc,EACdC,EAAY,EACZC,EAAe,EAEnB,GAAIrH,EAASrC,OAAS,GAAKkJ,EAAgB,EAAG,CAC5C,MAAMS,EAAQtH,EACXiB,QAAQsG,IAAOR,OAAOQ,EAAE9H,WAAa,GAAK,IAC1CjC,KAAK+J,IAAOR,OAAOQ,EAAE/H,WAAa,IAAMuH,OAAOQ,EAAE9H,WAAa,KAEjEyH,EAAW/I,KAAK6C,OAAOsG,GACvBH,EAAcH,EAAgBH,EAE9B,MAAMW,EAASxH,EACZiB,QAAQsG,IAAOR,OAAOQ,EAAE/H,WAAa,GAAK,IAC1ChC,KACE+J,IAAQR,OAAOQ,EAAE9H,WAAa,IAAMsH,OAAOQ,EAAE/H,WAAa,GAAM,KAGrE4H,EAAYjJ,KAAKC,OAAOoJ,GACxBH,EAAeR,GAAiBG,EAAgB,GACjD,CAED,MAAO,CACLH,gBACApH,SAAUoH,EACVG,gBACAxH,SAAUwH,EACVE,WACAC,cACAC,YACAC,eACAJ,gBACAvH,eAAgBuH,EAEnB,CAED,iBAAAvB,CAAkBC,EAAeC,GAC/B,MAAM6B,EAAaxL,KAAKwJ,cAAcE,GAChC+B,EAAYzL,KAAKwJ,cAAcG,GAErC,MAAO,CACL+B,iBAAkBD,EAAUb,cAAgBY,EAAWZ,cACvDe,iBAAkBF,EAAUV,cAAgBS,EAAWT,cACvDa,iBAAkBH,EAAUT,cAAgBQ,EAAWR,cAEvDa,sBAAuBJ,EAAUb,cAAgBY,EAAWZ,cAC5DkB,sBAAuBL,EAAUV,cAAgBS,EAAWT,cAC5DgB,iBAAkBN,EAAUR,SAAWO,EAAWP,SAClDe,kBAAmBP,EAAUN,UAAYK,EAAWL,UACpDc,sBAAuBR,EAAUT,cAAgBQ,EAAWR,cAE/D,CAED,UAAApB,CAAW7B,EAAU8B,GACnB,GAAI9B,EAAShE,SAASrC,SAAWmI,EAAa9F,SAASrC,OAAQ,OAAO,EAEtE,IAAK,IAAIgJ,EAAI,EAAGA,EAAI3C,EAAShE,SAASrC,OAAQgJ,IAC5C,GACE3C,EAAShE,SAAS2G,GAAGnH,WAAasG,EAAa9F,SAAS2G,GAAGnH,UAC3DwE,EAAShE,SAAS2G,GAAGlH,WAAaqG,EAAa9F,SAAS2G,GAAGlH,UAC3DuE,EAAShE,SAAS2G,GAAGjH,iBACnBoG,EAAa9F,SAAS2G,GAAGjH,eAE3B,OAAO,EAIX,OAAO,CACR,CAED,cAAAqG,CAAeC,EAAQC,GACrBA,EAAOjG,SAAW,GAElB,IAAK,MAAMW,KAAWqF,EAAOhG,SAC3BiG,EAAOhG,WACLU,EAAQnB,SACRmB,EAAQlB,SACRkB,EAAQjB,eAGb,ECpJI,MAAMyI,UAAkC/C,EAC7C,YAAAC,CAAarB,GACX,MAAMK,EAAc,IAAIzC,EACtBoC,EAASrI,GACTqI,EAASpI,KACToI,EAASjF,MACTiF,EAAShF,YACTgF,EAAS/E,SACT+E,EAAS9E,KACT8E,EAASnC,cAGL7B,EAAWgE,EAAS3D,YACtB2D,EAAS3D,cACT8F,MAAMC,QAAQpC,EAAShE,UACvBgE,EAAShE,SACT,GAUJ,OARIA,GAAYA,EAASrC,QACvBqC,EAASiE,SAAStD,IACZA,GAA8B,iBAAZA,GACpB0D,EAAYpE,WAAWU,EAAQnB,SAAUmB,EAAQe,WAClD,IAIE2C,CACR,CAED,eAAAiB,CAAgBtB,EAAUuB,GACxB,IAAKA,EAAK/F,SACR,MAAM,IAAIvB,MAAM,4CAElB+F,EAAS/D,WAAWsF,EAAK/F,SAAU+F,EAAK7D,WACzC,CAED,kBAAA8D,CAAmBxB,EAAUzD,EAAOgF,GAClC,IAAKvB,EAAShE,SAASO,GACrB,MAAM,IAAItC,MAAM,oBAAoBsC,eAEtCyD,EAAS1D,cAAcC,EAAOgF,EAAK/F,SAAU+F,EAAK7D,WACnD,CAED,aAAA+D,CAAczB,GACZ,MAAMhE,EAAWgE,EAAShE,UAAY,GAChCgH,EAAgBhH,EAASS,QAC7B,CAACqG,EAAKnG,IAAYmG,GAAOC,OAAOpG,EAAQnB,WAAa,IACrD,GAEI4I,EACJpI,EAASrC,OAAS,EACdqC,EAASS,QACP,CAACqG,EAAKnG,IAAYmG,GAAOC,OAAOpG,EAAQe,aAAe,IACvD,GACE1B,EAASrC,OACb,EAON,MAAO,CACLqJ,gBACAxH,SAAUwH,EACVqB,YAPArI,EAASrC,OAAS,EACdQ,KAAKC,OAAO4B,EAASxC,KAAKmD,GAAYoG,OAAOpG,EAAQnB,WAAa,KAClE,EAMJ4I,oBACAE,eAAgBF,EAChB1G,WAAY0G,EACZG,cAAevI,EAASrC,OAE3B,CAED,iBAAA+H,CAAkBC,EAAeC,GAC/B,MAAM6B,EAAaxL,KAAKwJ,cAAcE,GAChC+B,EAAYzL,KAAKwJ,cAAcG,GAErC,MAAO,CACLgC,iBAAkBF,EAAUV,cAAgBS,EAAWT,cACvDwB,kBAAmBd,EAAUY,eAAiBb,EAAWa,eACzDP,sBAAuBL,EAAUV,cAAgBS,EAAWT,cAC5DyB,oBAAqBf,EAAUW,YAAcZ,EAAWY,YACxDK,0BACEhB,EAAUU,kBAAoBX,EAAWW,kBAC3CO,uBACEjB,EAAUY,eAAiBb,EAAWa,eAE3C,CAED,UAAAzC,CAAW7B,EAAU8B,GACnB,GAAI9B,EAAShE,SAASrC,SAAWmI,EAAa9F,SAASrC,OAAQ,OAAO,EAEtE,IAAK,IAAIgJ,EAAI,EAAGA,EAAI3C,EAAShE,SAASrC,OAAQgJ,IAC5C,GACE3C,EAAShE,SAAS2G,GAAGnH,WAAasG,EAAa9F,SAAS2G,GAAGnH,UAC3DwE,EAAShE,SAAS2G,GAAGjF,aAAeoE,EAAa9F,SAAS2G,GAAGjF,WAE7D,OAAO,EAIX,OAAO,CACR,CAED,cAAAqE,CAAeC,EAAQC,GACrBA,EAAOjG,SAAW,GAElB,IAAK,MAAMW,KAAWqF,EAAOhG,SAC3BiG,EAAOhG,WAAWU,EAAQnB,SAAUmB,EAAQe,WAE/C,EC5GI,MAAMkH,EACX,WAAAlN,GACEO,KAAK4M,WAAa,CAChB,CAACxH,EAAaC,UAAW,IAAI4E,EAC7B,CAAC7E,EAAaE,QAAS,IAAIqF,EAC3B,CAACvF,EAAaG,WAAY,IAAI2G,EAEjC,CAED,WAAAW,CAAYC,GACV,MAAMC,EAAW/M,KAAK4M,WAAWE,GACjC,IAAKC,EACH,MAAM,IAAI/K,MAAM,wCAAwC8K,KAE1D,OAAOC,CACR,CAED,gBAAAC,CAAiBF,EAAcC,GAC7B/M,KAAK4M,WAAWE,GAAgBC,CACjC,EClBI,MAAME,EACX,WAAAxN,CAAYC,EAAIwN,EAASvN,EAAMoD,EAAa4E,GAC1C3H,KAAKN,GAAKA,EACVM,KAAKkN,QAAUA,EACflN,KAAKL,KAAOA,EACZK,KAAK+C,YAAcA,GAAe,GAClC/C,KAAK2H,UAAY,GACjB3H,KAAKkD,MAAQ,GAEblD,KAAKmN,gBAAkB,IAAIR,CAC5B,CAED,iBAAAS,CAAkBzN,EAAMoD,GACtB/C,KAAKL,KAAOA,GAAQK,KAAKL,KACzBK,KAAK+C,YAAcA,GAAe/C,KAAK+C,WACxC,CAED,WAAAsK,CAAYtF,GACV,IACE,MACMK,EADWpI,KAAKmN,gBAAgBN,YAAY9E,EAAS9E,MAC9BmG,aAAarB,GAE1C,OADA/H,KAAK2H,UAAUlH,KAAK2H,GACbA,CACR,CAAC,MAAOkF,GACP,MAAM,IAAItL,MAAM,2BAA2BsL,EAAMC,UAClD,CACF,CAED,eAAAtE,CAAgBV,GACd,OAAOvI,KAAK2H,UAAU5F,MAAM4G,GAAOA,EAAGjJ,KAAO6I,GAC9C,CAED,eAAAc,CAAgBd,EAAYe,GAC1B,MAAMvB,EAAW/H,KAAKiJ,gBAAgBV,GACtC,IAAKR,EACH,MAAM,IAAI/F,MAAM,oBAAoBuG,eAKtC,OAFiBvI,KAAKmN,gBAAgBN,YAAY9E,EAAS9E,MAClDoG,gBAAgBtB,EAAUuB,GAC5BvB,CACR,CAED,gBAAAyF,CAAiBjF,EAAYpC,EAAM/F,GACjC,OAAOJ,KAAKqJ,gBAAgBd,EAAY,CAAEpC,OAAM/F,UACjD,CAED,oBAAAqN,CAAqBlF,EAAYhF,EAAUC,EAAUC,EAAiB,MACpE,OAAOzD,KAAKqJ,gBAAgBd,EAAY,CACtChF,WACAC,WACAC,kBAEH,CAED,6BAAAiK,CAA8BnF,EAAYhF,EAAUkC,EAAa,MAC/D,OAAOzF,KAAKqJ,gBAAgBd,EAAY,CAAEhF,WAAUkC,cACrD,CAED,kBAAA8D,CAAmBhB,EAAYjE,EAAOgF,GACpC,MAAMvB,EAAW/H,KAAKiJ,gBAAgBV,GACtC,IAAKR,EACH,MAAM,IAAI/F,MAAM,oBAAoBuG,eAGrBvI,KAAKmN,gBAAgBN,YAAY9E,EAAS9E,MAClDsG,mBAAmBxB,EAAUzD,EAAOgF,EAC9C,CAED,mBAAAqE,CAAoBpF,EAAY5B,EAAUR,EAAM/F,GAC9C,OAAOJ,KAAKuJ,mBAAmBhB,EAAY5B,EAAU,CAAER,OAAM/F,UAC9D,CAED,uBAAAwN,CACErF,EACArE,EACAX,EACAC,EACAC,GAEA,OAAOzD,KAAKuJ,mBAAmBhB,EAAYrE,EAAc,CACvDX,WACAC,WACAC,kBAEH,CAED,gCAAAoK,CACEtF,EACArE,EACAX,EACAkC,GAEA,OAAOzF,KAAKuJ,mBAAmBhB,EAAYrE,EAAc,CACvDX,WACAkC,cAEH,CAED,cAAA6C,CAAeC,GACbvI,KAAK2H,UAAY3H,KAAK2H,UAAU3C,QAC7B+C,GAAaA,EAASrI,KAAO6I,GAEjC,CAED,kBAAAuF,CAAmBvF,EAAYjE,GAC7B,MAAMyD,EAAW/H,KAAKiJ,gBAAgBV,GACtC,IAAKR,EACH,MAAM,IAAI/F,MAAM,oBAAoBuG,eAGrBvI,KAAKmN,gBAAgBN,YAAY9E,EAAS9E,MAErC,aAAlB8E,EAAS9E,MAAuB8E,EAASvB,KAC3CuB,EAASvB,KAAKrC,OAAOG,EAAO,GAET,WAAlByD,EAAS9E,MAAuC,cAAlB8E,EAAS9E,OACxC8E,EAAShE,UAETgE,EAAShE,SAASI,OAAOG,EAAO,EAEnC,CAGD,qBAAAyJ,CAAsBxF,EAAY5B,GAChC,OAAO3G,KAAK8N,mBAAmBvF,EAAY5B,EAC5C,CAED,yBAAAqH,CAA0BzF,EAAYrE,GACpC,OAAOlE,KAAK8N,mBAAmBvF,EAAYrE,EAC5C,CAED,kCAAA+J,CAAmC1F,EAAYrE,GAC7C,OAAOlE,KAAK8N,mBAAmBvF,EAAYrE,EAC5C,CAED,OAAAd,CAAQC,GACNrD,KAAKkD,MAAMzC,KAAK4C,EACjB,CAED,UAAA6K,CAAWC,GACTnO,KAAKkD,MAAMiB,OAAOgK,EAAW,EAC9B,EChJI,MAAMC,EACX,WAAA3O,CAAY4O,EAAiBnN,GAC3BlB,KAAKqO,gBAAkBA,EACvBrO,KAAKkB,eAAiBA,EACtBlB,KAAKM,aAAeN,KAAKkB,eAAeN,mBAAqB,GAC7DZ,KAAKmN,gBAAkB,IAAIR,EAE3B3M,KAAKsO,0BACN,CAED,wBAAAA,GACEtO,KAAKM,aAAeN,KAAKM,aAAaiB,KAAKgN,IACzC,MAAM5N,EAAc,IAAIsM,EACtBsB,EAAS7O,GACT6O,EAASrB,QACTqB,EAAS5O,KACT4O,EAASxL,aAwDX,OArDIwL,EAASrL,OAASqL,EAASrL,MAAMxB,QACnC6M,EAASrL,MAAM8E,SAAS3E,IACtB1C,EAAYyC,QAAQC,EAAK,IAIzBkL,EAAS5G,WAAa4G,EAAS5G,UAAUjG,QAC3C6M,EAAS5G,UAAUK,SAASF,IAC1B,MAAM0G,EAAmBxO,KAAKqO,gBAAgBpF,gBAC5CnB,EAAapI,IAEX8O,IACmB7N,EAAY0M,YAAYmB,GAG3C1G,EAAa7E,OAASmC,EAAaC,UACnCyC,EAAatB,KAEbsB,EAAatB,KAAKwB,SAASf,IACzBtG,EAAY6M,iBACV1F,EAAapI,GACbuH,EAAId,KACJc,EAAI7G,OACL,IAGH0H,EAAa7E,OAASmC,EAAaE,QACnCwC,EAAa/D,SAEb+D,EAAa/D,SAASiE,SAAStD,IAC7B/D,EAAY8M,qBACV3F,EAAapI,GACbgF,EAAQnB,SACRmB,EAAQlB,SACRkB,EAAQjB,eACT,IAGHqE,EAAa7E,OAASmC,EAAaG,WACnCuC,EAAa/D,UAEb+D,EAAa/D,SAASiE,SAAStD,IAC7B/D,EAAY+M,8BACV5F,EAAapI,GACbgF,EAAQnB,SACRmB,EAAQe,WACT,IAGN,IAIE9E,CAAW,GAErB,CAED,iBAAA8N,GACEzO,KAAKkB,eAAewN,iBAAiB1O,KAAKM,aAC3C,CAED,qBAAAqO,GACE,OAAK3O,KAAKM,aAAaoB,OAChBQ,KAAKC,OAAOnC,KAAKM,aAAaiB,KAAKqN,GAASA,EAAKlP,MAAO,EADzB,CAEvC,CAED,iBAAAmP,CAAkB3B,EAASvN,EAAMoD,GAC/B,MAAMrD,EAAKM,KAAK2O,wBACVhO,EAAc,IAAIsM,EAAYvN,EAAIwN,EAASvN,EAAMoD,GAIvD,OAFA/C,KAAKM,aAAaG,KAAKE,GACvBX,KAAKyO,oBACE9N,CACR,CAED,iBAAAmO,CAAkBC,GAChB/O,KAAKM,aAAeN,KAAKM,aAAa0E,QACnCrE,GAAgBA,EAAYjB,KAAOqP,IAEtC/O,KAAKyO,mBACN,CAED,wBAAAO,CAAyBD,EAAexG,GACtC,MAAM5H,EAAcX,KAAKiP,mBAAmBF,GACtChH,EAAW/H,KAAKqO,gBAAgBpF,gBAAgBV,GAEtD,IAAK5H,EACH,MAAM,IAAIqB,MAAM,wBAAwB+M,eAG1C,IAAKhH,EACH,MAAM,IAAI/F,MAAM,mBAAmBuG,gBAKrC,OAFA5H,EAAY0M,YAAYtF,GACxB/H,KAAKyO,oBACE9N,CACR,CAED,6BAAAuO,CAA8BH,EAAexG,GAC3C,MAAM5H,EAAcX,KAAKiP,mBAAmBF,GAE5C,IAAKpO,EACH,MAAM,IAAIqB,MAAM,wBAAwB+M,eAK1C,OAFApO,EAAY2H,eAAeC,GAC3BvI,KAAKyO,oBACE9N,CACR,CAED,yBAAAwO,CAA0BJ,EAAexG,EAAYe,GACnD,MAAM3I,EAAcX,KAAKiP,mBAAmBF,GAE5C,IAAKpO,EACH,MAAM,IAAIqB,MAAM,wBAAwB+M,eAG1C,MAAMhH,EAAWpH,EAAYgH,UAAU5F,MACpCgG,GAAaA,EAASrI,KAAO6I,IAGhC,IAAKR,EACH,MAAM,IAAI/F,MAAM,mBAAmBuG,wBAGrC,IAIE,OAHiBvI,KAAKmN,gBAAgBN,YAAY9E,EAAS9E,MAClDoG,gBAAgBtB,EAAUuB,GACnCtJ,KAAKyO,oBACE1G,CACR,CAAC,MAAOuF,GACP,MAAM,IAAItL,MAAM,6BAA6BsL,EAAMC,UACpD,CACF,CAED,6BAAA6B,CAA8BL,EAAexG,EAAYpC,EAAM/F,GAC7D,OAAOJ,KAAKmP,0BAA0BJ,EAAexG,EAAY,CAC/DpC,OACA/F,UAEH,CAED,iCAAAiP,CACEN,EACAxG,EACAhF,EACAC,EACAC,EAAiB,MAEjB,OAAOzD,KAAKmP,0BAA0BJ,EAAexG,EAAY,CAC/DhF,WACAC,WACAC,kBAEH,CAED,0CAAA6L,CACEP,EACAxG,EACAhF,EACAkC,EAAa,MAEb,OAAOzF,KAAKmP,0BAA0BJ,EAAexG,EAAY,CAC/DhF,WACAkC,cAEH,CAED,4BAAA8J,CAA6BR,EAAexG,EAAYjE,EAAOgF,GAC7D,MAAM3I,EAAcX,KAAKiP,mBAAmBF,GAE5C,IAAKpO,EACH,MAAM,IAAIqB,MAAM,wBAAwB+M,eAG1C,MAAMhH,EAAWpH,EAAYgH,UAAU5F,MACpCgG,GAAaA,EAASrI,KAAO6I,IAGhC,IAAKR,EACH,MAAM,IAAI/F,MAAM,mBAAmBuG,wBAGrC,IAIE,OAHiBvI,KAAKmN,gBAAgBN,YAAY9E,EAAS9E,MAClDsG,mBAAmBxB,EAAUzD,EAAOgF,GAC7CtJ,KAAKyO,oBACE1G,CACR,CAAC,MAAOuF,GACP,MAAM,IAAItL,MAAM,6BAA6BsL,EAAMC,UACpD,CACF,CAED,mBAAAI,CAAoBoB,EAAexG,EAAY5B,EAAUR,EAAM/F,GAC7D,OAAOJ,KAAKuP,6BACVR,EACAxG,EACA5B,EACA,CAAER,OAAM/F,UAEX,CAED,uBAAAwN,CACEmB,EACAxG,EACArE,EACAX,EACAC,EACAC,GAEA,OAAOzD,KAAKuP,6BACVR,EACAxG,EACArE,EACA,CAAEX,WAAUC,WAAUC,kBAEzB,CAED,gCAAAoK,CACEkB,EACAxG,EACArE,EACAX,EACAkC,GAEA,OAAOzF,KAAKuP,6BACVR,EACAxG,EACArE,EACA,CAAEX,WAAUkC,cAEf,CAED,8BAAA+J,CAA+BT,EAAexG,EAAYjE,GACxD,MAAM3D,EAAcX,KAAKiP,mBAAmBF,GAE5C,IAAKpO,EACH,MAAM,IAAIqB,MAAM,wBAAwB+M,eAK1C,OAFApO,EAAYmN,mBAAmBvF,EAAYjE,GAC3CtE,KAAKyO,oBACE9N,CACR,CAED,qBAAAoN,CAAsBgB,EAAexG,EAAY5B,GAC/C,OAAO3G,KAAKwP,+BACVT,EACAxG,EACA5B,EAEH,CAED,yBAAAqH,CAA0Be,EAAexG,EAAYrE,GACnD,OAAOlE,KAAKwP,+BACVT,EACAxG,EACArE,EAEH,CAED,kBAAA+K,CAAmBF,GACjB,OAAO/O,KAAKM,aAAayB,MACtBpB,GAAgBA,EAAYjB,KAAOqP,GAEvC,CAED,sBAAAU,CAAuBC,GACrB,OAAO1P,KAAKM,aAAa0E,QAAQ4J,GAASA,EAAK1B,UAAYwC,GAC5D,CAED,kBAAAC,GACE,OAAO3P,KAAKM,YACb,CAED,uCAAAsP,CACEC,EACAtH,EACAhF,EACAC,EACAC,GAEA,MAAMmL,EAAO5O,KAAKiP,mBAAmBY,GACrC,IAAKjB,EAAM,MAAM,IAAI5M,MAAM,QAAQ6N,eAEnC,MAAMC,EAAgBlB,EAAKjH,UAAUoI,WAClCpH,GAAOA,EAAGjJ,KAAO6I,IAEpB,IAAuB,IAAnBuH,EACF,MAAM,IAAI9N,MAAM,cAAcuG,wBAAiCsH,KAajE,OAXKjB,EAAKjH,UAAUmI,GAAe/L,WACjC6K,EAAKjH,UAAUmI,GAAe/L,SAAW,IAG3C6K,EAAKjH,UAAUmI,GAAe/L,SAAStD,KAAK,CAC1C8C,WACAC,WACAC,mBAGFzD,KAAKgQ,aACEpB,CACR,CAED,0CAAAU,CACEO,EACAtH,EACAhF,EACAkC,GAEA,MAAMmJ,EAAO5O,KAAKiP,mBAAmBY,GACrC,IAAKjB,EAAM,MAAM,IAAI5M,MAAM,QAAQ6N,eAEnC,MAAMC,EAAgBlB,EAAKjH,UAAUoI,WAClCpH,GAAOA,EAAGjJ,KAAO6I,IAEpB,IAAuB,IAAnBuH,EACF,MAAM,IAAI9N,MAAM,cAAcuG,wBAAiCsH,KAYjE,OAVKjB,EAAKjH,UAAUmI,GAAe/L,WACjC6K,EAAKjH,UAAUmI,GAAe/L,SAAW,IAG3C6K,EAAKjH,UAAUmI,GAAe/L,SAAStD,KAAK,CAC1C8C,WACAkC,eAGFzF,KAAKgQ,aACEpB,CACR,EChWI,MAAMqB,EACX,WAAAxQ,CAAYC,EAAIwN,EAAShN,EAAM0O,EAAO,MACpC5O,KAAKN,GAAKA,EACVM,KAAKkN,QAAUA,EACflN,KAAKE,KAAOA,GAAQ,IAAIC,KACxBH,KAAK4O,KAAOA,EACZ5O,KAAK2H,UAAY,GAEjB3H,KAAKmN,gBAAkB,IAAIR,EAEvBiC,GAAQA,EAAKjH,YACf3H,KAAK2H,UAAYiH,EAAKjH,UACnBpG,KAAKoH,IACJ,IAEE,OADiB3I,KAAKmN,gBAAgBN,YAAYlE,EAAG1F,MACrCmG,aAAaT,EAC9B,CAAC,MAAO2E,GAEP,OADA4C,QAAQ5C,MAAM,2BAA2BA,EAAMC,WACxC,IACR,KAEFvI,QAAQ2D,GAAc,OAAPA,IAErB,CAED,WAAA0E,CAAYtF,GACV,IACE,MACMK,EADWpI,KAAKmN,gBAAgBN,YAAY9E,EAAS9E,MAC9BmG,aAAarB,GAE1C,OADA/H,KAAK2H,UAAUlH,KAAK2H,GACbA,CACR,CAAC,MAAOkF,GACP,MAAM,IAAItL,MAAM,2BAA2BsL,EAAMC,UAClD,CACF,CAED,eAAAtE,CAAgBV,GACd,OAAOvI,KAAK2H,UAAU5F,MAAM4G,GAAOA,EAAGjJ,KAAO6I,GAC9C,CAED,kBAAA4H,CAAmB5H,EAAYe,GAC7B,MAAMvB,EAAW/H,KAAKiJ,gBAAgBV,GACtC,IAAKR,EACH,MAAM,IAAI/F,MAAM,oBAAoBuG,eAGrBvI,KAAKmN,gBAAgBN,YAAY9E,EAAS9E,MAClDoG,gBAAgBtB,EAAUuB,EACpC,CAED,SAAA8G,CAAU7H,EAAYpC,EAAM/F,GAC1B,OAAOJ,KAAKmQ,mBAAmB5H,EAAY,CAAEpC,OAAM/F,UACpD,CAED,mBAAAiQ,CAAoB9H,EAAYhF,EAAUC,EAAUC,EAAiB,MACnE,OAAOzD,KAAKmQ,mBAAmB5H,EAAY,CACzChF,WACAC,WACAC,kBAEH,CAED,sBAAA6M,CAAuB/H,EAAYhF,EAAUkC,EAAa,MACxD,OAAOzF,KAAKmQ,mBAAmB5H,EAAY,CAAEhF,WAAUkC,cACxD,CAED,kBAAA8D,CAAmBhB,EAAYjE,EAAOgF,GACpC,MAAMvB,EAAW/H,KAAKiJ,gBAAgBV,GACtC,IAAKR,EACH,MAAM,IAAI/F,MAAM,oBAAoBuG,eAGrBvI,KAAKmN,gBAAgBN,YAAY9E,EAAS9E,MAClDsG,mBAAmBxB,EAAUzD,EAAOgF,EAC9C,CAED,SAAAzC,CAAU0B,EAAY5B,EAAUR,EAAM/F,GACpC,OAAOJ,KAAKuJ,mBAAmBhB,EAAY5B,EAAU,CAAER,OAAM/F,UAC9D,CAED,mBAAAmQ,CACEhI,EACArE,EACAX,EACAC,EACAC,GAEA,OAAOzD,KAAKuJ,mBAAmBhB,EAAYrE,EAAc,CACvDX,WACAC,WACAC,kBAEH,CAED,sBAAA+M,CAAuBjI,EAAYrE,EAAcX,EAAUkC,GACzD,OAAOzF,KAAKuJ,mBAAmBhB,EAAYrE,EAAc,CACvDX,WACAkC,cAEH,CAED,uBAAAgL,CAAwB3D,EAAc4D,GACpC,OAAO1Q,KAAK2H,UACT3C,QAAQ2D,GAAOA,EAAG1F,OAAS6J,IAC3BtI,QAAO,CAACmM,EAAO5I,IAGP4I,GAFU3Q,KAAKmN,gBAAgBN,YAAY9E,EAAS9E,MACpCuG,cAAczB,GACf2I,IAAa,IAClC,EACN,CAED,cAAAvJ,GACE,OAAOnH,KAAKyQ,wBAAwBrL,EAAaC,SAAU,cAC5D,CAED,gBAAAV,GACE,OAAO3E,KAAKyQ,wBAAwBrL,EAAaE,OAAQ,gBAC1D,CAED,gBAAAf,GACE,OAAOvE,KAAKyQ,wBAAwBrL,EAAaE,OAAQ,gBAC1D,CAED,gBAAAV,GACE,OAAO5E,KAAKyQ,wBAAwBrL,EAAaE,OAAQ,gBAC1D,CAED,yBAAAsL,GACE,OAAO5Q,KAAKyQ,wBACVrL,EAAaG,UACb,gBAEH,CAED,uBAAAsL,GACE,MAAMC,EAAY9Q,KAAK2H,UACpB3C,QAAQ2D,GAAOA,EAAG1F,OAASmC,EAAaG,YACxChE,KAAKwG,GACa/H,KAAKmN,gBAAgBN,YAAY9E,EAAS9E,MACpCuG,cAAczB,GACxBqE,aAAe,IAGhC,OAAO0E,EAAUpP,OAASQ,KAAKC,OAAO2O,GAAa,CACpD,CAED,0BAAAC,GACE,OAAO/Q,KAAKyQ,wBACVrL,EAAaG,UACb,iBAEH,CAED,kBAAAyL,GACE,IAAKhR,KAAK4O,KAAM,OAAO,EAEvB,GAAI5O,KAAK4O,KAAKjH,UAAUjG,OAAS1B,KAAK2H,UAAUjG,OAAQ,OAAO,EAE/D,IAAK,MAAMqG,KAAY/H,KAAK2H,UAAW,CACrC,MAAMkC,EAAe7J,KAAK4O,KAAKjH,UAAU5F,MACtC4G,GAAOA,EAAGjJ,KAAOqI,EAASrI,KAG7B,IAAKmK,EAAc,OAAO,EAG1B,GADiB7J,KAAKmN,gBAAgBN,YAAY9E,EAAS9E,MAC9C2G,WAAW7B,EAAU8B,GAChC,OAAO,CAEV,CAED,OAAO,CACR,CAED,cAAAoH,GACE,IAAKjR,KAAK4O,KAAM,OAAO,EAEvB,IAAK,MAAM7G,KAAY/H,KAAK2H,UAAW,CACrC,MAAMkC,EAAe7J,KAAK4O,KAAKjH,UAAU5F,MACtC4G,GAAOA,EAAGjJ,KAAOqI,EAASrI,KAG7B,GAAImK,EAAc,CACC7J,KAAKmN,gBAAgBN,YAAY9E,EAAS9E,MAClD6G,eAAe/B,EAAU8B,EACnC,CACF,CAED,OAAO,CACR,EC9LI,MAAMqH,EACX,WAAAzR,CAAY4O,EAAiB8C,EAAoBjQ,GAC/ClB,KAAKqO,gBAAkBA,EACvBrO,KAAKmR,mBAAqBA,EAC1BnR,KAAKkB,eAAiBA,EACtBlB,KAAKoR,SAAWpR,KAAKkB,eAAemQ,eAAiB,GAErDrR,KAAKsR,sBACN,CAED,oBAAAA,GACEtR,KAAKoR,SAAWpR,KAAKoR,SAAS7P,KAAKgQ,IACjC,IAAI3C,EAAO,KAEP2C,EAAY3C,WAAgC4C,IAAxBD,EAAY3C,KAAKlP,KACvCkP,EAAO5O,KAAKmR,mBAAmBlC,mBAAmBsC,EAAY3C,KAAKlP,KAGrE,MAAMoB,EAAU,IAAImP,EAClBsB,EAAY7R,GACZ6R,EAAYrE,QACZ,IAAI/M,KAAKoR,EAAYrR,MACrB0O,GA4CF,OAzCI2C,EAAY5J,WAAa4J,EAAY5J,UAAUjG,QACjD6P,EAAY5J,UAAUK,SAASF,IAC7B,IAAKhH,EAAQmI,gBAAgBnB,EAAapI,IAAK,CAC7C,MAAM8O,EAAmBxO,KAAKqO,gBAAgBpF,gBAC5CnB,EAAapI,IAEX8O,IACsB1N,EAAQuM,YAAYmB,GAExC1G,EAAatB,MAAQsB,EAAatB,KAAK9E,OACzCoG,EAAatB,KAAKwB,SAASf,IACzBnG,EAAQsP,UAAUtI,EAAapI,GAAIuH,EAAId,KAAMc,EAAI7G,OAAO,IAG1D0H,EAAa/D,UACb+D,EAAa/D,SAASrC,SAEI,WAAtBoG,EAAa7E,KACf6E,EAAa/D,SAASiE,SAAStD,IAC7B5D,EAAQuP,oBACNvI,EAAapI,GACbgF,EAAQnB,SACRmB,EAAQlB,SACRkB,EAAQjB,eACT,IAE4B,cAAtBqE,EAAa7E,MACtB6E,EAAa/D,SAASiE,SAAStD,IAC7B5D,EAAQwP,uBACNxI,EAAapI,GACbgF,EAAQnB,SACRmB,EAAQe,WACT,KAKV,KAIE3E,CAAO,GAEjB,CAED,aAAA+H,GACE7I,KAAKkB,eAAeuQ,aAAazR,KAAKoR,SACvC,CAED,iBAAAM,GACE,OAAK1R,KAAKoR,SAAS1P,OACZQ,KAAKC,OAAOnC,KAAKoR,SAAS7P,KAAKT,GAAYA,EAAQpB,MAAO,EAD/B,CAEnC,CAED,aAAAiS,CAAczE,EAAShN,EAAO,KAAM6O,GAClC,IAAIH,EAAO,KACX,QAAsB4C,IAAlBzC,IACFH,EAAO5O,KAAKmR,mBAAmBlC,mBAAmBF,IAC7CH,GACH,MAAM,IAAI5M,MAAM,wBAAwB+M,eAI5C,MAAMrP,EAAKM,KAAK0R,oBACV5Q,EAAU,IAAImP,EAAQvQ,EAAIwN,EAAShN,GAAQ,IAAIC,KAAQyO,GAI7D,OAFA5O,KAAKoR,SAAS3Q,KAAKK,GACnBd,KAAK6I,gBACE/H,CACR,CAED,oBAAA8Q,CAAqBnJ,EAAWF,GAC9B,MAAMzH,EAAUd,KAAK0I,eAAeD,GAC9BV,EAAW/H,KAAKqO,gBAAgBpF,gBAAgBV,GAEtD,IAAKzH,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAGrC,IAAKV,EACH,MAAM,IAAI/F,MAAM,mBAAmBuG,gBAKrC,OAFsBzH,EAAQuM,YAAYtF,GAC1C/H,KAAK6I,gBACE/H,CACR,CAED,kBAAA+Q,CAAmBpJ,EAAWF,EAAYpC,EAAM/F,GAC9C,MAAMU,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAGrC3H,EAAQsP,UAAU7H,EAAYpC,EAAM/F,GACpCJ,KAAK6I,eACN,CAED,kBAAAiJ,CAAmBrJ,EAAWF,EAAY5B,EAAUR,EAAM/F,GACxD,MAAMU,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAGrC3H,EAAQ+F,UAAU0B,EAAY5B,EAAUR,EAAM/F,GAC9CJ,KAAK6I,eACN,CAED,4BAAAkJ,CACEtJ,EACAF,EACAhF,EACAC,EACAC,EAAiB,MAEjB,MAAM3C,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAGrC3H,EAAQuP,oBAAoB9H,EAAYhF,EAAUC,EAAUC,GAC5DzD,KAAK6I,eACN,CAED,4BAAAmJ,CACEvJ,EACAF,EACArE,EACAX,EACAC,EACAC,GAEA,MAAM3C,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAGrC3H,EAAQyP,oBACNhI,EACArE,EACAX,EACAC,EACAC,GAEFzD,KAAK6I,eACN,CAED,+BAAAoJ,CACExJ,EACAF,EACAhF,EACAkC,EAAa,MAEb,MAAM3E,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAGrC3H,EAAQwP,uBAAuB/H,EAAYhF,EAAUkC,GACrDzF,KAAK6I,eACN,CAED,+BAAAqJ,CACEzJ,EACAF,EACArE,EACAX,EACAkC,GAEA,MAAM3E,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAGrC3H,EAAQ0P,uBACNjI,EACArE,EACAX,EACAkC,GAEFzF,KAAK6I,eACN,CAED,cAAAH,CAAeD,GACb,OAAOzI,KAAKoR,SAASrP,MAAMjB,GAAYA,EAAQpB,KAAO+I,GACvD,CAED,kBAAA0J,CAAmBzC,GACjB,OAAO1P,KAAKoR,SAASpM,QAAQlE,GAAYA,EAAQoM,UAAYwC,GAC9D,CAED,cAAA0C,GACE,OAAOpS,KAAKoR,QACb,CAED,wBAAAiB,CAAyB5J,GACvB,MAAM3H,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAErC,OAAO3H,EAAQqG,gBAChB,CAED,0BAAAmL,CAA2B7J,GACzB,MAAM3H,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAErC,OAAO3H,EAAQ6D,kBAChB,CAED,0BAAA4N,CAA2B9J,GACzB,MAAM3H,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAErC,OAAO3H,EAAQyD,kBAChB,CAED,mCAAAiO,CAAoC/J,GAClC,MAAM3H,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAErC,OAAO3H,EAAQ8P,2BAChB,CAED,iCAAA6B,CAAkChK,GAChC,MAAM3H,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAErC,OAAO3H,EAAQ+P,yBAChB,CAED,oCAAA6B,CAAqCjK,GACnC,MAAM3H,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAErC,OAAO3H,EAAQiQ,4BAChB,CAED,kBAAAC,CAAmBvI,GACjB,MAAM3H,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAErC,OAAO3H,EAAQkQ,oBAChB,CAED,uBAAA2B,CAAwBlK,GACtB,MAAM3H,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAErC,MAAMmK,EAAS9R,EAAQmQ,iBAEvB,OADAjR,KAAK6I,gBACE+J,CACR,CAED,oBAAAC,CAAqBpK,EAAWF,GAC9B,MAAMzH,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EACH,MAAM,IAAIkB,MAAM,mBAAmByG,gBAGrC,MAAMV,EAAWjH,EAAQ6G,UAAU5F,MAAM4G,GAAOA,EAAGjJ,KAAO6I,IAC1D,IAAKR,EACH,MAAM,IAAI/F,MACR,mBAAmBuG,6BAAsCE,KAI7D,OAAOV,CACR,CAED,iBAAAS,CAAkBC,EAAWF,GAC3B,MAAMzH,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EAAS,OAEd,MAAMiH,EAAWjH,EAAQ6G,UAAU5F,MAAM4G,GAAOA,EAAGjJ,KAAO6I,IACrDR,IAGDA,EAASvB,OAAMuB,EAASvB,KAAO,IAC/BuB,EAASa,gBAAeb,EAASa,cAAgB,IAErD5I,KAAK6I,gBACN,CAED,2BAAAC,CAA4BL,EAAWF,GACrC,MAAMzH,EAAUd,KAAK0I,eAAeD,GACpC,IAAK3H,EAAS,OAEd,MAAMiH,EAAWjH,EAAQ6G,UAAU5F,MAAM4G,GAAOA,EAAGjJ,KAAO6I,IACrDR,IAGDA,EAAShE,WAAUgE,EAAShE,SAAW,IACvCgE,EAASgB,oBAAmBhB,EAASgB,kBAAoB,IAE7D/I,KAAK6I,gBACN,CAED,8BAAAG,CAA+BP,EAAWF,GACxCvI,KAAK8I,4BAA4BL,EAAWF,EAC7C,EC3UI,MAAMuK,EACX,WAAArT,CAAYsT,EAAaC,GACvBhT,KAAK+S,YAAcA,EACnB/S,KAAKgT,eAAiBA,EACtBhT,KAAKmN,gBAAkB,IAAIR,CAC5B,CAED,qBAAAsG,CAAsBvD,EAAQwD,EAAY,KAAMC,EAAU,MACxD,MAAM1R,EAAOzB,KAAK+S,YAAYjR,YAAY4N,GAC1C,IAAKjO,EACH,MAAM,IAAIO,MAAM,gBAAgB0N,eAGlC,MAAM0D,EAAoB3R,EAAKxB,cACzBoT,EAAQH,EAAY,IAAI/S,KAAK+S,GAAa,KAC1CI,EAAMH,EAAU,IAAIhT,KAAKgT,GAAW,KAEpCI,EAAcH,EAAkBpO,QAAQ5E,IAC5C,MAAMoT,EAAapT,EAAOF,KAC1B,QAASmT,GAASG,GAAcH,MAAYC,GAAOE,GAAcF,EAAI,IAGvE,GAA2B,IAAvBC,EAAY7R,OACd,MAAO,CACL+R,mBAAoB,EACpBF,YAAa,IAOjB,MAAO,CACLE,mBAHAF,EAAYA,EAAY7R,OAAS,GAAGtB,OAASmT,EAAY,GAAGnT,OAI5DmT,cAEH,CAED,iBAAAG,CAAkBhE,EAAQwD,EAAY,KAAMC,EAAU,MACpD,MAAM/B,EAAWpR,KAAKgT,eAAeb,mBAAmBzC,GAElD2D,EAAQH,EAAY,IAAI/S,KAAK+S,GAAa,KAC1CI,EAAMH,EAAU,IAAIhT,KAAKgT,GAAW,KAE1C,OAAO/B,EAASpM,QAAQlE,IACtB,MAAM6S,EAAc7S,EAAQZ,KAC5B,QAASmT,GAASM,GAAeN,MAAYC,GAAOK,GAAeL,EAAI,GAE1E,CAED,kBAAAM,CAAmBlE,EAAQwD,EAAY,KAAMC,EAAU,MACrD,MAAMU,EAAiB7T,KAAK0T,kBAAkBhE,EAAQwD,EAAWC,GAEjE,GAA8B,IAA1BU,EAAenS,OACjB,MAAO,CACL+I,oBAAqB,EACrBoB,sBAAuB,EACvBC,sBAAuB,EACvB+H,eAAgB,IAuBpB,MAAO,CACLpJ,oBAnBAoJ,EAAeA,EAAenS,OAAS,GAAGyF,iBAC1C0M,EAAe,GAAG1M,iBAmBlB0E,sBAhBAgI,EAAeA,EAAenS,OAAS,GAAGiD,mBAC1CkP,EAAe,GAAGlP,mBAgBlBmH,sBAbA+H,EAAeA,EAAenS,OAAS,GAAG6C,mBAC1CsP,EAAe,GAAGtP,mBAalBsP,eAXqBA,EAAetS,KAAKT,IAAa,CACtDZ,KAAMY,EAAQZ,KACdkK,YAAatJ,EAAQqG,iBACrByD,cAAe9J,EAAQ6D,mBACvBoG,cAAejK,EAAQyD,uBAS1B,CAED,mBAAAuP,CAAoBpE,EAAQnH,EAAY2K,EAAY,KAAMC,EAAU,MAClE,MAAMU,EAAiB7T,KAAK0T,kBAAkBhE,EAAQwD,EAAWC,GAC3DxL,EAAY,GAElB,IAAK,MAAM7G,KAAW+S,EAAgB,CACpC,MAAM9L,EAAWjH,EAAQ6G,UAAU5F,MAChCgG,GAAaA,EAASrI,KAAO6I,IAE5BR,GACFJ,EAAUlH,KAAK,CACbP,KAAMY,EAAQZ,KACd6H,SAAUA,GAGf,CAED,GAAyB,IAArBJ,EAAUjG,OACZ,MAAO,CACLqS,SAAU,GACVxG,QAAS,mDAIb,MAAM7D,EAAgB/B,EAAU,GAAGI,SAEnC,IACE,MAAMgF,EAAW/M,KAAKmN,gBAAgBN,YAAYnD,EAAczG,MAE1D+Q,EAAerM,EAAUpG,KAAK0S,IAC3B,CACL/T,KAAM+T,EAAK/T,KACXqI,WAAY0L,EAAKlM,SAASrI,MACvBqN,EAASvD,cAAcyK,EAAKlM,cAI7BmM,EAAkBnH,EAAStD,kBAC/B9B,EAAU,GAAGI,SACbJ,EAAUA,EAAUjG,OAAS,GAAGqG,UAG5B+E,EAAepD,EAAczG,KAAKkR,cACxC,IAAIC,EAAoB,CAAA,EA2BxB,MAzBqB,cAAjBtH,GAAiD,cAAjBA,GAE/BoH,EAAgB3H,mBACjB2H,EAAgBxH,yBAEhB0H,EAAkB7H,kBAChB2H,EAAgBxH,wBAEM,WAAjBI,GAA8C,WAAjBA,KAEnCoH,EAAgBxI,kBACjBwI,EAAgBrI,wBAEhBuI,EAAkB1I,iBAChBwI,EAAgBrI,wBAGjBqI,EAAgBvI,kBACjBuI,EAAgBpI,wBAEhBsI,EAAkBzI,iBAChBuI,EAAgBpI,wBAIf,IACFoI,KACAE,EACHL,SAAUC,EAEb,CAAC,MAAO1G,GAEP,OADA4C,QAAQ5C,MAAM,+BAA+BA,EAAMC,WAC5C,CACLwG,SAAU,GACVxG,QAAS,+BAA+BD,EAAMC,UAEjD,CACF,CAED,wBAAA8G,CAAyB3E,EAAQwD,EAAY,KAAMC,EAAU,MAC3D,MAAMmB,EAAiBtU,KAAKiT,sBAC1BvD,EACAwD,EACAC,GAEIoB,EAAkBvU,KAAK4T,mBAAmBlE,EAAQwD,EAAWC,GAE7D1R,EAAOzB,KAAK+S,YAAYjR,YAAY4N,GACpC5P,EAAgB2B,EAAOA,EAAK3B,cAAgB,KAMlD,MAAO,CACL0U,cAAe,CACbC,cANFhT,GAAQA,EAAKxB,cAAcyB,OAAS,EAChCD,EAAKxB,cAAc,GAAGG,OACtB,KAKFN,gBACA4U,OAAQJ,EAAeb,mBACvBkB,QAASL,EAAef,aAE1BqB,eAAgB,CACdC,cAAeN,EAAgBV,eAAenS,OAC9CoT,kBAAmBP,EAAgBV,eAAerP,QAChD,CAACqG,EAAK/J,IAAY+J,EAAM/J,EAAQsJ,aAChC,GAEF2K,qBAAsBR,EAAgBV,eAAerP,QACnD,CAACqG,EAAK/J,IAAY+J,EAAM/J,EAAQ8J,eAChC,GAEFoK,mBAAoBT,EAAgBV,eAAerP,QACjD,CAACqG,EAAK/J,IAAY+J,EAAM/J,EAAQiK,eAChC,GAEFgJ,SAAUQ,GAGf,ECtNI,MAAMU,EACT,WAAAxV,CAAYyV,GACVlV,KAAKkV,WAAaA,CACnB,CAED,OAAAC,GACE,GAAsB,oBAAXC,OAAwB,OAAO,KAC1C,MAAM9L,EAAO+L,aAAaC,QAAQtV,KAAKkV,YACvC,OAAO5L,EAAOiM,KAAKC,MAAMlM,GAAQ,IAClC,CAED,QAAAmM,CAASnM,GACe,oBAAX8L,QACXC,aAAaK,QAAQ1V,KAAKkV,WAAYK,KAAKI,UAAUrM,GACtD,CAED,SAAAsM,GACwB,oBAAXR,QACXC,aAAaQ,WAAW7V,KAAKkV,WAC9B,ECjBE,MAAMY,EACX,WAAArW,GACEO,KAAK+V,YAAc,IAAId,EAAe,qBACtCjV,KAAKgW,gBAAkB,IAAIf,EAAe,yBAC1CjV,KAAKiW,mBAAqB,IAAIhB,EAAe,6BAC7CjV,KAAKkW,eAAiB,IAAIjB,EAAe,wBAGzCjV,KAAKmW,oBACN,CAED,kBAAAA,GAEwB,oBAAXf,SAENpV,KAAK+V,YAAYZ,WACpBnV,KAAK+V,YAAYN,SAAS,IAGvBzV,KAAKgW,gBAAgBb,WACxBnV,KAAKgW,gBAAgBP,SAAS,IAG3BzV,KAAKiW,mBAAmBd,WAC3BnV,KAAKiW,mBAAmBR,SAAS,IAG9BzV,KAAKkW,eAAef,WACvBnV,KAAKkW,eAAeT,SAAS,IAEhC,CAED,2BAAAW,CAA4BC,GAC1B,GAAKA,GAAYA,EAAQnV,eAKzB,IACE,MAAMC,EAAQoU,KAAKC,MACjBH,aAAaC,QAAQ,sBAAwB,MAEzC3N,EAAY4N,KAAKC,MACrBH,aAAaC,QAAQ,0BAA4B,MAE7ClE,EAAWmE,KAAKC,MACpBH,aAAaC,QAAQ,yBAA2B,MAE5ChV,EAAeiV,KAAKC,MACxBH,aAAaC,QAAQ,8BAAgC,MAGvDpF,QAAQoG,IAAI,uDACZpG,QAAQoG,IAAI,oBAAoBnV,EAAMO,UACtCwO,QAAQoG,IAAI,iBAAiB3O,EAAUjG,UACvCwO,QAAQoG,IAAI,iBAAiBlF,EAAS1P,UACtCwO,QAAQoG,IAAI,wBAAwBhW,EAAaoB,UAEjD2U,EAAQnV,eAAeW,UAAUV,GACjCkV,EAAQnV,eAAegH,cAAcP,GACrC0O,EAAQnV,eAAeuQ,aAAaL,GACpCiF,EAAQnV,eAAewN,iBAAiBpO,GAExC+V,EAAQhI,gBAAgBxG,wBACxBwO,EAAQrD,eAAe1B,uBACvB+E,EAAQlF,mBAAmB7C,2BAE3B,MAAMiI,EAAiBF,EAAQhI,gBAAgBnF,kBACzCsN,EAAgBH,EAAQrD,eAAeZ,iBAM7C,OAJAlC,QAAQoG,IAAI,wBACZpG,QAAQoG,IAAI,2BAA2BC,EAAe7U,UACtDwO,QAAQoG,IAAI,2BAA2BE,EAAc9U,UAE9C,CACL+U,SAAS,EACTC,OAAQ,CACNvV,MAAOA,EAAMO,OACbiG,UAAWA,EAAUjG,OACrB0P,SAAUA,EAAS1P,OACnBpB,aAAcA,EAAaoB,QAGhC,CAAC,MAAO4L,GAEP,OADA4C,QAAQ5C,MAAM,mCAAoCA,GAC3C,CACLmJ,SAAS,EACTnJ,MAAOA,EAAMC,QAEhB,MAvDC2C,QAAQ5C,MAAM,4CAwDjB,CAED,QAAAlM,GACE,OAAOpB,KAAK+V,YAAYZ,WAAa,EACtC,CAED,SAAAtT,CAAUV,GACRnB,KAAK+V,YAAYN,SAAStU,EAC3B,CAED,YAAAyG,GACE,OAAO5H,KAAKgW,gBAAgBb,WAAa,EAC1C,CAED,aAAAjN,CAAcP,GACZ3H,KAAKgW,gBAAgBP,SAAS9N,EAC/B,CAED,eAAA/G,GACE,OAAOZ,KAAKiW,mBAAmBd,WAAa,EAC7C,CAED,gBAAAzG,CAAiBiI,GACf3W,KAAKiW,mBAAmBR,SAASkB,EAClC,CAED,WAAAtF,GACE,OAAOrR,KAAKkW,eAAef,WAAa,EACzC,CAED,YAAA1D,CAAaL,GACXpR,KAAKkW,eAAeT,SAASrE,EAC9B,CAED,YAAAwF,GACE5W,KAAK+V,YAAYH,YACjB5V,KAAKgW,gBAAgBJ,YACrB5V,KAAKiW,mBAAmBL,YACxB5V,KAAKkW,eAAeN,YACpB5V,KAAKmW,oBACN,EC5HI,MAAMU,EACX,WAAApX,GAEEO,KAAKkB,eAAiB,IAAI4U,EAG1B9V,KAAK+S,YAAc,IAAI9R,EAAYjB,KAAKkB,gBACxClB,KAAKqO,gBAAkB,IAAI3G,EAAgB1H,KAAKkB,gBAChDlB,KAAKmR,mBAAqB,IAAI/C,EAAmBpO,KAAKqO,gBAAiBrO,KAAKkB,gBAC5ElB,KAAKgT,eAAiB,IAAI9B,EACxBlR,KAAKqO,gBACLrO,KAAKmR,mBACLnR,KAAKkB,gBAEPlB,KAAK8W,kBAAoB,IAAIhE,EAC3B9S,KAAK+S,YACL/S,KAAKgT,eAER,CAID,SAAA+D,GACE7G,QAAQoG,IAAItW,KAAK+S,YAAYnQ,cAC9B,CAED,OAAAoU,CAAQrX,EAAMC,EAAUC,EAAOC,EAAeC,GAC5C,IACE,MAAMuC,EAAUtC,KAAK+S,YAAY3Q,aAC/BzC,EACAC,EACAC,EACAC,EACAC,GAGF,OADAmQ,QAAQoG,IAAI,gBAAgBhU,EAAQ3C,wBAC7B2C,CACR,CAAC,MAAOgL,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,SAAA2J,CAAUpX,EAAOD,GACf,IACE,MAAM6B,EAAOzB,KAAK+S,YAAYxQ,UAAU1C,EAAOD,GAE/C,OADAsQ,QAAQoG,IAAI,gBAAgB7U,EAAK9B,wBAC1B8B,CACR,CAAC,MAAO6L,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,YAAA/M,CAAaC,GACX,IACER,KAAK+S,YAAYvQ,iBAAiBhC,GAClC0P,QAAQoG,IAAI,+BAA+B9V,OAC5C,CAAC,MAAO8M,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,aAAAtM,CAAcrB,EAAMC,EAAUC,EAAOE,GACnC,IACEC,KAAK+S,YAAYrQ,kBAAkB/C,EAAMC,EAAUC,EAAOE,GAC1DmQ,QAAQoG,IAAI,+BACb,CAAC,MAAOhJ,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAID,aAAA4J,GACEhH,QAAQoG,IAAItW,KAAKqO,gBAAgBnF,kBAClC,CAED,sBAAA3B,CAAuB5H,EAAMmD,EAAOC,EAAaC,EAAUuD,EAAUC,GACnE,MAAM4B,EAAcpI,KAAKqO,gBAAgB9G,uBACvC5H,EACAmD,EACAC,EACAC,EACAuD,EACAC,GAGF,OADA0J,QAAQoG,IAAI,cAAclO,EAAYzI,kBAC/ByI,CACR,CAED,oBAAAZ,CAAqB7H,EAAMmD,EAAOC,EAAaC,EAAUa,GACvD,MAAMuE,EAAcpI,KAAKqO,gBAAgB7G,qBACvC7H,EACAmD,EACAC,EACAC,EACAa,GAGF,OADAqM,QAAQoG,IAAI,qBAAqBlO,EAAYzI,kBACtCyI,CACR,CAED,uBAAAX,CAAwB9H,EAAMmD,EAAOC,EAAaC,EAAU4C,GAC1D,MAAMwC,EAAcpI,KAAKqO,gBAAgB5G,wBACvC9H,EACAmD,EACAC,EACAC,EACA4C,GAGF,OADAsK,QAAQoG,IAAI,8BAA8BlO,EAAYzI,kBAC/CyI,CACR,CAED,qBAAAC,CACEpF,EACAtD,EACAmD,EACAC,EACAC,EACAsE,GAEA,MAAMc,EAAcpI,KAAKqO,gBAAgBhG,sBACvCpF,EACAtD,EACAmD,EACAC,EACAC,EACAsE,GAGF,OADA4I,QAAQoG,IAAI,GAAGrT,gBAAmBmF,EAAYzI,kBACvCyI,CACR,CAED,cAAAE,CAAeC,GACbvI,KAAKqO,gBAAgB/F,eAAeC,EACrC,CAID,gBAAA4O,GACEjH,QAAQoG,IAAItW,KAAKmR,mBAAmBxB,qBACrC,CAED,iBAAAd,CAAkBlP,EAAMoD,GACtB,IACE,MAAM2M,EAAS1P,KAAK+S,YAAYpQ,iBAAiBjD,GAC3CiB,EAAcX,KAAKmR,mBAAmBtC,kBAC1Ca,EACA/P,EACAoD,GAGF,OADAmN,QAAQoG,IAAI,gCACL3V,CACR,CAAC,MAAO2M,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,iBAAAwB,CAAkBC,GAChB,IACE/O,KAAKmR,mBAAmBrC,kBAAkBC,EAC3C,CAAC,MAAOzB,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,wBAAA0B,CAAyBD,EAAexG,GACtC,IACE,MAAMR,EAAW/H,KAAKqO,gBAAgBpF,gBAAgBV,GAChD5H,EAAcX,KAAKmR,mBAAmBnC,yBAC1CD,EACAxG,GAEF2H,QAAQoG,IACN,cAAcvO,EAASpI,yCAAyCgB,EAAYhB,OAE/E,CAAC,MAAO2N,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,6BAAA4B,CAA8BH,EAAexG,GAC3C,IACE,OAAOvI,KAAKmR,mBAAmBjC,8BAC7BH,EACAxG,EAEH,CAAC,MAAO+E,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,6BAAA8B,CAA8BL,EAAexG,EAAYpC,EAAM/F,GAC7D,IACEJ,KAAKmR,mBAAmB/B,8BACtBL,EACAxG,EACApC,EACA/F,EAEH,CAAC,MAAOkN,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,iCAAA+B,CACEN,EACAxG,EACAhF,EACAC,EACAC,EAAiB,MAEjB,IACE,MAAMsE,EACJ/H,KAAKmR,mBAAmB9B,kCACtBN,EACAxG,EACAhF,EACAC,EACAC,GAEJyM,QAAQoG,IAAI,wCAAwCvO,EAASpI,OAC9D,CAAC,MAAO2N,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,0CAAAgC,CACEP,EACAxG,EACAhF,EACAkC,EAAa,MAEb,IACE,MAAMsC,EACJ/H,KAAKmR,mBAAmB7B,2CACtBP,EACAxG,EACAhF,EACAkC,GAEJyK,QAAQoG,IACN,8CAA8CvO,EAASpI,OAE1D,CAAC,MAAO2N,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,uBAAA8J,CAAwBrI,GACtB,IACE,MAAMpO,EACJX,KAAKmR,mBAAmBlC,mBAAmBF,GAC7CmB,QAAQoG,IAAI3V,EAAYgH,UACzB,CAAC,MAAO2F,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAID,YAAA+J,GACEnH,QAAQoG,IAAItW,KAAKgT,eAAeZ,iBACjC,CAED,aAAAT,CAAczR,EAAO,KAAM6O,GACzB,IACE,MAAMW,EAAS1P,KAAK+S,YAAYpQ,iBAAiBjD,GAC3CoB,EAAUd,KAAKgT,eAAerB,cAClCjC,EACAxP,EACA6O,GAGF,OADAmB,QAAQoG,IAAI,sBACLxV,CACR,CAAC,MAAOwM,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,oBAAAsE,CAAqBnJ,EAAWF,GAC9B,IACE,MAAMzH,EAAUd,KAAKgT,eAAepB,qBAClCnJ,EACAF,GAEIR,EAAW/H,KAAKqO,gBAAgBpF,gBAAgBV,GAEtD,OADA2H,QAAQoG,IAAI,YAAYvO,EAASpI,yBAC1BmB,CACR,CAAC,MAAOwM,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,kBAAAuE,CAAmBpJ,EAAWF,EAAYpC,EAAM/F,GAC9C,IACEJ,KAAKgT,eAAenB,mBAClBpJ,EACAF,EACApC,EACA/F,GAEF8P,QAAQoG,IAAI,6BAA6BnQ,gBAAmB/F,OAC7D,CAAC,MAAOkN,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,kBAAAwE,CAAmBrJ,EAAWF,EAAY5B,EAAUR,EAAM/F,GACxD,IACEJ,KAAKgT,eAAelB,mBAClBrJ,EACAF,EACA5B,EACAR,EACA/F,GAEF8P,QAAQoG,IAAI,8BAA8BnQ,cAAiB/F,OAC5D,CAAC,MAAOkN,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,4BAAAyE,CACEtJ,EACAF,EACAhF,EACAC,EACAC,EAAiB,MAEjB,IACEzD,KAAKgT,eAAejB,6BAClBtJ,EACAF,EACAhF,EACAC,EACAC,GAEFyM,QAAQoG,IAAI,2BAA2B/S,YAAmBC,OAC3D,CAAC,MAAO8J,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,4BAAA0E,CACEvJ,EACAF,EACArE,EACAX,EACAC,EACAC,GAEA,IACEzD,KAAKgT,eAAehB,6BAClBvJ,EACAF,EACArE,EACAX,EACAC,EACAC,GAEFyM,QAAQoG,IAAI,4BAA4B/S,YAAmBC,OAC5D,CAAC,MAAO8J,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,+BAAA2E,CACExJ,EACAF,EACAhF,EACAkC,EAAa,MAEb,IACEzF,KAAKgT,eAAef,gCAClBxJ,EACAF,EACAhF,EACAkC,GAEFyK,QAAQoG,IACN,iCAAiC/S,wBAC/BkC,GAAc,eAGnB,CAAC,MAAO6H,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,+BAAA4E,CACEzJ,EACAF,EACArE,EACAX,EACAkC,GAEA,IACEzF,KAAKgT,eAAed,gCAClBzJ,EACAF,EACArE,EACAX,EACAkC,GAEFyK,QAAQoG,IACN,kCAAkC/S,wBAChCkC,GAAc,eAGnB,CAAC,MAAO6H,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,WAAAgK,CAAY7O,GACV,IACE,MAAM3H,EAAUd,KAAKgT,eAAetK,eAAeD,GACnDyH,QAAQoG,IAAIxV,EACb,CAAC,MAAOwM,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,kBAAA0D,CAAmBvI,GACjB,IACE,OAAOzI,KAAKgT,eAAehC,mBAAmBvI,EAC/C,CAAC,MAAO6E,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,uBAAAqF,CAAwBlK,GACtB,IACE,OAAOzI,KAAKgT,eAAeL,wBAAwBlK,EACpD,CAAC,MAAO6E,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAID,wBAAA+E,CAAyB5J,GACvB,IACE,MAAM2B,EACJpK,KAAKgT,eAAeX,yBAAyB5J,GAE/C,OADAyH,QAAQoG,IAAI,4BAA8BlM,GACnCA,CACR,CAAC,MAAOkD,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,0BAAAgF,CAA2B7J,GACzB,IACE,MAAMmC,EACJ5K,KAAKgT,eAAeV,2BAA2B7J,GAEjD,OADAyH,QAAQoG,IAAI,kCAAoC1L,EAAgB,OACzDA,CACR,CAAC,MAAO0C,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,0BAAAiF,CAA2B9J,GACzB,IACE,MAAMsC,EACJ/K,KAAKgT,eAAeT,2BAA2B9J,GAIjD,OAHAyH,QAAQoG,IACN,4CAA8CvL,EAAgB,UAEzDA,CACR,CAAC,MAAOuC,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,mCAAAkF,CAAoC/J,GAClC,IACE,MAAMsC,EACJ/K,KAAKgT,eAAeR,oCAAoC/J,GAM1D,OALAyH,QAAQoG,IACN,yDACEvL,EACA,WAEGA,CACR,CAAC,MAAOuC,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,iCAAAmF,CAAkChK,GAChC,IACE,MAAM2D,EACJpM,KAAKgT,eAAeP,kCAAkChK,GAMxD,OALAyH,QAAQoG,IACN,8DACElK,EACA,WAEGA,CACR,CAAC,MAAOkB,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,oCAAAoF,CAAqCjK,GACnC,IACE,MAAM4D,EACJrM,KAAKgT,eAAeN,qCAAqCjK,GAI3D,OAHAyH,QAAQoG,IACN,mDAAqDjK,GAEhDA,CACR,CAAC,MAAOiB,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAID,qBAAA2F,CAAsBC,EAAY,KAAMC,EAAU,MAChD,IACE,MAAM9R,EAAcrB,KAAK+S,YAAYpQ,iBAC/B4Q,EAAcvT,KAAK8W,kBAAkB7D,sBACzC5R,EAAY3B,GACZwT,EACAC,GAGF,OADAjD,QAAQoG,IAAI/C,GACLA,CACR,CAAC,MAAOjG,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,kBAAAsG,CAAmBV,EAAY,KAAMC,EAAU,MAC7C,IACE,MAAM9R,EAAcrB,KAAK+S,YAAYpQ,iBAC/B4R,EAAkBvU,KAAK8W,kBAAkBlD,mBAC7CvS,EAAY3B,GACZwT,EACAC,GAGF,OADAjD,QAAQoG,IAAI/B,GACLA,CACR,CAAC,MAAOjH,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,mBAAAwG,CAAoBvL,EAAY2K,EAAY,KAAMC,EAAU,MAC1D,IACE,MAAM9R,EAAcrB,KAAK+S,YAAYpQ,iBAC/B4U,EAAmBvX,KAAK8W,kBAAkBhD,oBAC9CzS,EAAY3B,GACZ6I,EACA2K,EACAC,GAGF,OADAjD,QAAQoG,IAAIiB,GACLA,CACR,CAAC,MAAOjK,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,iBAAAkK,CAAkBjP,EAAY2K,EAAY,KAAMC,EAAU,MACxD,IACE,MAAMpL,EAAW/H,KAAKqO,gBAAgBpF,gBAAgBV,GAEtD,IAAKR,GAAYA,EAAS9E,OAASmC,EAAaE,OAE9C,YADA4K,QAAQoG,IAAI,gCAId,MAAMjV,EAAcrB,KAAK+S,YAAYpQ,iBAC/B8U,EAAiBzX,KAAK8W,kBAAkBhD,oBAC5CzS,EAAY3B,GACZ6I,EACA2K,EACAC,GAIF,OADAjD,QAAQoG,IAAI,8BAA+BmB,GACpCA,CACR,CAAC,MAAOnK,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,oBAAAoK,CAAqBnP,EAAY2K,EAAY,KAAMC,EAAU,MAC3D,IACE,MAAMpL,EAAW/H,KAAKqO,gBAAgBpF,gBAAgBV,GAEtD,IAAKR,GAAYA,EAAS9E,OAASmC,EAAaG,UAE9C,YADA2K,QAAQoG,IAAI,yCAId,MAAMjV,EAAcrB,KAAK+S,YAAYpQ,iBAC/BgV,EAAoB3X,KAAK8W,kBAAkBhD,oBAC/CzS,EAAY3B,GACZ6I,EACA2K,EACAC,GAIF,OADAjD,QAAQoG,IAAI,uCAAwCqB,GAC7CA,CACR,CAAC,MAAOrK,GAEP,MADA4C,QAAQ5C,MAAMA,EAAMC,SACdD,CACP,CACF,0YC9nBiC,IAC3B,IAAIuJ"}