{"version":3,"file":"index.js","sources":["../src/classes/User/User.js","../src/classes/services/UserService.js","../src/classes/Exercise/Exercise.js","../src/classes/Exercise/CardioSession.js","../src/classes/Exercise/CardioExercise.js","../src/classes/Exercise/Constants/ExerciseType.js","../src/classes/Exercise/EnduranceSession.js","../src/classes/Exercise/EnduranceExercise.js","../src/classes/Exercise/Set.js","../src/classes/Exercise/StrengthExercise.js","../src/classes/Exercise/Factory/ExerciseFactory.js","../src/classes/services/ExerciseService.js","../src/classes/Exercise/Strategies/ExerciseStrategy.js","../src/classes/Exercise/Strategies/StrengthExerciseStrategy.js","../src/classes/Exercise/Strategies/CardioExerciseStrategy.js","../src/classes/Exercise/Strategies/EnduranceExerciseStrategy.js","../src/classes/Exercise/Strategies/ExerciseStrategyFactory.js","../src/classes/WorkoutPlan/WorkoutPlan.js","../src/classes/services/WorkoutPlanService.js","../src/classes/Workout/Workout.js","../src/classes/services/WorkoutService.js","../src/classes/services/StatisticsService.js","../src/classes/services/StorageService.js","../src/classes/services/LocalStorageManager.js","../src/classes/WorkoutPlanner.js","../src/index.js"],"sourcesContent":["export class User {\r\n  constructor(id, name, password, email, currentWeight, height) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.password = password;\r\n    this.email = email;\r\n    this.currentWeight = currentWeight;\r\n    this.weightHistory = [{ date: new Date(), weight: currentWeight }];\r\n    this.height = height;\r\n    this.workoutsHistory = [];\r\n    this.workoutPlans = [];\r\n  }\r\n\r\n  updateWeight(newWeight) {\r\n    this.currentWeight = newWeight;\r\n    this.weightHistory.push({ date: new Date(), weight: newWeight });\r\n  }\r\n\r\n  addWorkoutPlan(workoutPlan) {\r\n    this.workoutPlans.push(workoutPlan);\r\n  }\r\n\r\n  getWorkoutPlans() {\r\n    return this.workoutPlans;\r\n  }\r\n\r\n  addWorkout(workout) {\r\n    this.workoutsHistory.push(workout);\r\n  }\r\n\r\n  getWorkoutHistory() {\r\n    return this.workoutsHistory;\r\n  }\r\n\r\n  updateProfile(name, password, email, height) {\r\n    this.name = name || this.name;\r\n    this.password = password || this.password;\r\n    this.email = email || this.email;\r\n    this.height = height || this.height;\r\n  }\r\n}\r\n","import { User } from \"../User/User.js\";\r\n\r\nexport class UserService {\r\n  constructor(storageManager) {\r\n    this.storageManager = storageManager;\r\n    this.users = this.storageManager.getUsers() || [];\r\n    this.currentUser = null;\r\n    \r\n    // Десериализация объектов User из localStorage\r\n    this._deserializeUsers();\r\n  }\r\n\r\n  _deserializeUsers() {\r\n    // Преобразуем простые объекты из localStorage в экземпляры класса User\r\n    this.users = this.users.map(userData => {\r\n      const user = new User(\r\n        userData.id,\r\n        userData.name,\r\n        userData.password,\r\n        userData.email,\r\n        userData.currentWeight,\r\n        userData.height\r\n      );\r\n      \r\n      // Восстанавливаем историю веса\r\n      if (userData.weightHistory && userData.weightHistory.length) {\r\n        user.weightHistory = userData.weightHistory.map(entry => ({\r\n          date: new Date(entry.date),\r\n          weight: entry.weight\r\n        }));\r\n      }\r\n      \r\n      return user;\r\n    });\r\n  }\r\n\r\n  _saveUsers() {\r\n    this.storageManager.saveUsers(this.users);\r\n  }\r\n\r\n  getUserById(id) {\r\n    const user = this.users.find((user) => user.id === id);\r\n    if (!user) {\r\n      throw new Error(`Пользователь с ID ${id} не найден`);\r\n    }\r\n    return user;\r\n  }\r\n\r\n  generateUserId() {\r\n    if (!this.users.length) return 1;\r\n    return Math.max(...this.users.map(user => user.id)) + 1;\r\n  }\r\n\r\n  registerUser(name, password, email, currentWeight, height) {\r\n    if (this.users.some((user) => user.email === email)) {\r\n      throw new Error(\"Пользователь с таким email уже существует\");\r\n    }\r\n    const id = this.generateUserId();\r\n    const newUser = new User(id, name, password, email, currentWeight, height);\r\n    this.users.push(newUser);\r\n    this._saveUsers();\r\n    return newUser;\r\n  }\r\n\r\n  loginUser(email, password) {\r\n    const user = this.users.find((user) => user.email === email);\r\n    if (!user) {\r\n      throw new Error(\"Пользователя с таким email не существует\");\r\n    }\r\n\r\n    if (user.password !== password) {\r\n      throw new Error(\"Неверный пароль\");\r\n    }\r\n\r\n    this.currentUser = user;\r\n    return user;\r\n  }\r\n\r\n  updateUserWeight(newWeight) {\r\n    this.validateCurrentUser();\r\n    this.currentUser.updateWeight(newWeight);\r\n    this._saveUsers();\r\n  }\r\n\r\n  updateUserProfile(name, password, email, height) {\r\n    this.validateCurrentUser();\r\n    this.currentUser.updateProfile(name, password, email, height);\r\n    this._saveUsers();\r\n  }\r\n\r\n  getCurrentUser() {\r\n    return this.currentUser;\r\n  }\r\n\r\n  validateCurrentUser() {\r\n    if (!this.currentUser) {\r\n      throw new Error(\"Пользователь не авторизован\");\r\n    }\r\n  }\r\n\r\n  getAllUsers() {\r\n    return this.users;\r\n  }\r\n}\r\n","export class Exercise {\r\n  constructor(id, name, image, description, mediaUrl, type) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.image = image;\r\n    this.description = description || \"\";\r\n    this.mediaUrl = mediaUrl;\r\n    this.type = type;\r\n    this.notes = [];\r\n  }\r\n\r\n  updateExercise(name, description, mediaUrl) {\r\n    this.name = name || this.name;\r\n    this.description = description || this.description;\r\n    this.mediaUrl = mediaUrl || this.mediaUrl;\r\n  }\r\n\r\n  addNote(note) {\r\n    this.notes.push(note);\r\n  }\r\n}\r\n","export class CardioSession {\r\n  constructor(duration, distance, caloriesBurned = null) {\r\n    this.duration = duration; // in minutes\r\n    this.distance = distance; // in kilometers\r\n    this.caloriesBurned = caloriesBurned;\r\n  }\r\n\r\n  calculatePace() {\r\n    if (!this.distance || this.distance === 0) return 0;\r\n    return this.duration / this.distance; // minutes per kilometer\r\n  }\r\n\r\n  calculateSpeed() {\r\n    if (!this.duration || this.duration === 0) return 0;\r\n    return (this.distance / this.duration) * 60; // km/h\r\n  }\r\n}\r\n","import { Exercise } from \"./Exercise.js\";\r\nimport { CardioSession } from \"./CardioSession.js\";\r\n\r\nexport class CardioExercise extends Exercise {\r\n  constructor(id, name, image, description, mediaUrl, type, cardioType) {\r\n    super(id, name, image, description, mediaUrl, type);\r\n    this.cardioType = cardioType; // \"Running\", \"Cycling\", \"Swimming\"\r\n    this.sessions = [];\r\n  }\r\n\r\n  addSession(duration, distance, caloriesBurned = null) {\r\n    this.sessions.push(new CardioSession(duration, distance, caloriesBurned));\r\n  }\r\n\r\n  removeSession(sessionIndex) {\r\n    this.sessions.splice(sessionIndex, 1);\r\n  }\r\n\r\n  getSessions() {\r\n    return this.sessions;\r\n  }\r\n\r\n  updateSession(index, duration, distance, caloriesBurned) {\r\n    this.sessions[index].duration = duration || this.sessions[index].duration;\r\n    this.sessions[index].distance = distance || this.sessions[index].distance;\r\n    this.sessions[index].caloriesBurned =\r\n      caloriesBurned || this.sessions[index].caloriesBurned;\r\n  }\r\n\r\n  getTotalDuration() {\r\n    return this.sessions.reduce(\r\n      (acc, session) => acc + (session.duration || 0),\r\n      0\r\n    );\r\n  }\r\n\r\n  getTotalDistance() {\r\n    return this.sessions.reduce(\r\n      (acc, session) => acc + (session.distance || 0),\r\n      0\r\n    );\r\n  }\r\n\r\n  getTotalCalories() {\r\n    return this.sessions.reduce(\r\n      (acc, session) => acc + (session.caloriesBurned || 0),\r\n      0\r\n    );\r\n  }\r\n\r\n  getAveragePace() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return (\r\n      this.sessions.reduce((acc, session) => acc + session.calculatePace(), 0) /\r\n      this.sessions.length\r\n    );\r\n  }\r\n\r\n  getBestPace() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return Math.min(\r\n      ...this.sessions\r\n        .map((session) => session.calculatePace())\r\n        .filter((pace) => pace > 0)\r\n    );\r\n  }\r\n\r\n  getAverageSpeed() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return (\r\n      this.sessions.reduce(\r\n        (acc, session) => acc + session.calculateSpeed(),\r\n        0\r\n      ) / this.sessions.length\r\n    );\r\n  }\r\n\r\n  getBestSpeed() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return Math.max(\r\n      ...this.sessions.map((session) => session.calculateSpeed())\r\n    );\r\n  }\r\n}\r\n","export const ExerciseType = {\r\n  STRENGTH: \"Strength\",\r\n  CARDIO: \"Cardio\",\r\n  ENDURANCE: \"Endurance\",\r\n};\r\n","export class EnduranceSession {\r\n  constructor(duration, difficulty = null) {\r\n    this.duration = duration; // in seconds\r\n    this.difficulty = difficulty; // subjective rating 1-10\r\n  }\r\n\r\n  calculateIntensity() {\r\n    if (!this.difficulty || !this.duration) return 0;\r\n    return (this.difficulty * this.duration) / 60; // intensity score per minute\r\n  }\r\n}\r\n","import { Exercise } from \"./Exercise.js\";\r\nimport { EnduranceSession } from \"./EnduranceSession.js\";\r\n\r\nexport class EnduranceExercise extends Exercise {\r\n  constructor(id, name, image, description, mediaUrl, type, targetMuscle) {\r\n    super(id, name, image, description, mediaUrl, type);\r\n    this.targetMuscle = targetMuscle; // \"Core\", \"Arms\", \"Legs\", etc.\r\n    this.sessions = [];\r\n  }\r\n\r\n  addSession(duration, difficulty = null) {\r\n    this.sessions.push(new EnduranceSession(duration, difficulty));\r\n  }\r\n\r\n  removeSession(sessionIndex) {\r\n    this.sessions.splice(sessionIndex, 1);\r\n  }\r\n\r\n  getSessions() {\r\n    return this.sessions;\r\n  }\r\n\r\n  updateSession(index, duration, difficulty) {\r\n    this.sessions[index].duration = duration || this.sessions[index].duration;\r\n    this.sessions[index].difficulty =\r\n      difficulty || this.sessions[index].difficulty;\r\n  }\r\n\r\n  getTotalDuration() {\r\n    return this.sessions.reduce(\r\n      (acc, session) => acc + (session.duration || 0),\r\n      0\r\n    );\r\n  }\r\n\r\n  getAverageDuration() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return this.getTotalDuration() / this.sessions.length;\r\n  }\r\n\r\n  getMaxDuration() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return Math.max(...this.sessions.map((session) => session.duration));\r\n  }\r\n\r\n  getAverageDifficulty() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return (\r\n      this.sessions.reduce(\r\n        (acc, session) => acc + (session.difficulty || 0),\r\n        0\r\n      ) / this.sessions.length\r\n    );\r\n  }\r\n\r\n  getTotalIntensity() {\r\n    return this.sessions.reduce(\r\n      (acc, session) => acc + session.calculateIntensity(),\r\n      0\r\n    );\r\n  }\r\n\r\n  getAverageIntensity() {\r\n    if (this.sessions.length === 0) return 0;\r\n    return this.getTotalIntensity() / this.sessions.length;\r\n  }\r\n}\r\n","export class Set {\r\n  constructor(reps, weight = null) {\r\n    this.reps = reps;\r\n    this.weight = weight;\r\n  }\r\n\r\n  calculateOneRepMax() {\r\n    if (!this.weight || !this.reps) return 0;\r\n    return Math.round(this.weight * (1 + this.reps / 30));\r\n  }\r\n}\r\n","import { Exercise } from \"./Exercise.js\";\r\nimport { Set } from \"./Set.js\";\r\n\r\nexport class StrengthExercise extends Exercise {\r\n  constructor(id, name, image, description, mediaUrl, type, bodyPart, sets) {\r\n    super(id, name, image, description, mediaUrl, type);\r\n    this.bodyPart = bodyPart;\r\n    this.sets = sets || [];\r\n  }\r\n\r\n  addSet(reps, weight) {\r\n    this.sets.push(new Set(reps, weight));\r\n  }\r\n\r\n  removeSet(setIndex) {\r\n    this.sets.splice(setIndex, 1);\r\n  }\r\n\r\n  getSets() {\r\n    return this.sets;\r\n  }\r\n\r\n  updateSet(index, reps, weight) {\r\n    this.sets[index].reps = reps || this.sets[index].reps;\r\n    this.sets[index].weight = weight || this.sets[index].weight;\r\n  }\r\n\r\n  getAverageOneRepMax() {\r\n    return (\r\n      this.sets.reduce((acc, val) => acc + val.calculateOneRepMax(), 0) /\r\n      this.sets.length\r\n    );\r\n  }\r\n\r\n  getBestOneRepMax() {\r\n    return Math.max(...this.sets.map((set) => set.calculateOneRepMax()));\r\n  }\r\n\r\n  getMaxWeight() {\r\n    return Math.max(...this.sets.map((set) => set.weight));\r\n  }\r\n\r\n  getTotalWeight() {\r\n    return this.sets.reduce(\r\n      (acc, set) => acc + (set.weight || 0) * set.reps,\r\n      0\r\n    );\r\n  }\r\n}\r\n","import { CardioExercise } from \"../CardioExercise.js\";\r\nimport { ExerciseType } from \"../Constants/ExerciseType.js\";\r\nimport { EnduranceExercise } from \"../EnduranceExercise.js\";\r\nimport { StrengthExercise } from \"../StrengthExercise.js\";\r\n\r\nexport class ExerciseFactory {\r\n  static createExercise(\r\n    type,\r\n    id,\r\n    name,\r\n    image,\r\n    description,\r\n    mediaUrl,\r\n    specificParam\r\n  ) {\r\n    switch (type) {\r\n      case ExerciseType.STRENGTH:\r\n        return this.createStrengthExercise(\r\n          id,\r\n          name,\r\n          image,\r\n          description,\r\n          mediaUrl,\r\n          specificParam\r\n        );\r\n      case ExerciseType.CARDIO:\r\n        return this.createCardioExercise(\r\n          id,\r\n          name,\r\n          image,\r\n          description,\r\n          mediaUrl,\r\n          specificParam\r\n        );\r\n      case ExerciseType.ENDURANCE:\r\n        return this.createEnduranceExercise(\r\n          id,\r\n          name,\r\n          image,\r\n          description,\r\n          mediaUrl,\r\n          specificParam\r\n        );\r\n      default:\r\n        throw new Error(`Неподдерживаемый тип упражнения: ${type}`);\r\n    }\r\n  }\r\n\r\n  static createStrengthExercise(\r\n    id,\r\n    name,\r\n    image,\r\n    description,\r\n    mediaUrl,\r\n    bodyPart,\r\n    sets = []\r\n  ) {\r\n    return new StrengthExercise(\r\n      id,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      ExerciseType.STRENGTH,\r\n      bodyPart,\r\n      sets\r\n    );\r\n  }\r\n\r\n  static createCardioExercise(\r\n    id,\r\n    name,\r\n    image,\r\n    description,\r\n    mediaUrl,\r\n    cardioType\r\n  ) {\r\n    return new CardioExercise(\r\n      id,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      ExerciseType.CARDIO,\r\n      cardioType\r\n    );\r\n  }\r\n\r\n  static createEnduranceExercise(\r\n    id,\r\n    name,\r\n    image,\r\n    description,\r\n    mediaUrl,\r\n    targetMuscle\r\n  ) {\r\n    return new EnduranceExercise(\r\n      id,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      ExerciseType.ENDURANCE,\r\n      targetMuscle\r\n    );\r\n  }\r\n}\r\n","import { ExerciseFactory } from \"../Exercise/Factory/ExerciseFactory.js\";\r\nimport { ExerciseType } from \"../Exercise/Constants/ExerciseType.js\";\r\nimport { StrengthExercise } from \"../Exercise/StrengthExercise.js\";\r\nimport { CardioExercise } from \"../Exercise/CardioExercise.js\";\r\nimport { EnduranceExercise } from \"../Exercise/EnduranceExercise.js\";\r\nimport { Set } from \"../Exercise/Set.js\";\r\nimport { CardioSession } from \"../Exercise/CardioSession.js\";\r\nimport { EnduranceSession } from \"../Exercise/EnduranceSession.js\";\r\n\r\nexport class ExerciseService {\r\n  constructor(storageManager) {\r\n    this.storageManager = storageManager;\r\n    this.exercises = this.storageManager.getExercises() || [];\r\n    \r\n    // Десериализация объектов Exercise из localStorage\r\n    this._deserializeExercises();\r\n  }\r\n\r\n  _deserializeExercises() {\r\n    // Преобразуем простые объекты из localStorage в экземпляры соответствующих классов\r\n    this.exercises = this.exercises.map(exerciseData => {\r\n      let exercise;\r\n      \r\n      if (exerciseData.type === ExerciseType.STRENGTH) {\r\n        exercise = new StrengthExercise(\r\n          exerciseData.id,\r\n          exerciseData.name,\r\n          exerciseData.image,\r\n          exerciseData.description,\r\n          exerciseData.mediaUrl,\r\n          exerciseData.type,\r\n          exerciseData.bodyPart,\r\n          []\r\n        );\r\n        \r\n        // Добавляем сеты\r\n        if (exerciseData.sets && exerciseData.sets.length) {\r\n          exerciseData.sets.forEach(set => {\r\n            exercise.addSet(set.reps, set.weight);\r\n          });\r\n        }\r\n      } \r\n      else if (exerciseData.type === ExerciseType.CARDIO) {\r\n        exercise = new CardioExercise(\r\n          exerciseData.id,\r\n          exerciseData.name,\r\n          exerciseData.image,\r\n          exerciseData.description,\r\n          exerciseData.mediaUrl,\r\n          exerciseData.type,\r\n          exerciseData.cardioType\r\n        );\r\n        \r\n        // Добавляем кардио сессии\r\n        if (exerciseData.sessions && exerciseData.sessions.length) {\r\n          exerciseData.sessions.forEach(session => {\r\n            exercise.addSession(session.duration, session.distance, session.caloriesBurned);\r\n          });\r\n        }\r\n      } \r\n      else if (exerciseData.type === ExerciseType.ENDURANCE) {\r\n        exercise = new EnduranceExercise(\r\n          exerciseData.id,\r\n          exerciseData.name,\r\n          exerciseData.image,\r\n          exerciseData.description,\r\n          exerciseData.mediaUrl,\r\n          exerciseData.type,\r\n          exerciseData.targetMuscle\r\n        );\r\n        \r\n        // Добавляем сессии на выносливость\r\n        if (exerciseData.sessions && exerciseData.sessions.length) {\r\n          exerciseData.sessions.forEach(session => {\r\n            exercise.addSession(session.duration, session.difficulty);\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Восстанавливаем заметки\r\n      if (exerciseData.notes && exerciseData.notes.length) {\r\n        exerciseData.notes.forEach(note => {\r\n          exercise.addNote(note);\r\n        });\r\n      }\r\n      \r\n      return exercise;\r\n    });\r\n  }\r\n\r\n  _saveExercises() {\r\n    this.storageManager.saveExercises(this.exercises);\r\n  }\r\n\r\n  generateExerciseId() {\r\n    if (!this.exercises.length) return 0;\r\n    return Math.max(...this.exercises.map(exercise => exercise.id)) + 1;\r\n  }\r\n\r\n  createStrengthExercise(name, image, description, mediaUrl, bodyPart) {\r\n    const id = this.generateExerciseId();\r\n    const newExercise = ExerciseFactory.createStrengthExercise(\r\n      id,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      bodyPart\r\n    );\r\n\r\n    this.exercises.push(newExercise);\r\n    this._saveExercises();\r\n    return newExercise;\r\n  }\r\n\r\n  createCardioExercise(name, image, description, mediaUrl, cardioType) {\r\n    const id = this.generateExerciseId();\r\n    const newExercise = ExerciseFactory.createCardioExercise(\r\n      id,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      cardioType\r\n    );\r\n\r\n    this.exercises.push(newExercise);\r\n    this._saveExercises();\r\n    return newExercise;\r\n  }\r\n\r\n  createEnduranceExercise(name, image, description, mediaUrl, targetMuscle) {\r\n    const id = this.generateExerciseId();\r\n    const newExercise = ExerciseFactory.createEnduranceExercise(\r\n      id,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      targetMuscle\r\n    );\r\n\r\n    this.exercises.push(newExercise);\r\n    this._saveExercises();\r\n    return newExercise;\r\n  }\r\n\r\n  createGenericExercise(\r\n    type,\r\n    name,\r\n    image,\r\n    description,\r\n    mediaUrl,\r\n    specificParam\r\n  ) {\r\n    const id = this.generateExerciseId();\r\n    const newExercise = ExerciseFactory.createExercise(\r\n      type,\r\n      id,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      specificParam\r\n    );\r\n\r\n    this.exercises.push(newExercise);\r\n    this._saveExercises();\r\n    return newExercise;\r\n  }\r\n\r\n  removeExercise(exerciseId) {\r\n    this.exercises = this.exercises.filter(\r\n      (exercise) => exercise.id !== exerciseId\r\n    );\r\n    this._saveExercises();\r\n  }\r\n\r\n  getExerciseById(exerciseId) {\r\n    return this.exercises.find((exercise) => exercise.id === exerciseId);\r\n  }\r\n\r\n  getAllExercises() {\r\n    return this.exercises;\r\n  }\r\n}","export class ExerciseStrategy {\r\n  copyExercise(exercise) {\r\n    throw new Error(\"Method must be implemented by concrete strategy\");\r\n  }\r\n\r\n  addTrackingData(exercise, data) {\r\n    throw new Error(\"Method must be implemented by concrete strategy\");\r\n  }\r\n\r\n  updateTrackingData(exercise, index, data) {\r\n    throw new Error(\"Method must be implemented by concrete strategy\");\r\n  }\r\n\r\n  getStatistics(exercise) {\r\n    throw new Error(\"Method must be implemented by concrete strategy\");\r\n  }\r\n\r\n  calculateProgress(firstExercise, lastExercise) {\r\n    throw new Error(\"Method must be implemented by concrete strategy\");\r\n  }\r\n\r\n  hasChanges(exercise, planExercise) {\r\n    throw new Error(\"Method must be implemented by concrete strategy\");\r\n  }\r\n\r\n  updatePlanData(source, target) {\r\n    throw new Error(\"Method must be implemented by concrete strategy\");\r\n  }\r\n}\r\n","import { ExerciseStrategy } from \"./ExerciseStrategy.js\";\r\nimport { StrengthExercise } from \"../StrengthExercise.js\";\r\n\r\nexport class StrengthExerciseStrategy extends ExerciseStrategy {\r\n  copyExercise(exercise) {\r\n    const newExercise = new StrengthExercise(\r\n      exercise.id,\r\n      exercise.name,\r\n      exercise.image,\r\n      exercise.description,\r\n      exercise.mediaUrl,\r\n      exercise.type,\r\n      exercise.bodyPart,\r\n      []\r\n    );\r\n\r\n    const sets = exercise.getSets\r\n      ? exercise.getSets()\r\n      : Array.isArray(exercise.sets)\r\n      ? exercise.sets\r\n      : [];\r\n\r\n    if (sets && sets.length) {\r\n      sets.forEach((set) => {\r\n        if (\r\n          set &&\r\n          typeof set === \"object\" &&\r\n          \"reps\" in set &&\r\n          \"weight\" in set\r\n        ) {\r\n          newExercise.addSet(set.reps, set.weight);\r\n        }\r\n      });\r\n    }\r\n\r\n    return newExercise;\r\n  }\r\n\r\n  addTrackingData(exercise, data) {\r\n    if (!data.reps || !data.weight) {\r\n      throw new Error(\"Reps and weight required for strength exercise\");\r\n    }\r\n    exercise.addSet(data.reps, data.weight);\r\n  }\r\n\r\n  updateTrackingData(exercise, index, data) {\r\n    if (!exercise.sets[index]) {\r\n      throw new Error(`Set at index ${index} not found`);\r\n    }\r\n    exercise.updateSet(index, data.reps, data.weight);\r\n  }\r\n\r\n  getStatistics(exercise) {\r\n    return {\r\n      totalWeight: exercise.getTotalWeight(),\r\n      bestOneRepMax: exercise.getBestOneRepMax(),\r\n      maxWeight: exercise.getMaxWeight(),\r\n    };\r\n  }\r\n\r\n  calculateProgress(firstExercise, lastExercise) {\r\n    return {\r\n      bestOneReMaxProgress:\r\n        lastExercise.getBestOneRepMax() - firstExercise.getBestOneRepMax(),\r\n      maxWeightProgress:\r\n        lastExercise.getMaxWeight() - firstExercise.getMaxWeight(),\r\n      totalWeightProgress:\r\n        lastExercise.getTotalWeight() - firstExercise.getTotalWeight(),\r\n    };\r\n  }\r\n\r\n  hasChanges(exercise, planExercise) {\r\n    if (exercise.sets.length !== planExercise.sets.length) return true;\r\n\r\n    for (let i = 0; i < exercise.sets.length; i++) {\r\n      if (\r\n        exercise.sets[i].reps !== planExercise.sets[i].reps ||\r\n        exercise.sets[i].weight !== planExercise.sets[i].weight\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  updatePlanData(source, target) {\r\n    target.sets = [];\r\n\r\n    for (const set of source.sets) {\r\n      target.addSet(set.reps, set.weight);\r\n    }\r\n  }\r\n}\r\n","import { ExerciseStrategy } from \"./ExerciseStrategy.js\";\r\nimport { CardioExercise } from \"../CardioExercise.js\";\r\n\r\nexport class CardioExerciseStrategy extends ExerciseStrategy {\r\n  copyExercise(exercise) {\r\n    const newExercise = new CardioExercise(\r\n      exercise.id,\r\n      exercise.name,\r\n      exercise.image,\r\n      exercise.description,\r\n      exercise.mediaUrl,\r\n      exercise.type,\r\n      exercise.cardioType\r\n    );\r\n\r\n    const sessions = exercise.getSessions\r\n      ? exercise.getSessions()\r\n      : Array.isArray(exercise.sessions)\r\n      ? exercise.sessions\r\n      : [];\r\n\r\n    if (sessions && sessions.length) {\r\n      sessions.forEach((session) => {\r\n        if (session && typeof session === \"object\") {\r\n          newExercise.addSession(\r\n            session.duration,\r\n            session.distance,\r\n            session.caloriesBurned\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    return newExercise;\r\n  }\r\n\r\n  addTrackingData(exercise, data) {\r\n    if (!data.duration || !data.distance) {\r\n      throw new Error(\"Duration and distance required for cardio exercise\");\r\n    }\r\n    exercise.addSession(data.duration, data.distance, data.caloriesBurned);\r\n  }\r\n\r\n  updateTrackingData(exercise, index, data) {\r\n    if (!exercise.sessions[index]) {\r\n      throw new Error(`Session at index ${index} not found`);\r\n    }\r\n    exercise.updateSession(\r\n      index,\r\n      data.duration,\r\n      data.distance,\r\n      data.caloriesBurned\r\n    );\r\n  }\r\n\r\n  getStatistics(exercise) {\r\n    return {\r\n      totalDistance: exercise.getTotalDistance(),\r\n      totalDuration: exercise.getTotalDuration(),\r\n      bestPace: exercise.getBestPace(),\r\n      averagePace: exercise.getAveragePace(),\r\n      bestSpeed: exercise.getBestSpeed(),\r\n      averageSpeed: exercise.getAverageSpeed(),\r\n      totalCalories: exercise.getTotalCalories(),\r\n    };\r\n  }\r\n\r\n  calculateProgress(firstExercise, lastExercise) {\r\n    return {\r\n      totalDistanceProgress:\r\n        lastExercise.getTotalDistance() - firstExercise.getTotalDistance(),\r\n      totalDurationProgress:\r\n        lastExercise.getTotalDuration() - firstExercise.getTotalDuration(),\r\n      bestPaceProgress:\r\n        lastExercise.getBestPace() - firstExercise.getBestPace(),\r\n      bestSpeedProgress:\r\n        lastExercise.getBestSpeed() - firstExercise.getBestSpeed(),\r\n      totalCaloriesProgress:\r\n        lastExercise.getTotalCalories() - firstExercise.getTotalCalories(),\r\n    };\r\n  }\r\n\r\n  hasChanges(exercise, planExercise) {\r\n    if (exercise.sessions.length !== planExercise.sessions.length) return true;\r\n\r\n    for (let i = 0; i < exercise.sessions.length; i++) {\r\n      if (\r\n        exercise.sessions[i].duration !== planExercise.sessions[i].duration ||\r\n        exercise.sessions[i].distance !== planExercise.sessions[i].distance ||\r\n        exercise.sessions[i].caloriesBurned !==\r\n          planExercise.sessions[i].caloriesBurned\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  updatePlanData(source, target) {\r\n    target.sessions = [];\r\n\r\n    for (const session of source.sessions) {\r\n      target.addSession(\r\n        session.duration,\r\n        session.distance,\r\n        session.caloriesBurned\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { ExerciseStrategy } from \"./ExerciseStrategy.js\";\r\nimport { EnduranceExercise } from \"../EnduranceExercise.js\";\r\n\r\nexport class EnduranceExerciseStrategy extends ExerciseStrategy {\r\n  copyExercise(exercise) {\r\n    const newExercise = new EnduranceExercise(\r\n      exercise.id,\r\n      exercise.name,\r\n      exercise.image,\r\n      exercise.description,\r\n      exercise.mediaUrl,\r\n      exercise.type,\r\n      exercise.targetMuscle\r\n    );\r\n\r\n    const sessions = exercise.getSessions\r\n      ? exercise.getSessions()\r\n      : Array.isArray(exercise.sessions)\r\n      ? exercise.sessions\r\n      : [];\r\n\r\n    if (sessions && sessions.length) {\r\n      sessions.forEach((session) => {\r\n        if (session && typeof session === \"object\") {\r\n          newExercise.addSession(session.duration, session.difficulty);\r\n        }\r\n      });\r\n    }\r\n\r\n    return newExercise;\r\n  }\r\n\r\n  addTrackingData(exercise, data) {\r\n    if (!data.duration) {\r\n      throw new Error(\"Duration required for endurance exercise\");\r\n    }\r\n    exercise.addSession(data.duration, data.difficulty);\r\n  }\r\n\r\n  updateTrackingData(exercise, index, data) {\r\n    if (!exercise.sessions[index]) {\r\n      throw new Error(`Session at index ${index} not found`);\r\n    }\r\n    exercise.updateSession(index, data.duration, data.difficulty);\r\n  }\r\n\r\n  getStatistics(exercise) {\r\n    return {\r\n      totalDuration: exercise.getTotalDuration(),\r\n      maxDuration: exercise.getMaxDuration(),\r\n      averageDifficulty: exercise.getAverageDifficulty(),\r\n      totalIntensity: exercise.getTotalIntensity(),\r\n      averageIntensity: exercise.getAverageIntensity(),\r\n    };\r\n  }\r\n\r\n  calculateProgress(firstExercise, lastExercise) {\r\n    return {\r\n      totalDurationProgress:\r\n        lastExercise.getTotalDuration() - firstExercise.getTotalDuration(),\r\n      maxDurationProgress:\r\n        lastExercise.getMaxDuration() - firstExercise.getMaxDuration(),\r\n      averageDifficultyProgress:\r\n        lastExercise.getAverageDifficulty() -\r\n        firstExercise.getAverageDifficulty(),\r\n      totalIntensityProgress:\r\n        lastExercise.getTotalIntensity() - firstExercise.getTotalIntensity(),\r\n    };\r\n  }\r\n\r\n  hasChanges(exercise, planExercise) {\r\n    if (exercise.sessions.length !== planExercise.sessions.length) return true;\r\n\r\n    for (let i = 0; i < exercise.sessions.length; i++) {\r\n      if (\r\n        exercise.sessions[i].duration !== planExercise.sessions[i].duration ||\r\n        exercise.sessions[i].difficulty !== planExercise.sessions[i].difficulty\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  updatePlanData(source, target) {\r\n    target.sessions = [];\r\n\r\n    for (const session of source.sessions) {\r\n      target.addSession(session.duration, session.difficulty);\r\n    }\r\n  }\r\n}\r\n","import { ExerciseType } from \"../Constants/ExerciseType.js\";\r\nimport { StrengthExerciseStrategy } from \"./StrengthExerciseStrategy.js\";\r\nimport { CardioExerciseStrategy } from \"./CardioExerciseStrategy.js\";\r\nimport { EnduranceExerciseStrategy } from \"./EnduranceExerciseStrategy.js\";\r\n\r\nexport class ExerciseStrategyFactory {\r\n  constructor() {\r\n    this.strategies = {\r\n      [ExerciseType.STRENGTH]: new StrengthExerciseStrategy(),\r\n      [ExerciseType.CARDIO]: new CardioExerciseStrategy(),\r\n      [ExerciseType.ENDURANCE]: new EnduranceExerciseStrategy(),\r\n    };\r\n  }\r\n\r\n  getStrategy(exerciseType) {\r\n    const strategy = this.strategies[exerciseType];\r\n    if (!strategy) {\r\n      throw new Error(`No strategy found for exercise type: ${exerciseType}`);\r\n    }\r\n    return strategy;\r\n  }\r\n\r\n  registerStrategy(exerciseType, strategy) {\r\n    this.strategies[exerciseType] = strategy;\r\n  }\r\n}\r\n","import { StrengthExercise } from \"../Exercise/StrengthExercise.js\";\r\nimport { CardioExercise } from \"../Exercise/CardioExercise.js\";\r\nimport { EnduranceExercise } from \"../Exercise/EnduranceExercise.js\";\r\nimport { ExerciseType } from \"../Exercise/Constants/ExerciseType.js\";\r\nimport { ExerciseStrategyFactory } from \"../Exercise/Strategies/ExerciseStrategyFactory.js\";\r\n\r\nexport class WorkoutPlan {\r\n  constructor(id, ownerId, name, description, exercises) {\r\n    this.id = id;\r\n    this.ownerId = ownerId;\r\n    this.name = name;\r\n    this.description = description || \"\";\r\n    this.exercises = [];\r\n    this.notes = [];\r\n\r\n    // Создаем фабрику стратегий\r\n    this.strategyFactory = new ExerciseStrategyFactory();\r\n  }\r\n\r\n  updateWorkoutPlan(name, description) {\r\n    this.name = name || this.name;\r\n    this.description = description || this.description;\r\n  }\r\n\r\n  addExercise(exercise) {\r\n    try {\r\n      const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n      const newExercise = strategy.copyExercise(exercise);\r\n      this.exercises.push(newExercise);\r\n      return newExercise;\r\n    } catch (error) {\r\n      throw new Error(`Failed to add exercise: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  getExerciseById(exerciseId) {\r\n    return this.exercises.find((ex) => ex.id === exerciseId);\r\n  }\r\n\r\n  addTrackingData(exerciseId, data) {\r\n    const exercise = this.getExerciseById(exerciseId);\r\n    if (!exercise) {\r\n      throw new Error(`Exercise with id ${exerciseId} not found`);\r\n    }\r\n\r\n    const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n    strategy.addTrackingData(exercise, data);\r\n    return exercise;\r\n  }\r\n\r\n  // Методы-обёртки для обратной совместимости\r\n  addSetToExercise(exerciseId, reps, weight) {\r\n    return this.addTrackingData(exerciseId, { reps, weight });\r\n  }\r\n\r\n  addSessionToExercise(exerciseId, duration, distance, caloriesBurned = null) {\r\n    return this.addTrackingData(exerciseId, {\r\n      duration,\r\n      distance,\r\n      caloriesBurned,\r\n    });\r\n  }\r\n\r\n  addEnduranceSessionToExercise(exerciseId, duration, difficulty = null) {\r\n    return this.addTrackingData(exerciseId, { duration, difficulty });\r\n  }\r\n\r\n  updateTrackingData(exerciseId, index, data) {\r\n    const exercise = this.getExerciseById(exerciseId);\r\n    if (!exercise) {\r\n      throw new Error(`Exercise with id ${exerciseId} not found`);\r\n    }\r\n\r\n    const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n    strategy.updateTrackingData(exercise, index, data);\r\n  }\r\n\r\n  // Методы-обёртки для обратной совместимости\r\n  updateSetInExercise(exerciseId, setIndex, reps, weight) {\r\n    return this.updateTrackingData(exerciseId, setIndex, { reps, weight });\r\n  }\r\n\r\n  updateSessionInExercise(\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    distance,\r\n    caloriesBurned\r\n  ) {\r\n    return this.updateTrackingData(exerciseId, sessionIndex, {\r\n      duration,\r\n      distance,\r\n      caloriesBurned,\r\n    });\r\n  }\r\n\r\n  updateEnduranceSessionInExercise(\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    difficulty\r\n  ) {\r\n    return this.updateTrackingData(exerciseId, sessionIndex, {\r\n      duration,\r\n      difficulty,\r\n    });\r\n  }\r\n\r\n  removeExercise(exerciseId) {\r\n    this.exercises = this.exercises.filter(\r\n      (exercise) => exercise.id !== exerciseId\r\n    );\r\n  }\r\n\r\n  removeTrackingData(exerciseId, index) {\r\n    const exercise = this.getExerciseById(exerciseId);\r\n    if (!exercise) {\r\n      throw new Error(`Exercise with id ${exerciseId} not found`);\r\n    }\r\n\r\n    const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n\r\n    if (exercise.type === \"Strength\" && exercise.sets) {\r\n      exercise.sets.splice(index, 1);\r\n    } else if (\r\n      (exercise.type === \"Cardio\" || exercise.type === \"Endurance\") &&\r\n      exercise.sessions\r\n    ) {\r\n      exercise.sessions.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  // Методы-обёртки для обратной совместимости\r\n  removeSetFromExercise(exerciseId, setIndex) {\r\n    return this.removeTrackingData(exerciseId, setIndex);\r\n  }\r\n\r\n  removeSessionFromExercise(exerciseId, sessionIndex) {\r\n    return this.removeTrackingData(exerciseId, sessionIndex);\r\n  }\r\n\r\n  removeEnduranceSessionFromExercise(exerciseId, sessionIndex) {\r\n    return this.removeTrackingData(exerciseId, sessionIndex);\r\n  }\r\n\r\n  addNote(note) {\r\n    this.notes.push(note);\r\n  }\r\n\r\n  removeNote(noteIndex) {\r\n    this.notes.splice(noteIndex, 1);\r\n  }\r\n}\r\n","import { ExerciseType } from \"../Exercise/Constants/ExerciseType.js\";\r\nimport { WorkoutPlan } from \"../WorkoutPlan/WorkoutPlan.js\";\r\nimport { ExerciseStrategyFactory } from \"../Exercise/Strategies/ExerciseStrategyFactory.js\";\r\n\r\nexport class WorkoutPlanService {\r\n  constructor(exerciseService, storageManager) {\r\n    this.exerciseService = exerciseService;\r\n    this.storageManager = storageManager;\r\n    this.workoutPlans = this.storageManager.getWorkoutPlans() || [];\r\n    this.strategyFactory = new ExerciseStrategyFactory();\r\n    \r\n    // Десериализация объектов WorkoutPlan из localStorage\r\n    this._deserializeWorkoutPlans();\r\n  }\r\n\r\n  _deserializeWorkoutPlans() {\r\n    // Преобразуем простые объекты из localStorage в экземпляры класса WorkoutPlan\r\n    this.workoutPlans = this.workoutPlans.map(planData => {\r\n      const workoutPlan = new WorkoutPlan(\r\n        planData.id,\r\n        planData.ownerId,\r\n        planData.name,\r\n        planData.description\r\n      );\r\n      \r\n      // Восстанавливаем заметки\r\n      if (planData.notes && planData.notes.length) {\r\n        planData.notes.forEach(note => {\r\n          workoutPlan.addNote(note);\r\n        });\r\n      }\r\n      \r\n      // Восстанавливаем упражнения\r\n      if (planData.exercises && planData.exercises.length) {\r\n        planData.exercises.forEach(exerciseData => {\r\n          // Получаем исходное упражнение из сервиса упражнений\r\n          const originalExercise = this.exerciseService.getExerciseById(exerciseData.id);\r\n          if (originalExercise) {\r\n            // Добавляем упражнение в план\r\n            const planExercise = workoutPlan.addExercise(originalExercise);\r\n            \r\n            // Добавляем данные отслеживания в зависимости от типа упражнения\r\n            if (exerciseData.type === ExerciseType.STRENGTH && exerciseData.sets) {\r\n              exerciseData.sets.forEach(set => {\r\n                workoutPlan.addSetToExercise(exerciseData.id, set.reps, set.weight);\r\n              });\r\n            } \r\n            else if (exerciseData.type === ExerciseType.CARDIO && exerciseData.sessions) {\r\n              exerciseData.sessions.forEach(session => {\r\n                workoutPlan.addSessionToExercise(\r\n                  exerciseData.id,\r\n                  session.duration,\r\n                  session.distance,\r\n                  session.caloriesBurned\r\n                );\r\n              });\r\n            }\r\n            else if (exerciseData.type === ExerciseType.ENDURANCE && exerciseData.sessions) {\r\n              exerciseData.sessions.forEach(session => {\r\n                workoutPlan.addEnduranceSessionToExercise(\r\n                  exerciseData.id,\r\n                  session.duration,\r\n                  session.difficulty\r\n                );\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n      \r\n      return workoutPlan;\r\n    });\r\n  }\r\n\r\n  _saveWorkoutPlans() {\r\n    this.storageManager.saveWorkoutPlans(this.workoutPlans);\r\n  }\r\n\r\n  generateWorkoutPlanId() {\r\n    if (!this.workoutPlans.length) return 0;\r\n    return Math.max(...this.workoutPlans.map(plan => plan.id)) + 1;\r\n  }\r\n\r\n  createWorkoutPlan(ownerId, name, description) {\r\n    const id = this.generateWorkoutPlanId();\r\n    const workoutPlan = new WorkoutPlan(id, ownerId, name, description);\r\n\r\n    this.workoutPlans.push(workoutPlan);\r\n    this._saveWorkoutPlans();\r\n    return workoutPlan;\r\n  }\r\n\r\n  deleteWorkoutPlan(workoutPlanId) {\r\n    this.workoutPlans = this.workoutPlans.filter(\r\n      (workoutPlan) => workoutPlan.id !== workoutPlanId\r\n    );\r\n    this._saveWorkoutPlans();\r\n  }\r\n\r\n  addExerciseToWorkoutPlan(workoutPlanId, exerciseId) {\r\n    const workoutPlan = this.getWorkoutPlanById(workoutPlanId);\r\n    const exercise = this.exerciseService.getExerciseById(exerciseId);\r\n\r\n    if (!workoutPlan) {\r\n      throw new Error(`План тренировки с ID ${workoutPlanId} не найден`);\r\n    }\r\n\r\n    if (!exercise) {\r\n      throw new Error(`Упражнение с ID ${exerciseId} не найдено`);\r\n    }\r\n\r\n    workoutPlan.addExercise(exercise);\r\n    this._saveWorkoutPlans();\r\n    return workoutPlan;\r\n  }\r\n\r\n  removeExerciseFromWorkoutPlan(workoutPlanId, exerciseId) {\r\n    const workoutPlan = this.getWorkoutPlanById(workoutPlanId);\r\n\r\n    if (!workoutPlan) {\r\n      throw new Error(`План тренировки с ID ${workoutPlanId} не найден`);\r\n    }\r\n\r\n    workoutPlan.removeExercise(exerciseId);\r\n    this._saveWorkoutPlans();\r\n    return workoutPlan;\r\n  }\r\n\r\n  addTrackingDataToExercise(workoutPlanId, exerciseId, data) {\r\n    const workoutPlan = this.getWorkoutPlanById(workoutPlanId);\r\n\r\n    if (!workoutPlan) {\r\n      throw new Error(`План тренировки с ID ${workoutPlanId} не найден`);\r\n    }\r\n\r\n    const exercise = workoutPlan.exercises.find(\r\n      (exercise) => exercise.id === exerciseId\r\n    );\r\n\r\n    if (!exercise) {\r\n      throw new Error(`Упражнение с ID ${exerciseId} не найдено в плане`);\r\n    }\r\n\r\n    try {\r\n      const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n      strategy.addTrackingData(exercise, data);\r\n      this._saveWorkoutPlans();\r\n      return exercise;\r\n    } catch (error) {\r\n      throw new Error(`Ошибка добавления данных: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  addSetToExerciseInWorkoutPlan(workoutPlanId, exerciseId, reps, weight) {\r\n    return this.addTrackingDataToExercise(workoutPlanId, exerciseId, {\r\n      reps,\r\n      weight,\r\n    });\r\n  }\r\n\r\n  addSessionToExerciseInWorkoutPlan(\r\n    workoutPlanId,\r\n    exerciseId,\r\n    duration,\r\n    distance,\r\n    caloriesBurned = null\r\n  ) {\r\n    return this.addTrackingDataToExercise(workoutPlanId, exerciseId, {\r\n      duration,\r\n      distance,\r\n      caloriesBurned,\r\n    });\r\n  }\r\n\r\n  addEnduranceSessionToExerciseInWorkoutPlan(\r\n    workoutPlanId,\r\n    exerciseId,\r\n    duration,\r\n    difficulty = null\r\n  ) {\r\n    return this.addTrackingDataToExercise(workoutPlanId, exerciseId, {\r\n      duration,\r\n      difficulty,\r\n    });\r\n  }\r\n\r\n  updateTrackingDataInExercise(workoutPlanId, exerciseId, index, data) {\r\n    const workoutPlan = this.getWorkoutPlanById(workoutPlanId);\r\n\r\n    if (!workoutPlan) {\r\n      throw new Error(`План тренировки с ID ${workoutPlanId} не найден`);\r\n    }\r\n\r\n    const exercise = workoutPlan.exercises.find(\r\n      (exercise) => exercise.id === exerciseId\r\n    );\r\n\r\n    if (!exercise) {\r\n      throw new Error(`Упражнение с ID ${exerciseId} не найдено в плане`);\r\n    }\r\n\r\n    try {\r\n      const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n      strategy.updateTrackingData(exercise, index, data);\r\n      this._saveWorkoutPlans();\r\n      return exercise;\r\n    } catch (error) {\r\n      throw new Error(`Ошибка обновления данных: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  updateSetInExercise(workoutPlanId, exerciseId, setIndex, reps, weight) {\r\n    return this.updateTrackingDataInExercise(\r\n      workoutPlanId,\r\n      exerciseId,\r\n      setIndex,\r\n      { reps, weight }\r\n    );\r\n  }\r\n\r\n  updateSessionInExercise(\r\n    workoutPlanId,\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    distance,\r\n    caloriesBurned\r\n  ) {\r\n    return this.updateTrackingDataInExercise(\r\n      workoutPlanId,\r\n      exerciseId,\r\n      sessionIndex,\r\n      { duration, distance, caloriesBurned }\r\n    );\r\n  }\r\n\r\n  updateEnduranceSessionInExercise(\r\n    workoutPlanId,\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    difficulty\r\n  ) {\r\n    return this.updateTrackingDataInExercise(\r\n      workoutPlanId,\r\n      exerciseId,\r\n      sessionIndex,\r\n      { duration, difficulty }\r\n    );\r\n  }\r\n\r\n  removeTrackingDataFromExercise(workoutPlanId, exerciseId, index) {\r\n    const workoutPlan = this.getWorkoutPlanById(workoutPlanId);\r\n\r\n    if (!workoutPlan) {\r\n      throw new Error(`План тренировки с ID ${workoutPlanId} не найден`);\r\n    }\r\n\r\n    workoutPlan.removeTrackingData(exerciseId, index);\r\n    this._saveWorkoutPlans();\r\n    return workoutPlan;\r\n  }\r\n\r\n  removeSetFromExercise(workoutPlanId, exerciseId, setIndex) {\r\n    return this.removeTrackingDataFromExercise(\r\n      workoutPlanId,\r\n      exerciseId,\r\n      setIndex\r\n    );\r\n  }\r\n\r\n  removeSessionFromExercise(workoutPlanId, exerciseId, sessionIndex) {\r\n    return this.removeTrackingDataFromExercise(\r\n      workoutPlanId,\r\n      exerciseId,\r\n      sessionIndex\r\n    );\r\n  }\r\n\r\n  getWorkoutPlanById(workoutPlanId) {\r\n    return this.workoutPlans.find(\r\n      (workoutPlan) => workoutPlan.id === workoutPlanId\r\n    );\r\n  }\r\n\r\n  getWorkoutPlansForUser(userId) {\r\n    return this.workoutPlans.filter((plan) => plan.ownerId === userId);\r\n  }\r\n\r\n  getAllWorkoutPlans() {\r\n    return this.workoutPlans;\r\n  }\r\n}","import { ExerciseType } from \"../Exercise/Constants/ExerciseType.js\";\r\nimport { ExerciseStrategyFactory } from \"../Exercise/Strategies/ExerciseStrategyFactory.js\";\r\n\r\nexport class Workout {\r\n  constructor(id, ownerId, date, plan = null) {\r\n    this.id = id;\r\n    this.ownerId = ownerId;\r\n    this.date = date || new Date();\r\n    this.plan = plan;\r\n    this.exercises = [];\r\n\r\n    this.strategyFactory = new ExerciseStrategyFactory();\r\n\r\n    if (plan && plan.exercises) {\r\n      this.exercises = plan.exercises\r\n        .map((ex) => {\r\n          try {\r\n            const strategy = this.strategyFactory.getStrategy(ex.type);\r\n            return strategy.copyExercise(ex);\r\n          } catch (error) {\r\n            console.error(`Error copying exercise: ${error.message}`);\r\n            return null;\r\n          }\r\n        })\r\n        .filter((ex) => ex !== null);\r\n    }\r\n  }\r\n\r\n  addExercise(exercise) {\r\n    try {\r\n      const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n      const newExercise = strategy.copyExercise(exercise);\r\n      this.exercises.push(newExercise);\r\n      return newExercise;\r\n    } catch (error) {\r\n      throw new Error(`Failed to add exercise: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  getExerciseById(exerciseId) {\r\n    return this.exercises.find((ex) => ex.id === exerciseId);\r\n  }\r\n\r\n  recordTrackingData(exerciseId, data) {\r\n    const exercise = this.getExerciseById(exerciseId);\r\n    if (!exercise) {\r\n      throw new Error(`Exercise with id ${exerciseId} not found`);\r\n    }\r\n\r\n    const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n    strategy.addTrackingData(exercise, data);\r\n  }\r\n\r\n  recordSet(exerciseId, reps, weight) {\r\n    return this.recordTrackingData(exerciseId, { reps, weight });\r\n  }\r\n\r\n  recordCardioSession(exerciseId, duration, distance, caloriesBurned = null) {\r\n    return this.recordTrackingData(exerciseId, {\r\n      duration,\r\n      distance,\r\n      caloriesBurned,\r\n    });\r\n  }\r\n\r\n  recordEnduranceSession(exerciseId, duration, difficulty = null) {\r\n    return this.recordTrackingData(exerciseId, { duration, difficulty });\r\n  }\r\n\r\n  updateTrackingData(exerciseId, index, data) {\r\n    const exercise = this.getExerciseById(exerciseId);\r\n    if (!exercise) {\r\n      throw new Error(`Exercise with id ${exerciseId} not found`);\r\n    }\r\n\r\n    const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n    strategy.updateTrackingData(exercise, index, data);\r\n  }\r\n\r\n  updateSet(exerciseId, setIndex, reps, weight) {\r\n    return this.updateTrackingData(exerciseId, setIndex, { reps, weight });\r\n  }\r\n\r\n  updateCardioSession(\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    distance,\r\n    caloriesBurned\r\n  ) {\r\n    return this.updateTrackingData(exerciseId, sessionIndex, {\r\n      duration,\r\n      distance,\r\n      caloriesBurned,\r\n    });\r\n  }\r\n\r\n  updateEnduranceSession(exerciseId, sessionIndex, duration, difficulty) {\r\n    return this.updateTrackingData(exerciseId, sessionIndex, {\r\n      duration,\r\n      difficulty,\r\n    });\r\n  }\r\n\r\n  getTotalStatisticByType(exerciseType, statName) {\r\n    return this.exercises\r\n      .filter((ex) => ex.type === exerciseType)\r\n      .reduce((total, exercise) => {\r\n        const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n        const stats = strategy.getStatistics(exercise);\r\n        return total + (stats[statName] || 0);\r\n      }, 0);\r\n  }\r\n\r\n  getTotalWeight() {\r\n    return this.getTotalStatisticByType(ExerciseType.STRENGTH, \"totalWeight\");\r\n  }\r\n\r\n  getTotalDistance() {\r\n    return this.getTotalStatisticByType(ExerciseType.CARDIO, \"totalDistance\");\r\n  }\r\n\r\n  getTotalDuration() {\r\n    return this.getTotalStatisticByType(ExerciseType.CARDIO, \"totalDuration\");\r\n  }\r\n\r\n  getTotalCalories() {\r\n    return this.getTotalStatisticByType(ExerciseType.CARDIO, \"totalCalories\");\r\n  }\r\n\r\n  getTotalEnduranceDuration() {\r\n    return this.getTotalStatisticByType(\r\n      ExerciseType.ENDURANCE,\r\n      \"totalDuration\"\r\n    );\r\n  }\r\n\r\n  getMaxEnduranceDuration() {\r\n    const durations = this.exercises\r\n      .filter((ex) => ex.type === ExerciseType.ENDURANCE)\r\n      .map((exercise) => {\r\n        const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n        const stats = strategy.getStatistics(exercise);\r\n        return stats.maxDuration || 0;\r\n      });\r\n\r\n    return durations.length ? Math.max(...durations) : 0;\r\n  }\r\n\r\n  getTotalEnduranceIntensity() {\r\n    return this.getTotalStatisticByType(\r\n      ExerciseType.ENDURANCE,\r\n      \"totalIntensity\"\r\n    );\r\n  }\r\n\r\n  hasChangesFromPlan() {\r\n    if (!this.plan) return false;\r\n\r\n    if (this.plan.exercises.length > this.exercises.length) return true;\r\n\r\n    for (const exercise of this.exercises) {\r\n      const planExercise = this.plan.exercises.find(\r\n        (ex) => ex.id === exercise.id\r\n      );\r\n\r\n      if (!planExercise) return true;\r\n\r\n      const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n      if (strategy.hasChanges(exercise, planExercise)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  updatePlanSets() {\r\n    if (!this.plan) return false;\r\n\r\n    for (const exercise of this.exercises) {\r\n      const planExercise = this.plan.exercises.find(\r\n        (ex) => ex.id === exercise.id\r\n      );\r\n\r\n      if (planExercise) {\r\n        const strategy = this.strategyFactory.getStrategy(exercise.type);\r\n        strategy.updatePlanData(exercise, planExercise);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import { Workout } from \"../Workout/Workout.js\";\r\n\r\nexport class WorkoutService {\r\n  constructor(exerciseService, workoutPlanService, storageManager) {\r\n    this.exerciseService = exerciseService;\r\n    this.workoutPlanService = workoutPlanService;\r\n    this.storageManager = storageManager;\r\n    this.workouts = this.storageManager.getWorkouts() || [];\r\n    \r\n    // Десериализация объектов Workout из localStorage\r\n    this._deserializeWorkouts();\r\n  }\r\n\r\n  _deserializeWorkouts() {\r\n    // Преобразуем простые объекты из localStorage в экземпляры класса Workout\r\n    this.workouts = this.workouts.map(workoutData => {\r\n      let plan = null;\r\n      \r\n      // Если у тренировки есть связанный план, находим его\r\n      if (workoutData.plan && workoutData.plan.id !== undefined) {\r\n        plan = this.workoutPlanService.getWorkoutPlanById(workoutData.plan.id);\r\n      }\r\n      \r\n      // Создаем объект тренировки\r\n      const workout = new Workout(\r\n        workoutData.id,\r\n        workoutData.ownerId,\r\n        new Date(workoutData.date),\r\n        plan\r\n      );\r\n      \r\n      // Если в данных есть упражнения, но нет плана (или упражнения добавлены вручную)\r\n      if (workoutData.exercises && workoutData.exercises.length) {\r\n        workoutData.exercises.forEach(exerciseData => {\r\n          // Если упражнение еще не добавлено из плана\r\n          if (!workout.getExerciseById(exerciseData.id)) {\r\n            // Находим оригинальное упражнение из сервиса упражнений\r\n            const originalExercise = this.exerciseService.getExerciseById(exerciseData.id);\r\n            if (originalExercise) {\r\n              // Добавляем упражнение в тренировку\r\n              const workoutExercise = workout.addExercise(originalExercise);\r\n              \r\n              // Копируем данные тренировки в зависимости от типа упражнения\r\n              if (exerciseData.sets && exerciseData.sets.length) {\r\n                exerciseData.sets.forEach(set => {\r\n                  workout.recordSet(exerciseData.id, set.reps, set.weight);\r\n                });\r\n              } \r\n              else if (exerciseData.sessions && exerciseData.sessions.length) {\r\n                if (exerciseData.type === \"Cardio\") {\r\n                  exerciseData.sessions.forEach(session => {\r\n                    workout.recordCardioSession(\r\n                      exerciseData.id,\r\n                      session.duration,\r\n                      session.distance,\r\n                      session.caloriesBurned\r\n                    );\r\n                  });\r\n                } \r\n                else if (exerciseData.type === \"Endurance\") {\r\n                  exerciseData.sessions.forEach(session => {\r\n                    workout.recordEnduranceSession(\r\n                      exerciseData.id,\r\n                      session.duration,\r\n                      session.difficulty\r\n                    );\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n      \r\n      return workout;\r\n    });\r\n  }\r\n\r\n  _saveWorkouts() {\r\n    this.storageManager.saveWorkouts(this.workouts);\r\n  }\r\n\r\n  generateWorkoutId() {\r\n    if (!this.workouts.length) return 0;\r\n    return Math.max(...this.workouts.map(workout => workout.id)) + 1;\r\n  }\r\n\r\n  createWorkout(ownerId, date = null, workoutPlanId) {\r\n    let plan = null;\r\n    if (workoutPlanId !== undefined) {\r\n      plan = this.workoutPlanService.getWorkoutPlanById(workoutPlanId);\r\n      if (!plan) {\r\n        throw new Error(`План тренировки с ID ${workoutPlanId} не найден`);\r\n      }\r\n    }\r\n\r\n    const id = this.generateWorkoutId();\r\n    const workout = new Workout(id, ownerId, date || new Date(), plan);\r\n\r\n    this.workouts.push(workout);\r\n    this._saveWorkouts();\r\n    return workout;\r\n  }\r\n\r\n  addExerciseToWorkout(workoutId, exerciseId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    const exercise = this.exerciseService.getExerciseById(exerciseId);\r\n\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n\r\n    if (!exercise) {\r\n      throw new Error(`Упражнение с ID ${exerciseId} не найдено`);\r\n    }\r\n\r\n    const addedExercise = workout.addExercise(exercise);\r\n    this._saveWorkouts();\r\n    return workout;\r\n  }\r\n\r\n  recordSetInWorkout(workoutId, exerciseId, reps, weight) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n\r\n    workout.recordSet(exerciseId, reps, weight);\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  updateSetInWorkout(workoutId, exerciseId, setIndex, reps, weight) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n\r\n    workout.updateSet(exerciseId, setIndex, reps, weight);\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  recordCardioSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    duration,\r\n    distance,\r\n    caloriesBurned = null\r\n  ) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n\r\n    workout.recordCardioSession(exerciseId, duration, distance, caloriesBurned);\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  updateCardioSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    distance,\r\n    caloriesBurned\r\n  ) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n\r\n    workout.updateCardioSession(\r\n      exerciseId,\r\n      sessionIndex,\r\n      duration,\r\n      distance,\r\n      caloriesBurned\r\n    );\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  recordEnduranceSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    duration,\r\n    difficulty = null\r\n  ) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n\r\n    workout.recordEnduranceSession(exerciseId, duration, difficulty);\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  updateEnduranceSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    difficulty\r\n  ) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n\r\n    workout.updateEnduranceSession(\r\n      exerciseId,\r\n      sessionIndex,\r\n      duration,\r\n      difficulty\r\n    );\r\n    this._saveWorkouts();\r\n  }\r\n\r\n  getWorkoutById(workoutId) {\r\n    return this.workouts.find((workout) => workout.id === workoutId);\r\n  }\r\n\r\n  getWorkoutsForUser(userId) {\r\n    return this.workouts.filter((workout) => workout.ownerId === userId);\r\n  }\r\n\r\n  getAllWorkouts() {\r\n    return this.workouts;\r\n  }\r\n\r\n  getTotalWeightForWorkout(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    return workout.getTotalWeight();\r\n  }\r\n\r\n  getTotalDistanceForWorkout(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    return workout.getTotalDistance();\r\n  }\r\n\r\n  getTotalDurationForWorkout(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    return workout.getTotalDuration();\r\n  }\r\n\r\n  getTotalEnduranceDurationForWorkout(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    return workout.getTotalEnduranceDuration();\r\n  }\r\n\r\n  getMaxEnduranceDurationForWorkout(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    return workout.getMaxEnduranceDuration();\r\n  }\r\n\r\n  getEnduranceTotalIntensityForWorkout(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    return workout.getTotalEnduranceIntensity();\r\n  }\r\n\r\n  hasChangesFromPlan(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    return workout.hasChangesFromPlan();\r\n  }\r\n\r\n  updatePlanSetsInWorkout(workoutId) {\r\n    const workout = this.getWorkoutById(workoutId);\r\n    if (!workout) {\r\n      throw new Error(`Тренировка с ID ${workoutId} не найдена`);\r\n    }\r\n    const result = workout.updatePlanSets();\r\n    this._saveWorkouts();\r\n    return result;\r\n  }\r\n}","import { ExerciseType } from \"../Exercise/Constants/ExerciseType.js\";\r\nimport { ExerciseStrategyFactory } from \"../Exercise/Strategies/ExerciseStrategyFactory.js\";\r\n\r\nexport class StatisticsService {\r\n  constructor(userService, workoutService) {\r\n    this.userService = userService;\r\n    this.workoutService = workoutService;\r\n    this.strategyFactory = new ExerciseStrategyFactory();\r\n  }\r\n\r\n  getUserWeightProgress(userId, startDate = null, endDate = null) {\r\n    const user = this.userService.getUserById(userId);\r\n    if (!user) {\r\n      throw new Error(`User with ID ${userId} not found`);\r\n    }\r\n\r\n    const userWeightHistory = user.weightHistory;\r\n    const start = startDate ? new Date(startDate) : null;\r\n    const end = endDate ? new Date(endDate) : null;\r\n\r\n    const dateWeights = userWeightHistory.filter((weight) => {\r\n      const weightDate = weight.date;\r\n      return (!start || weightDate >= start) && (!end || weightDate <= end);\r\n    });\r\n\r\n    if (dateWeights.length === 0) {\r\n      return {\r\n        userWeightProgress: 0,\r\n        dateWeights: [],\r\n      };\r\n    }\r\n\r\n    const userWeightProgress =\r\n      dateWeights[dateWeights.length - 1].weight - dateWeights[0].weight;\r\n\r\n    return {\r\n      userWeightProgress,\r\n      dateWeights,\r\n    };\r\n  }\r\n\r\n  getWorkoutsByDate(userId, startDate = null, endDate = null) {\r\n    const workouts = this.workoutService.getWorkoutsForUser(userId);\r\n\r\n    const start = startDate ? new Date(startDate) : null;\r\n    const end = endDate ? new Date(endDate) : null;\r\n\r\n    return workouts.filter((workout) => {\r\n      const workoutDate = workout.date;\r\n      return (!start || workoutDate >= start) && (!end || workoutDate <= end);\r\n    });\r\n  }\r\n\r\n  getWorkoutProgress(userId, startDate = null, endDate = null) {\r\n    const workoutsByDate = this.getWorkoutsByDate(userId, startDate, endDate);\r\n\r\n    if (workoutsByDate.length === 0) {\r\n      return {\r\n        totalWeightProgress: 0,\r\n        totalDistanceProgress: 0,\r\n        totalDurationProgress: 0,\r\n        workoutsByDate: [],\r\n      };\r\n    }\r\n\r\n    const totalWeightProgress =\r\n      workoutsByDate[workoutsByDate.length - 1].getTotalWeight() -\r\n      workoutsByDate[0].getTotalWeight();\r\n\r\n    const totalDistanceProgress =\r\n      workoutsByDate[workoutsByDate.length - 1].getTotalDistance() -\r\n      workoutsByDate[0].getTotalDistance();\r\n\r\n    const totalDurationProgress =\r\n      workoutsByDate[workoutsByDate.length - 1].getTotalDuration() -\r\n      workoutsByDate[0].getTotalDuration();\r\n\r\n    const progressByDate = workoutsByDate.map((workout) => ({\r\n      date: workout.date,\r\n      totalWeight: workout.getTotalWeight(),\r\n      totalDistance: workout.getTotalDistance(),\r\n      totalDuration: workout.getTotalDuration(),\r\n    }));\r\n\r\n    return {\r\n      totalWeightProgress,\r\n      totalDistanceProgress,\r\n      totalDurationProgress,\r\n      workoutsByDate: progressByDate,\r\n    };\r\n  }\r\n\r\n  getExerciseProgress(userId, exerciseId, startDate = null, endDate = null) {\r\n    const workoutsByDate = this.getWorkoutsByDate(userId, startDate, endDate);\r\n    const exercises = [];\r\n\r\n    for (const workout of workoutsByDate) {\r\n      const exercise = workout.exercises.find(\r\n        (exercise) => exercise.id === exerciseId\r\n      );\r\n      if (exercise) {\r\n        exercises.push({\r\n          date: workout.date,\r\n          exercise: exercise,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (exercises.length === 0) {\r\n      return {\r\n        progress: [],\r\n        message: \"No exercise data found for the specified period\",\r\n      };\r\n    }\r\n\r\n    const firstExercise = exercises[0].exercise;\r\n\r\n    try {\r\n      const strategy = this.strategyFactory.getStrategy(firstExercise.type);\r\n\r\n      const progressData = exercises.map((item) => {\r\n        return {\r\n          date: item.date,\r\n          ...strategy.getStatistics(item.exercise),\r\n        };\r\n      });\r\n\r\n      const progressMetrics = strategy.calculateProgress(\r\n        exercises[0].exercise,\r\n        exercises[exercises.length - 1].exercise\r\n      );\r\n\r\n      return {\r\n        ...progressMetrics,\r\n        progress: progressData,\r\n      };\r\n    } catch (error) {\r\n      console.error(`Error calculating progress: ${error.message}`);\r\n      return {\r\n        progress: [],\r\n        message: `Error calculating progress: ${error.message}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  getUserStatisticsSummary(userId, startDate = null, endDate = null) {\r\n    const weightProgress = this.getUserWeightProgress(\r\n      userId,\r\n      startDate,\r\n      endDate\r\n    );\r\n    const workoutProgress = this.getWorkoutProgress(userId, startDate, endDate);\r\n\r\n    const user = this.userService.getUserById(userId);\r\n    const currentWeight = user ? user.currentWeight : null;\r\n    const initialWeight =\r\n      user && user.weightHistory.length > 0\r\n        ? user.weightHistory[0].weight\r\n        : null;\r\n\r\n    return {\r\n      weightMetrics: {\r\n        initialWeight,\r\n        currentWeight,\r\n        change: weightProgress.userWeightProgress,\r\n        history: weightProgress.dateWeights,\r\n      },\r\n      workoutMetrics: {\r\n        totalWorkouts: workoutProgress.workoutsByDate.length,\r\n        totalWeightLifted: workoutProgress.workoutsByDate.reduce(\r\n          (sum, workout) => sum + workout.totalWeight,\r\n          0\r\n        ),\r\n        totalDistanceCovered: workoutProgress.workoutsByDate.reduce(\r\n          (sum, workout) => sum + workout.totalDistance,\r\n          0\r\n        ),\r\n        totalDurationSpent: workoutProgress.workoutsByDate.reduce(\r\n          (sum, workout) => sum + workout.totalDuration,\r\n          0\r\n        ),\r\n        progress: workoutProgress,\r\n      },\r\n    };\r\n  }\r\n}\r\n","export class StorageService {\r\n    constructor(storageKey) {\r\n      this.storageKey = storageKey;\r\n    }\r\n  \r\n    getData() {\r\n      if (typeof window === 'undefined') return null;\r\n      const data = localStorage.getItem(this.storageKey);\r\n      return data ? JSON.parse(data) : null;\r\n    }\r\n  \r\n    saveData(data) {\r\n      if (typeof window === 'undefined') return;\r\n      localStorage.setItem(this.storageKey, JSON.stringify(data));\r\n    }\r\n  \r\n    clearData() {\r\n      if (typeof window === 'undefined') return;\r\n      localStorage.removeItem(this.storageKey);\r\n    }\r\n  }","import { StorageService } from './StorageService.js';\r\n\r\nexport class LocalStorageManager {\r\n  constructor() {\r\n    this.userStorage = new StorageService('workout-app-users');\r\n    this.exerciseStorage = new StorageService('workout-app-exercises');\r\n    this.workoutPlanStorage = new StorageService('workout-app-workout-plans');\r\n    this.workoutStorage = new StorageService('workout-app-workouts');\r\n    \r\n    // Инициализация хранилища при первом использовании\r\n    this._initializeStorage();\r\n  }\r\n\r\n  _initializeStorage() {\r\n    // Проверка, запущено ли в браузере\r\n    if (typeof window === 'undefined') return;\r\n    \r\n    if (!this.userStorage.getData()) {\r\n      this.userStorage.saveData([]);\r\n    }\r\n    \r\n    if (!this.exerciseStorage.getData()) {\r\n      this.exerciseStorage.saveData([]);\r\n    }\r\n    \r\n    if (!this.workoutPlanStorage.getData()) {\r\n      this.workoutPlanStorage.saveData([]);\r\n    }\r\n    \r\n    if (!this.workoutStorage.getData()) {\r\n      this.workoutStorage.saveData([]);\r\n    }\r\n  }\r\n\r\n  // Методы для работы с пользователями\r\n  getUsers() {\r\n    return this.userStorage.getData() || [];\r\n  }\r\n\r\n  saveUsers(users) {\r\n    this.userStorage.saveData(users);\r\n  }\r\n\r\n  // Методы для работы с упражнениями\r\n  getExercises() {\r\n    return this.exerciseStorage.getData() || [];\r\n  }\r\n\r\n  saveExercises(exercises) {\r\n    this.exerciseStorage.saveData(exercises);\r\n  }\r\n\r\n  // Методы для работы с планами тренировок\r\n  getWorkoutPlans() {\r\n    return this.workoutPlanStorage.getData() || [];\r\n  }\r\n\r\n  saveWorkoutPlans(plans) {\r\n    this.workoutPlanStorage.saveData(plans);\r\n  }\r\n\r\n  // Методы для работы с тренировками\r\n  getWorkouts() {\r\n    return this.workoutStorage.getData() || [];\r\n  }\r\n\r\n  saveWorkouts(workouts) {\r\n    this.workoutStorage.saveData(workouts);\r\n  }\r\n\r\n  // Очистка данных\r\n  clearAllData() {\r\n    this.userStorage.clearData();\r\n    this.exerciseStorage.clearData();\r\n    this.workoutPlanStorage.clearData();\r\n    this.workoutStorage.clearData();\r\n    this._initializeStorage();\r\n  }\r\n}","import { UserService } from \"./services/UserService.js\";\r\nimport { ExerciseService } from \"./services/ExerciseService.js\";\r\nimport { WorkoutPlanService } from \"./services/WorkoutPlanService.js\";\r\nimport { WorkoutService } from \"./services/WorkoutService.js\";\r\nimport { StatisticsService } from \"./services/StatisticsService.js\";\r\nimport { LocalStorageManager } from \"./services/LocalStorageManager.js\";\r\nimport { ExerciseType } from \"./Exercise/Constants/ExerciseType.js\";\r\n\r\nexport class WorkoutPlanner {\r\n  constructor() {\r\n    // Инициализируем менеджер хранилища\r\n    this.storageManager = new LocalStorageManager();\r\n    \r\n    // Инициализируем сервисы с использованием LocalStorageManager\r\n    this.userService = new UserService(this.storageManager);\r\n    this.exerciseService = new ExerciseService(this.storageManager);\r\n    this.workoutPlanService = new WorkoutPlanService(this.exerciseService, this.storageManager);\r\n    this.workoutService = new WorkoutService(\r\n      this.exerciseService,\r\n      this.workoutPlanService,\r\n      this.storageManager\r\n    );\r\n    this.statisticsService = new StatisticsService(\r\n      this.userService,\r\n      this.workoutService\r\n    );\r\n  }\r\n\r\n  // =========== Управление Пользователями ===========\r\n\r\n  showUsers() {\r\n    console.log(this.userService.getAllUsers());\r\n  }\r\n\r\n  userReg(name, password, email, currentWeight, height) {\r\n    try {\r\n      const newUser = this.userService.registerUser(\r\n        name,\r\n        password,\r\n        email,\r\n        currentWeight,\r\n        height\r\n      );\r\n      console.log(`Пользователь ${newUser.name} зарегестрирован`);\r\n      return newUser;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  userLogin(email, password) {\r\n    try {\r\n      const user = this.userService.loginUser(email, password);\r\n      console.log(`Пользователь ${user.name} вошёл в систему`);\r\n      return user;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  updateWeight(newWeight) {\r\n    try {\r\n      this.userService.updateUserWeight(newWeight);\r\n      console.log(`Пользователь обновил вес на ${newWeight} кг`);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  updateProfile(name, password, email, height) {\r\n    try {\r\n      this.userService.updateUserProfile(name, password, email, height);\r\n      console.log(\"Пользователь обновил профиль\");\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // =========== Управление упражнениями ===========\r\n\r\n  showExercises() {\r\n    console.log(this.exerciseService.getAllExercises());\r\n  }\r\n\r\n  createStrengthExercise(name, image, description, mediaUrl, bodyPart, sets) {\r\n    const newExercise = this.exerciseService.createStrengthExercise(\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      bodyPart,\r\n      sets\r\n    );\r\n    console.log(`Упражнение ${newExercise.name} добавлено`);\r\n    return newExercise;\r\n  }\r\n\r\n  createCardioExercise(name, image, description, mediaUrl, cardioType) {\r\n    const newExercise = this.exerciseService.createCardioExercise(\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      cardioType\r\n    );\r\n    console.log(`Кардио упражнение ${newExercise.name} добавлено`);\r\n    return newExercise;\r\n  }\r\n\r\n  createEnduranceExercise(name, image, description, mediaUrl, targetMuscle) {\r\n    const newExercise = this.exerciseService.createEnduranceExercise(\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      targetMuscle\r\n    );\r\n    console.log(`Упражнение на выносливость ${newExercise.name} добавлено`);\r\n    return newExercise;\r\n  }\r\n\r\n  createGenericExercise(\r\n    type,\r\n    name,\r\n    image,\r\n    description,\r\n    mediaUrl,\r\n    specificParam\r\n  ) {\r\n    const newExercise = this.exerciseService.createGenericExercise(\r\n      type,\r\n      name,\r\n      image,\r\n      description,\r\n      mediaUrl,\r\n      specificParam\r\n    );\r\n    console.log(`${type} упражнение ${newExercise.name} добавлено`);\r\n    return newExercise;\r\n  }\r\n\r\n  removeExercise(exerciseId) {\r\n    this.exerciseService.removeExercise(exerciseId);\r\n  }\r\n\r\n  // =========== Управление планами тренировок ===========\r\n\r\n  showWorkoutPlans() {\r\n    console.log(this.workoutPlanService.getAllWorkoutPlans());\r\n  }\r\n\r\n  createWorkoutPlan(name, description) {\r\n    try {\r\n      const userId = this.userService.getCurrentUser().id;\r\n      const workoutPlan = this.workoutPlanService.createWorkoutPlan(\r\n        userId,\r\n        name,\r\n        description\r\n      );\r\n      console.log(\"Программа тренировок создана\");\r\n      return workoutPlan;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  deleteWorkoutPlan(workoutPlanId) {\r\n    try {\r\n      this.workoutPlanService.deleteWorkoutPlan(workoutPlanId);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  addExerciseToWorkoutPlan(workoutPlanId, exerciseId) {\r\n    try {\r\n      const exercise = this.exerciseService.getExerciseById(exerciseId);\r\n      const workoutPlan = this.workoutPlanService.addExerciseToWorkoutPlan(\r\n        workoutPlanId,\r\n        exerciseId\r\n      );\r\n      console.log(\r\n        `Упражнение ${exercise.name} добавлено в программу тренировок ${workoutPlan.name}`\r\n      );\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  removeExerciseFromWorkoutPlan(workoutPlanId, exerciseId) {\r\n    try {\r\n      return this.workoutPlanService.removeExerciseFromWorkoutPlan(\r\n        workoutPlanId,\r\n        exerciseId\r\n      );\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  addSetToExerciseInWorkoutPlan(workoutPlanId, exerciseId, reps, weight) {\r\n    try {\r\n      this.workoutPlanService.addSetToExerciseInWorkoutPlan(\r\n        workoutPlanId,\r\n        exerciseId,\r\n        reps,\r\n        weight\r\n      );\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  addSessionToExerciseInWorkoutPlan(\r\n    workoutPlanId,\r\n    exerciseId,\r\n    duration,\r\n    distance,\r\n    caloriesBurned = null\r\n  ) {\r\n    try {\r\n      const exercise =\r\n        this.workoutPlanService.addSessionToExerciseInWorkoutPlan(\r\n          workoutPlanId,\r\n          exerciseId,\r\n          duration,\r\n          distance,\r\n          caloriesBurned\r\n        );\r\n      console.log(`Кардио сессия добавлена в упражнение ${exercise.name}`);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  addEnduranceSessionToExerciseInWorkoutPlan(\r\n    workoutPlanId,\r\n    exerciseId,\r\n    duration,\r\n    difficulty = null\r\n  ) {\r\n    try {\r\n      const exercise =\r\n        this.workoutPlanService.addEnduranceSessionToExerciseInWorkoutPlan(\r\n          workoutPlanId,\r\n          exerciseId,\r\n          duration,\r\n          difficulty\r\n        );\r\n      console.log(\r\n        `Сессия выносливости добавлена в упражнение ${exercise.name}`\r\n      );\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getWorkoutPlanExercises(workoutPlanId) {\r\n    try {\r\n      const workoutPlan =\r\n        this.workoutPlanService.getWorkoutPlanById(workoutPlanId);\r\n      console.log(workoutPlan.exercises);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // =========== Управление тренировками ===========\r\n\r\n  showWorkouts() {\r\n    console.log(this.workoutService.getAllWorkouts());\r\n  }\r\n\r\n  createWorkout(date = null, workoutPlanId) {\r\n    try {\r\n      const userId = this.userService.getCurrentUser().id;\r\n      const workout = this.workoutService.createWorkout(\r\n        userId,\r\n        date,\r\n        workoutPlanId\r\n      );\r\n      console.log(\"Тренировка создана\");\r\n      return workout;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  addExerciseToWorkout(workoutId, exerciseId) {\r\n    try {\r\n      const workout = this.workoutService.addExerciseToWorkout(\r\n        workoutId,\r\n        exerciseId\r\n      );\r\n      const exercise = this.exerciseService.getExerciseById(exerciseId);\r\n      console.log(`Exercise ${exercise.name} added to workout`);\r\n      return workout;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  recordSetInWorkout(workoutId, exerciseId, reps, weight) {\r\n    try {\r\n      this.workoutService.recordSetInWorkout(\r\n        workoutId,\r\n        exerciseId,\r\n        reps,\r\n        weight\r\n      );\r\n      console.log(`Записан сет со значениями ${reps} повторений ${weight} кг`);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  updateSetInWorkout(workoutId, exerciseId, setIndex, reps, weight) {\r\n    try {\r\n      this.workoutService.updateSetInWorkout(\r\n        workoutId,\r\n        exerciseId,\r\n        setIndex,\r\n        reps,\r\n        weight\r\n      );\r\n      console.log(`Сет обновлён со значениями ${reps} подходов ${weight} кг`);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  recordCardioSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    duration,\r\n    distance,\r\n    caloriesBurned = null\r\n  ) {\r\n    try {\r\n      this.workoutService.recordCardioSessionInWorkout(\r\n        workoutId,\r\n        exerciseId,\r\n        duration,\r\n        distance,\r\n        caloriesBurned\r\n      );\r\n      console.log(`Записана кардио сессия: ${duration} минут, ${distance} км`);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  updateCardioSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    distance,\r\n    caloriesBurned\r\n  ) {\r\n    try {\r\n      this.workoutService.updateCardioSessionInWorkout(\r\n        workoutId,\r\n        exerciseId,\r\n        sessionIndex,\r\n        duration,\r\n        distance,\r\n        caloriesBurned\r\n      );\r\n      console.log(`Кардио сессия обновлена: ${duration} минут, ${distance} км`);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  recordEnduranceSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    duration,\r\n    difficulty = null\r\n  ) {\r\n    try {\r\n      this.workoutService.recordEnduranceSessionInWorkout(\r\n        workoutId,\r\n        exerciseId,\r\n        duration,\r\n        difficulty\r\n      );\r\n      console.log(\r\n        `Записана сессия выносливости: ${duration} секунд, сложность: ${\r\n          difficulty || \"не указана\"\r\n        }`\r\n      );\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  updateEnduranceSessionInWorkout(\r\n    workoutId,\r\n    exerciseId,\r\n    sessionIndex,\r\n    duration,\r\n    difficulty\r\n  ) {\r\n    try {\r\n      this.workoutService.updateEnduranceSessionInWorkout(\r\n        workoutId,\r\n        exerciseId,\r\n        sessionIndex,\r\n        duration,\r\n        difficulty\r\n      );\r\n      console.log(\r\n        `Сессия выносливости обновлена: ${duration} секунд, сложность: ${\r\n          difficulty || \"не указана\"\r\n        }`\r\n      );\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  showWorkout(workoutId) {\r\n    try {\r\n      const workout = this.workoutService.getWorkoutById(workoutId);\r\n      console.log(workout);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  hasChangesFromPlan(workoutId) {\r\n    try {\r\n      return this.workoutService.hasChangesFromPlan(workoutId);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  updatePlanSetsInWorkout(workoutId) {\r\n    try {\r\n      return this.workoutService.updatePlanSetsInWorkout(workoutId);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // =========== Управление показателями тренировки ===========\r\n\r\n  getTotalWeightForWorkout(workoutId) {\r\n    try {\r\n      const totalWeight =\r\n        this.workoutService.getTotalWeightForWorkout(workoutId);\r\n      console.log(\"Общий вес за тренировку: \" + totalWeight);\r\n      return totalWeight;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getTotalDistanceForWorkout(workoutId) {\r\n    try {\r\n      const totalDistance =\r\n        this.workoutService.getTotalDistanceForWorkout(workoutId);\r\n      console.log(\"Общая дистанция за тренировку: \" + totalDistance + \" км\");\r\n      return totalDistance;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getTotalDurationForWorkout(workoutId) {\r\n    try {\r\n      const totalDuration =\r\n        this.workoutService.getTotalDurationForWorkout(workoutId);\r\n      console.log(\r\n        \"Общая длительность кардио за тренировку: \" + totalDuration + \" минут\"\r\n      );\r\n      return totalDuration;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getTotalEnduranceDurationForWorkout(workoutId) {\r\n    try {\r\n      const totalDuration =\r\n        this.workoutService.getTotalEnduranceDurationForWorkout(workoutId);\r\n      console.log(\r\n        \"Общее время упражнений на выносливость за тренировку: \" +\r\n          totalDuration +\r\n          \" секунд\"\r\n      );\r\n      return totalDuration;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getMaxEnduranceDurationForWorkout(workoutId) {\r\n    try {\r\n      const maxDuration =\r\n        this.workoutService.getMaxEnduranceDurationForWorkout(workoutId);\r\n      console.log(\r\n        \"Максимальная продолжительность упражнения на выносливость: \" +\r\n          maxDuration +\r\n          \" секунд\"\r\n      );\r\n      return maxDuration;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getEnduranceTotalIntensityForWorkout(workoutId) {\r\n    try {\r\n      const totalIntensity =\r\n        this.workoutService.getEnduranceTotalIntensityForWorkout(workoutId);\r\n      console.log(\r\n        \"Общая интенсивность упражнений на выносливость: \" + totalIntensity\r\n      );\r\n      return totalIntensity;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // =========== Управление статистикой ===========\r\n\r\n  getUserWeightProgress(startDate = null, endDate = null) {\r\n    try {\r\n      const currentUser = this.userService.getCurrentUser();\r\n      const dateWeights = this.statisticsService.getUserWeightProgress(\r\n        currentUser.id,\r\n        startDate,\r\n        endDate\r\n      );\r\n      console.log(dateWeights);\r\n      return dateWeights;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getWorkoutProgress(startDate = null, endDate = null) {\r\n    try {\r\n      const currentUser = this.userService.getCurrentUser();\r\n      const workoutProgress = this.statisticsService.getWorkoutProgress(\r\n        currentUser.id,\r\n        startDate,\r\n        endDate\r\n      );\r\n      console.log(workoutProgress);\r\n      return workoutProgress;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getExerciseProgress(exerciseId, startDate = null, endDate = null) {\r\n    try {\r\n      const currentUser = this.userService.getCurrentUser();\r\n      const exerciseProgress = this.statisticsService.getExerciseProgress(\r\n        currentUser.id,\r\n        exerciseId,\r\n        startDate,\r\n        endDate\r\n      );\r\n      console.log(exerciseProgress);\r\n      return exerciseProgress;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getCardioProgress(exerciseId, startDate = null, endDate = null) {\r\n    try {\r\n      const exercise = this.exerciseService.getExerciseById(exerciseId);\r\n\r\n      if (!exercise || exercise.type !== ExerciseType.CARDIO) {\r\n        console.log(\"Кардио упражнение не найдено\");\r\n        return;\r\n      }\r\n\r\n      const currentUser = this.userService.getCurrentUser();\r\n      const cardioProgress = this.statisticsService.getExerciseProgress(\r\n        currentUser.id,\r\n        exerciseId,\r\n        startDate,\r\n        endDate\r\n      );\r\n\r\n      console.log(\"Прогресс кардио упражнения:\", cardioProgress);\r\n      return cardioProgress;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getEnduranceProgress(exerciseId, startDate = null, endDate = null) {\r\n    try {\r\n      const exercise = this.exerciseService.getExerciseById(exerciseId);\r\n\r\n      if (!exercise || exercise.type !== ExerciseType.ENDURANCE) {\r\n        console.log(\"Упражнение на выносливость не найдено\");\r\n        return;\r\n      }\r\n\r\n      const currentUser = this.userService.getCurrentUser();\r\n      const enduranceProgress = this.statisticsService.getExerciseProgress(\r\n        currentUser.id,\r\n        exerciseId,\r\n        startDate,\r\n        endDate\r\n      );\r\n\r\n      console.log(\"Прогресс упражнения на выносливость:\", enduranceProgress);\r\n      return enduranceProgress;\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n","import { WorkoutPlanner } from \"./classes/WorkoutPlanner.js\";\r\nimport { User } from \"./classes/User/User.js\";\r\nimport { Exercise } from \"./classes/Exercise/Exercise.js\";\r\nimport { StrengthExercise } from \"./classes/Exercise/StrengthExercise.js\";\r\nimport { CardioExercise } from \"./classes/Exercise/CardioExercise.js\";\r\nimport { EnduranceExercise } from \"./classes/Exercise/EnduranceExercise.js\";\r\nimport { WorkoutPlan } from \"./classes/WorkoutPlan/WorkoutPlan.js\";\r\nimport { Workout } from \"./classes/Workout/Workout.js\";\r\nimport { ExerciseType } from \"./classes/Exercise/Constants/ExerciseType.js\";\r\nimport { ExerciseFactory } from \"./classes/Exercise/Factory/ExerciseFactory.js\";\r\nimport { LocalStorageManager } from \"./classes/services/LocalStorageManager.js\";\r\nimport { UserService } from \"./classes/services/UserService.js\";\r\nimport { ExerciseService } from \"./classes/services/ExerciseService.js\";\r\nimport { WorkoutPlanService } from \"./classes/services/WorkoutPlanService.js\";\r\nimport { WorkoutService } from \"./classes/services/WorkoutService.js\";\r\nimport { StatisticsService } from \"./classes/services/StatisticsService.js\";\r\n\r\n// Экспортируем функцию для создания экземпляра WorkoutPlanner\r\nexport const createWorkoutPlanner = () => {\r\n  return new WorkoutPlanner();\r\n};\r\n\r\n// Экспортируем основные классы и типы для использования в React-приложении\r\nexport {\r\n  User,\r\n  Exercise,\r\n  StrengthExercise,\r\n  CardioExercise, \r\n  EnduranceExercise,\r\n  WorkoutPlan,\r\n  Workout,\r\n  ExerciseType,\r\n  ExerciseFactory,\r\n  LocalStorageManager,\r\n  UserService,\r\n  ExerciseService,\r\n  WorkoutPlanService,\r\n  WorkoutService,\r\n  StatisticsService\r\n};\r\n"],"names":["User","constructor","id","name","password","email","currentWeight","height","this","weightHistory","date","Date","weight","workoutsHistory","workoutPlans","updateWeight","newWeight","push","addWorkoutPlan","workoutPlan","getWorkoutPlans","addWorkout","workout","getWorkoutHistory","updateProfile","UserService","storageManager","users","getUsers","currentUser","_deserializeUsers","map","userData","user","length","entry","_saveUsers","saveUsers","getUserById","find","Error","generateUserId","Math","max","registerUser","some","newUser","loginUser","updateUserWeight","validateCurrentUser","updateUserProfile","getCurrentUser","getAllUsers","Exercise","image","description","mediaUrl","type","notes","updateExercise","addNote","note","CardioSession","duration","distance","caloriesBurned","calculatePace","calculateSpeed","CardioExercise","cardioType","super","sessions","addSession","removeSession","sessionIndex","splice","getSessions","updateSession","index","getTotalDuration","reduce","acc","session","getTotalDistance","getTotalCalories","getAveragePace","getBestPace","min","filter","pace","getAverageSpeed","getBestSpeed","ExerciseType","STRENGTH","CARDIO","ENDURANCE","EnduranceSession","difficulty","calculateIntensity","EnduranceExercise","targetMuscle","getAverageDuration","getMaxDuration","getAverageDifficulty","getTotalIntensity","getAverageIntensity","Set","reps","calculateOneRepMax","round","StrengthExercise","bodyPart","sets","addSet","removeSet","setIndex","getSets","updateSet","getAverageOneRepMax","val","getBestOneRepMax","set","getMaxWeight","getTotalWeight","ExerciseFactory","createExercise","specificParam","createStrengthExercise","createCardioExercise","createEnduranceExercise","ExerciseService","exercises","getExercises","_deserializeExercises","exerciseData","exercise","forEach","_saveExercises","saveExercises","generateExerciseId","newExercise","createGenericExercise","removeExercise","exerciseId","getExerciseById","getAllExercises","ExerciseStrategy","copyExercise","addTrackingData","data","updateTrackingData","getStatistics","calculateProgress","firstExercise","lastExercise","hasChanges","planExercise","updatePlanData","source","target","StrengthExerciseStrategy","Array","isArray","totalWeight","bestOneRepMax","maxWeight","bestOneReMaxProgress","maxWeightProgress","totalWeightProgress","i","CardioExerciseStrategy","totalDistance","totalDuration","bestPace","averagePace","bestSpeed","averageSpeed","totalCalories","totalDistanceProgress","totalDurationProgress","bestPaceProgress","bestSpeedProgress","totalCaloriesProgress","EnduranceExerciseStrategy","maxDuration","averageDifficulty","totalIntensity","averageIntensity","maxDurationProgress","averageDifficultyProgress","totalIntensityProgress","ExerciseStrategyFactory","strategies","getStrategy","exerciseType","strategy","registerStrategy","WorkoutPlan","ownerId","strategyFactory","updateWorkoutPlan","addExercise","error","message","ex","addSetToExercise","addSessionToExercise","addEnduranceSessionToExercise","updateSetInExercise","updateSessionInExercise","updateEnduranceSessionInExercise","removeTrackingData","removeSetFromExercise","removeSessionFromExercise","removeEnduranceSessionFromExercise","removeNote","noteIndex","WorkoutPlanService","exerciseService","_deserializeWorkoutPlans","planData","originalExercise","_saveWorkoutPlans","saveWorkoutPlans","generateWorkoutPlanId","plan","createWorkoutPlan","deleteWorkoutPlan","workoutPlanId","addExerciseToWorkoutPlan","getWorkoutPlanById","removeExerciseFromWorkoutPlan","addTrackingDataToExercise","addSetToExerciseInWorkoutPlan","addSessionToExerciseInWorkoutPlan","addEnduranceSessionToExerciseInWorkoutPlan","updateTrackingDataInExercise","removeTrackingDataFromExercise","getWorkoutPlansForUser","userId","getAllWorkoutPlans","Workout","console","recordTrackingData","recordSet","recordCardioSession","recordEnduranceSession","updateCardioSession","updateEnduranceSession","getTotalStatisticByType","statName","total","getTotalEnduranceDuration","getMaxEnduranceDuration","durations","getTotalEnduranceIntensity","hasChangesFromPlan","updatePlanSets","WorkoutService","workoutPlanService","workouts","getWorkouts","_deserializeWorkouts","workoutData","undefined","_saveWorkouts","saveWorkouts","generateWorkoutId","createWorkout","addExerciseToWorkout","workoutId","getWorkoutById","recordSetInWorkout","updateSetInWorkout","recordCardioSessionInWorkout","updateCardioSessionInWorkout","recordEnduranceSessionInWorkout","updateEnduranceSessionInWorkout","getWorkoutsForUser","getAllWorkouts","getTotalWeightForWorkout","getTotalDistanceForWorkout","getTotalDurationForWorkout","getTotalEnduranceDurationForWorkout","getMaxEnduranceDurationForWorkout","getEnduranceTotalIntensityForWorkout","updatePlanSetsInWorkout","result","StatisticsService","userService","workoutService","getUserWeightProgress","startDate","endDate","userWeightHistory","start","end","dateWeights","weightDate","userWeightProgress","getWorkoutsByDate","workoutDate","getWorkoutProgress","workoutsByDate","getExerciseProgress","progress","progressData","item","getUserStatisticsSummary","weightProgress","workoutProgress","weightMetrics","initialWeight","change","history","workoutMetrics","totalWorkouts","totalWeightLifted","sum","totalDistanceCovered","totalDurationSpent","StorageService","storageKey","getData","window","localStorage","getItem","JSON","parse","saveData","setItem","stringify","clearData","removeItem","LocalStorageManager","userStorage","exerciseStorage","workoutPlanStorage","workoutStorage","_initializeStorage","plans","clearAllData","WorkoutPlanner","statisticsService","showUsers","log","userReg","userLogin","showExercises","showWorkoutPlans","getWorkoutPlanExercises","showWorkouts","showWorkout","exerciseProgress","getCardioProgress","cardioProgress","getEnduranceProgress","enduranceProgress"],"mappings":"aAAO,MAAMA,EACX,WAAAC,CAAYC,EAAIC,EAAMC,EAAUC,EAAOC,EAAeC,GACpDC,KAAKN,GAAKA,EACVM,KAAKL,KAAOA,EACZK,KAAKJ,SAAWA,EAChBI,KAAKH,MAAQA,EACbG,KAAKF,cAAgBA,EACrBE,KAAKC,cAAgB,CAAC,CAAEC,KAAM,IAAIC,KAAQC,OAAQN,IAClDE,KAAKD,OAASA,EACdC,KAAKK,gBAAkB,GACvBL,KAAKM,aAAe,EACrB,CAED,YAAAC,CAAaC,GACXR,KAAKF,cAAgBU,EACrBR,KAAKC,cAAcQ,KAAK,CAAEP,KAAM,IAAIC,KAAQC,OAAQI,GACrD,CAED,cAAAE,CAAeC,GACbX,KAAKM,aAAaG,KAAKE,EACxB,CAED,eAAAC,GACE,OAAOZ,KAAKM,YACb,CAED,UAAAO,CAAWC,GACTd,KAAKK,gBAAgBI,KAAKK,EAC3B,CAED,iBAAAC,GACE,OAAOf,KAAKK,eACb,CAED,aAAAW,CAAcrB,EAAMC,EAAUC,EAAOE,GACnCC,KAAKL,KAAOA,GAAQK,KAAKL,KACzBK,KAAKJ,SAAWA,GAAYI,KAAKJ,SACjCI,KAAKH,MAAQA,GAASG,KAAKH,MAC3BG,KAAKD,OAASA,GAAUC,KAAKD,MAC9B,ECrCI,MAAMkB,EACX,WAAAxB,CAAYyB,GACVlB,KAAKkB,eAAiBA,EACtBlB,KAAKmB,MAAQnB,KAAKkB,eAAeE,YAAc,GAC/CpB,KAAKqB,YAAc,KAGnBrB,KAAKsB,mBACN,CAED,iBAAAA,GAEEtB,KAAKmB,MAAQnB,KAAKmB,MAAMI,KAAIC,IAC1B,MAAMC,EAAO,IAAIjC,EACfgC,EAAS9B,GACT8B,EAAS7B,KACT6B,EAAS5B,SACT4B,EAAS3B,MACT2B,EAAS1B,cACT0B,EAASzB,QAWX,OAPIyB,EAASvB,eAAiBuB,EAASvB,cAAcyB,SACnDD,EAAKxB,cAAgBuB,EAASvB,cAAcsB,KAAII,IAAU,CACxDzB,KAAM,IAAIC,KAAKwB,EAAMzB,MACrBE,OAAQuB,EAAMvB,YAIXqB,CAAI,GAEd,CAED,UAAAG,GACE5B,KAAKkB,eAAeW,UAAU7B,KAAKmB,MACpC,CAED,WAAAW,CAAYpC,GACV,MAAM+B,EAAOzB,KAAKmB,MAAMY,MAAMN,GAASA,EAAK/B,KAAOA,IACnD,IAAK+B,EACH,MAAM,IAAIO,MAAM,qBAAqBtC,eAEvC,OAAO+B,CACR,CAED,cAAAQ,GACE,OAAKjC,KAAKmB,MAAMO,OACTQ,KAAKC,OAAOnC,KAAKmB,MAAMI,KAAIE,GAAQA,EAAK/B,MAAO,EADvB,CAEhC,CAED,YAAA0C,CAAazC,EAAMC,EAAUC,EAAOC,EAAeC,GACjD,GAAIC,KAAKmB,MAAMkB,MAAMZ,GAASA,EAAK5B,QAAUA,IAC3C,MAAM,IAAImC,MAAM,6CAElB,MAAMtC,EAAKM,KAAKiC,iBACVK,EAAU,IAAI9C,EAAKE,EAAIC,EAAMC,EAAUC,EAAOC,EAAeC,GAGnE,OAFAC,KAAKmB,MAAMV,KAAK6B,GAChBtC,KAAK4B,aACEU,CACR,CAED,SAAAC,CAAU1C,EAAOD,GACf,MAAM6B,EAAOzB,KAAKmB,MAAMY,MAAMN,GAASA,EAAK5B,QAAUA,IACtD,IAAK4B,EACH,MAAM,IAAIO,MAAM,4CAGlB,GAAIP,EAAK7B,WAAaA,EACpB,MAAM,IAAIoC,MAAM,mBAIlB,OADAhC,KAAKqB,YAAcI,EACZA,CACR,CAED,gBAAAe,CAAiBhC,GACfR,KAAKyC,sBACLzC,KAAKqB,YAAYd,aAAaC,GAC9BR,KAAK4B,YACN,CAED,iBAAAc,CAAkB/C,EAAMC,EAAUC,EAAOE,GACvCC,KAAKyC,sBACLzC,KAAKqB,YAAYL,cAAcrB,EAAMC,EAAUC,EAAOE,GACtDC,KAAK4B,YACN,CAED,cAAAe,GACE,OAAO3C,KAAKqB,WACb,CAED,mBAAAoB,GACE,IAAKzC,KAAKqB,YACR,MAAM,IAAIW,MAAM,8BAEnB,CAED,WAAAY,GACE,OAAO5C,KAAKmB,KACb,ECtGI,MAAM0B,EACX,WAAApD,CAAYC,EAAIC,EAAMmD,EAAOC,EAAaC,EAAUC,GAClDjD,KAAKN,GAAKA,EACVM,KAAKL,KAAOA,EACZK,KAAK8C,MAAQA,EACb9C,KAAK+C,YAAcA,GAAe,GAClC/C,KAAKgD,SAAWA,EAChBhD,KAAKiD,KAAOA,EACZjD,KAAKkD,MAAQ,EACd,CAED,cAAAC,CAAexD,EAAMoD,EAAaC,GAChChD,KAAKL,KAAOA,GAAQK,KAAKL,KACzBK,KAAK+C,YAAcA,GAAe/C,KAAK+C,YACvC/C,KAAKgD,SAAWA,GAAYhD,KAAKgD,QAClC,CAED,OAAAI,CAAQC,GACNrD,KAAKkD,MAAMzC,KAAK4C,EACjB,ECnBI,MAAMC,EACX,WAAA7D,CAAY8D,EAAUC,EAAUC,EAAiB,MAC/CzD,KAAKuD,SAAWA,EAChBvD,KAAKwD,SAAWA,EAChBxD,KAAKyD,eAAiBA,CACvB,CAED,aAAAC,GACE,OAAK1D,KAAKwD,UAA8B,IAAlBxD,KAAKwD,SACpBxD,KAAKuD,SAAWvD,KAAKwD,SADsB,CAEnD,CAED,cAAAG,GACE,OAAK3D,KAAKuD,UAA8B,IAAlBvD,KAAKuD,SACnBvD,KAAKwD,SAAWxD,KAAKuD,SAAY,GADS,CAEnD,ECZI,MAAMK,UAAuBf,EAClC,WAAApD,CAAYC,EAAIC,EAAMmD,EAAOC,EAAaC,EAAUC,EAAMY,GACxDC,MAAMpE,EAAIC,EAAMmD,EAAOC,EAAaC,EAAUC,GAC9CjD,KAAK6D,WAAaA,EAClB7D,KAAK+D,SAAW,EACjB,CAED,UAAAC,CAAWT,EAAUC,EAAUC,EAAiB,MAC9CzD,KAAK+D,SAAStD,KAAK,IAAI6C,EAAcC,EAAUC,EAAUC,GAC1D,CAED,aAAAQ,CAAcC,GACZlE,KAAK+D,SAASI,OAAOD,EAAc,EACpC,CAED,WAAAE,GACE,OAAOpE,KAAK+D,QACb,CAED,aAAAM,CAAcC,EAAOf,EAAUC,EAAUC,GACvCzD,KAAK+D,SAASO,GAAOf,SAAWA,GAAYvD,KAAK+D,SAASO,GAAOf,SACjEvD,KAAK+D,SAASO,GAAOd,SAAWA,GAAYxD,KAAK+D,SAASO,GAAOd,SACjExD,KAAK+D,SAASO,GAAOb,eACnBA,GAAkBzD,KAAK+D,SAASO,GAAOb,cAC1C,CAED,gBAAAc,GACE,OAAOvE,KAAK+D,SAASS,QACnB,CAACC,EAAKC,IAAYD,GAAOC,EAAQnB,UAAY,IAC7C,EAEH,CAED,gBAAAoB,GACE,OAAO3E,KAAK+D,SAASS,QACnB,CAACC,EAAKC,IAAYD,GAAOC,EAAQlB,UAAY,IAC7C,EAEH,CAED,gBAAAoB,GACE,OAAO5E,KAAK+D,SAASS,QACnB,CAACC,EAAKC,IAAYD,GAAOC,EAAQjB,gBAAkB,IACnD,EAEH,CAED,cAAAoB,GACE,OAA6B,IAAzB7E,KAAK+D,SAASrC,OAAqB,EAErC1B,KAAK+D,SAASS,QAAO,CAACC,EAAKC,IAAYD,EAAMC,EAAQhB,iBAAiB,GACtE1D,KAAK+D,SAASrC,MAEjB,CAED,WAAAoD,GACE,OAA6B,IAAzB9E,KAAK+D,SAASrC,OAAqB,EAChCQ,KAAK6C,OACP/E,KAAK+D,SACLxC,KAAKmD,GAAYA,EAAQhB,kBACzBsB,QAAQC,GAASA,EAAO,IAE9B,CAED,eAAAC,GACE,OAA6B,IAAzBlF,KAAK+D,SAASrC,OAAqB,EAErC1B,KAAK+D,SAASS,QACZ,CAACC,EAAKC,IAAYD,EAAMC,EAAQf,kBAChC,GACE3D,KAAK+D,SAASrC,MAErB,CAED,YAAAyD,GACE,OAA6B,IAAzBnF,KAAK+D,SAASrC,OAAqB,EAChCQ,KAAKC,OACPnC,KAAK+D,SAASxC,KAAKmD,GAAYA,EAAQf,mBAE7C,EClFS,MAACyB,EAAe,CAC1BC,SAAU,WACVC,OAAQ,SACRC,UAAW,aCHN,MAAMC,EACX,WAAA/F,CAAY8D,EAAUkC,EAAa,MACjCzF,KAAKuD,SAAWA,EAChBvD,KAAKyF,WAAaA,CACnB,CAED,kBAAAC,GACE,OAAK1F,KAAKyF,YAAezF,KAAKuD,SACtBvD,KAAKyF,WAAazF,KAAKuD,SAAY,GADI,CAEhD,ECNI,MAAMoC,UAA0B9C,EACrC,WAAApD,CAAYC,EAAIC,EAAMmD,EAAOC,EAAaC,EAAUC,EAAM2C,GACxD9B,MAAMpE,EAAIC,EAAMmD,EAAOC,EAAaC,EAAUC,GAC9CjD,KAAK4F,aAAeA,EACpB5F,KAAK+D,SAAW,EACjB,CAED,UAAAC,CAAWT,EAAUkC,EAAa,MAChCzF,KAAK+D,SAAStD,KAAK,IAAI+E,EAAiBjC,EAAUkC,GACnD,CAED,aAAAxB,CAAcC,GACZlE,KAAK+D,SAASI,OAAOD,EAAc,EACpC,CAED,WAAAE,GACE,OAAOpE,KAAK+D,QACb,CAED,aAAAM,CAAcC,EAAOf,EAAUkC,GAC7BzF,KAAK+D,SAASO,GAAOf,SAAWA,GAAYvD,KAAK+D,SAASO,GAAOf,SACjEvD,KAAK+D,SAASO,GAAOmB,WACnBA,GAAczF,KAAK+D,SAASO,GAAOmB,UACtC,CAED,gBAAAlB,GACE,OAAOvE,KAAK+D,SAASS,QACnB,CAACC,EAAKC,IAAYD,GAAOC,EAAQnB,UAAY,IAC7C,EAEH,CAED,kBAAAsC,GACE,OAA6B,IAAzB7F,KAAK+D,SAASrC,OAAqB,EAChC1B,KAAKuE,mBAAqBvE,KAAK+D,SAASrC,MAChD,CAED,cAAAoE,GACE,OAA6B,IAAzB9F,KAAK+D,SAASrC,OAAqB,EAChCQ,KAAKC,OAAOnC,KAAK+D,SAASxC,KAAKmD,GAAYA,EAAQnB,WAC3D,CAED,oBAAAwC,GACE,OAA6B,IAAzB/F,KAAK+D,SAASrC,OAAqB,EAErC1B,KAAK+D,SAASS,QACZ,CAACC,EAAKC,IAAYD,GAAOC,EAAQe,YAAc,IAC/C,GACEzF,KAAK+D,SAASrC,MAErB,CAED,iBAAAsE,GACE,OAAOhG,KAAK+D,SAASS,QACnB,CAACC,EAAKC,IAAYD,EAAMC,EAAQgB,sBAChC,EAEH,CAED,mBAAAO,GACE,OAA6B,IAAzBjG,KAAK+D,SAASrC,OAAqB,EAChC1B,KAAKgG,oBAAsBhG,KAAK+D,SAASrC,MACjD,ECjEI,MAAMwE,EACX,WAAAzG,CAAY0G,EAAM/F,EAAS,MACzBJ,KAAKmG,KAAOA,EACZnG,KAAKI,OAASA,CACf,CAED,kBAAAgG,GACE,OAAKpG,KAAKI,QAAWJ,KAAKmG,KACnBjE,KAAKmE,MAAMrG,KAAKI,QAAU,EAAIJ,KAAKmG,KAAO,KADV,CAExC,ECNI,MAAMG,UAAyBzD,EACpC,WAAApD,CAAYC,EAAIC,EAAMmD,EAAOC,EAAaC,EAAUC,EAAMsD,EAAUC,GAClE1C,MAAMpE,EAAIC,EAAMmD,EAAOC,EAAaC,EAAUC,GAC9CjD,KAAKuG,SAAWA,EAChBvG,KAAKwG,KAAOA,GAAQ,EACrB,CAED,MAAAC,CAAON,EAAM/F,GACXJ,KAAKwG,KAAK/F,KAAK,IAAIyF,EAAIC,EAAM/F,GAC9B,CAED,SAAAsG,CAAUC,GACR3G,KAAKwG,KAAKrC,OAAOwC,EAAU,EAC5B,CAED,OAAAC,GACE,OAAO5G,KAAKwG,IACb,CAED,SAAAK,CAAUvC,EAAO6B,EAAM/F,GACrBJ,KAAKwG,KAAKlC,GAAO6B,KAAOA,GAAQnG,KAAKwG,KAAKlC,GAAO6B,KACjDnG,KAAKwG,KAAKlC,GAAOlE,OAASA,GAAUJ,KAAKwG,KAAKlC,GAAOlE,MACtD,CAED,mBAAA0G,GACE,OACE9G,KAAKwG,KAAKhC,QAAO,CAACC,EAAKsC,IAAQtC,EAAMsC,EAAIX,sBAAsB,GAC/DpG,KAAKwG,KAAK9E,MAEb,CAED,gBAAAsF,GACE,OAAO9E,KAAKC,OAAOnC,KAAKwG,KAAKjF,KAAK0F,GAAQA,EAAIb,uBAC/C,CAED,YAAAc,GACE,OAAOhF,KAAKC,OAAOnC,KAAKwG,KAAKjF,KAAK0F,GAAQA,EAAI7G,SAC/C,CAED,cAAA+G,GACE,OAAOnH,KAAKwG,KAAKhC,QACf,CAACC,EAAKwC,IAAQxC,GAAOwC,EAAI7G,QAAU,GAAK6G,EAAId,MAC5C,EAEH,EC1CI,MAAMiB,EACX,qBAAOC,CACLpE,EACAvD,EACAC,EACAmD,EACAC,EACAC,EACAsE,GAEA,OAAQrE,GACN,KAAKmC,EAAaC,SAChB,OAAOrF,KAAKuH,uBACV7H,EACAC,EACAmD,EACAC,EACAC,EACAsE,GAEJ,KAAKlC,EAAaE,OAChB,OAAOtF,KAAKwH,qBACV9H,EACAC,EACAmD,EACAC,EACAC,EACAsE,GAEJ,KAAKlC,EAAaG,UAChB,OAAOvF,KAAKyH,wBACV/H,EACAC,EACAmD,EACAC,EACAC,EACAsE,GAEJ,QACE,MAAM,IAAItF,MAAM,oCAAoCiB,KAEzD,CAED,6BAAOsE,CACL7H,EACAC,EACAmD,EACAC,EACAC,EACAuD,EACAC,EAAO,IAEP,OAAO,IAAIF,EACT5G,EACAC,EACAmD,EACAC,EACAC,EACAoC,EAAaC,SACbkB,EACAC,EAEH,CAED,2BAAOgB,CACL9H,EACAC,EACAmD,EACAC,EACAC,EACAa,GAEA,OAAO,IAAID,EACTlE,EACAC,EACAmD,EACAC,EACAC,EACAoC,EAAaE,OACbzB,EAEH,CAED,8BAAO4D,CACL/H,EACAC,EACAmD,EACAC,EACAC,EACA4C,GAEA,OAAO,IAAID,EACTjG,EACAC,EACAmD,EACAC,EACAC,EACAoC,EAAaG,UACbK,EAEH,EChGI,MAAM8B,EACX,WAAAjI,CAAYyB,GACVlB,KAAKkB,eAAiBA,EACtBlB,KAAK2H,UAAY3H,KAAKkB,eAAe0G,gBAAkB,GAGvD5H,KAAK6H,uBACN,CAED,qBAAAA,GAEE7H,KAAK2H,UAAY3H,KAAK2H,UAAUpG,KAAIuG,IAClC,IAAIC,EAiEJ,OA/DID,EAAa7E,OAASmC,EAAaC,UACrC0C,EAAW,IAAIzB,EACbwB,EAAapI,GACboI,EAAanI,KACbmI,EAAahF,MACbgF,EAAa/E,YACb+E,EAAa9E,SACb8E,EAAa7E,KACb6E,EAAavB,SACb,IAIEuB,EAAatB,MAAQsB,EAAatB,KAAK9E,QACzCoG,EAAatB,KAAKwB,SAAQf,IACxBc,EAAStB,OAAOQ,EAAId,KAAMc,EAAI7G,OAAO,KAIlC0H,EAAa7E,OAASmC,EAAaE,QAC1CyC,EAAW,IAAInE,EACbkE,EAAapI,GACboI,EAAanI,KACbmI,EAAahF,MACbgF,EAAa/E,YACb+E,EAAa9E,SACb8E,EAAa7E,KACb6E,EAAajE,YAIXiE,EAAa/D,UAAY+D,EAAa/D,SAASrC,QACjDoG,EAAa/D,SAASiE,SAAQtD,IAC5BqD,EAAS/D,WAAWU,EAAQnB,SAAUmB,EAAQlB,SAAUkB,EAAQjB,eAAe,KAI5EqE,EAAa7E,OAASmC,EAAaG,YAC1CwC,EAAW,IAAIpC,EACbmC,EAAapI,GACboI,EAAanI,KACbmI,EAAahF,MACbgF,EAAa/E,YACb+E,EAAa9E,SACb8E,EAAa7E,KACb6E,EAAalC,cAIXkC,EAAa/D,UAAY+D,EAAa/D,SAASrC,QACjDoG,EAAa/D,SAASiE,SAAQtD,IAC5BqD,EAAS/D,WAAWU,EAAQnB,SAAUmB,EAAQe,WAAW,KAM3DqC,EAAa5E,OAAS4E,EAAa5E,MAAMxB,QAC3CoG,EAAa5E,MAAM8E,SAAQ3E,IACzB0E,EAAS3E,QAAQC,EAAK,IAInB0E,CAAQ,GAElB,CAED,cAAAE,GACEjI,KAAKkB,eAAegH,cAAclI,KAAK2H,UACxC,CAED,kBAAAQ,GACE,OAAKnI,KAAK2H,UAAUjG,OACbQ,KAAKC,OAAOnC,KAAK2H,UAAUpG,KAAIwG,GAAYA,EAASrI,MAAO,EAD/B,CAEpC,CAED,sBAAA6H,CAAuB5H,EAAMmD,EAAOC,EAAaC,EAAUuD,GACzD,MAAM7G,EAAKM,KAAKmI,qBACVC,EAAchB,EAAgBG,uBAClC7H,EACAC,EACAmD,EACAC,EACAC,EACAuD,GAKF,OAFAvG,KAAK2H,UAAUlH,KAAK2H,GACpBpI,KAAKiI,iBACEG,CACR,CAED,oBAAAZ,CAAqB7H,EAAMmD,EAAOC,EAAaC,EAAUa,GACvD,MAAMnE,EAAKM,KAAKmI,qBACVC,EAAchB,EAAgBI,qBAClC9H,EACAC,EACAmD,EACAC,EACAC,EACAa,GAKF,OAFA7D,KAAK2H,UAAUlH,KAAK2H,GACpBpI,KAAKiI,iBACEG,CACR,CAED,uBAAAX,CAAwB9H,EAAMmD,EAAOC,EAAaC,EAAU4C,GAC1D,MAAMlG,EAAKM,KAAKmI,qBACVC,EAAchB,EAAgBK,wBAClC/H,EACAC,EACAmD,EACAC,EACAC,EACA4C,GAKF,OAFA5F,KAAK2H,UAAUlH,KAAK2H,GACpBpI,KAAKiI,iBACEG,CACR,CAED,qBAAAC,CACEpF,EACAtD,EACAmD,EACAC,EACAC,EACAsE,GAEA,MAAM5H,EAAKM,KAAKmI,qBACVC,EAAchB,EAAgBC,eAClCpE,EACAvD,EACAC,EACAmD,EACAC,EACAC,EACAsE,GAKF,OAFAtH,KAAK2H,UAAUlH,KAAK2H,GACpBpI,KAAKiI,iBACEG,CACR,CAED,cAAAE,CAAeC,GACbvI,KAAK2H,UAAY3H,KAAK2H,UAAU3C,QAC7B+C,GAAaA,EAASrI,KAAO6I,IAEhCvI,KAAKiI,gBACN,CAED,eAAAO,CAAgBD,GACd,OAAOvI,KAAK2H,UAAU5F,MAAMgG,GAAaA,EAASrI,KAAO6I,GAC1D,CAED,eAAAE,GACE,OAAOzI,KAAK2H,SACb,ECxLI,MAAMe,EACX,YAAAC,CAAaZ,GACX,MAAM,IAAI/F,MAAM,kDACjB,CAED,eAAA4G,CAAgBb,EAAUc,GACxB,MAAM,IAAI7G,MAAM,kDACjB,CAED,kBAAA8G,CAAmBf,EAAUzD,EAAOuE,GAClC,MAAM,IAAI7G,MAAM,kDACjB,CAED,aAAA+G,CAAchB,GACZ,MAAM,IAAI/F,MAAM,kDACjB,CAED,iBAAAgH,CAAkBC,EAAeC,GAC/B,MAAM,IAAIlH,MAAM,kDACjB,CAED,UAAAmH,CAAWpB,EAAUqB,GACnB,MAAM,IAAIpH,MAAM,kDACjB,CAED,cAAAqH,CAAeC,EAAQC,GACrB,MAAM,IAAIvH,MAAM,kDACjB,ECxBI,MAAMwH,UAAiCd,EAC5C,YAAAC,CAAaZ,GACX,MAAMK,EAAc,IAAI9B,EACtByB,EAASrI,GACTqI,EAASpI,KACToI,EAASjF,MACTiF,EAAShF,YACTgF,EAAS/E,SACT+E,EAAS9E,KACT8E,EAASxB,SACT,IAGIC,EAAOuB,EAASnB,QAClBmB,EAASnB,UACT6C,MAAMC,QAAQ3B,EAASvB,MACvBuB,EAASvB,KACT,GAeJ,OAbIA,GAAQA,EAAK9E,QACf8E,EAAKwB,SAASf,IAEVA,GACe,iBAARA,GACP,SAAUA,GACV,WAAYA,GAEZmB,EAAY3B,OAAOQ,EAAId,KAAMc,EAAI7G,OAClC,IAIEgI,CACR,CAED,eAAAQ,CAAgBb,EAAUc,GACxB,IAAKA,EAAK1C,OAAS0C,EAAKzI,OACtB,MAAM,IAAI4B,MAAM,kDAElB+F,EAAStB,OAAOoC,EAAK1C,KAAM0C,EAAKzI,OACjC,CAED,kBAAA0I,CAAmBf,EAAUzD,EAAOuE,GAClC,IAAKd,EAASvB,KAAKlC,GACjB,MAAM,IAAItC,MAAM,gBAAgBsC,eAElCyD,EAASlB,UAAUvC,EAAOuE,EAAK1C,KAAM0C,EAAKzI,OAC3C,CAED,aAAA2I,CAAchB,GACZ,MAAO,CACL4B,YAAa5B,EAASZ,iBACtByC,cAAe7B,EAASf,mBACxB6C,UAAW9B,EAASb,eAEvB,CAED,iBAAA8B,CAAkBC,EAAeC,GAC/B,MAAO,CACLY,qBACEZ,EAAalC,mBAAqBiC,EAAcjC,mBAClD+C,kBACEb,EAAahC,eAAiB+B,EAAc/B,eAC9C8C,oBACEd,EAAa/B,iBAAmB8B,EAAc9B,iBAEnD,CAED,UAAAgC,CAAWpB,EAAUqB,GACnB,GAAIrB,EAASvB,KAAK9E,SAAW0H,EAAa5C,KAAK9E,OAAQ,OAAO,EAE9D,IAAK,IAAIuI,EAAI,EAAGA,EAAIlC,EAASvB,KAAK9E,OAAQuI,IACxC,GACElC,EAASvB,KAAKyD,GAAG9D,OAASiD,EAAa5C,KAAKyD,GAAG9D,MAC/C4B,EAASvB,KAAKyD,GAAG7J,SAAWgJ,EAAa5C,KAAKyD,GAAG7J,OAEjD,OAAO,EAIX,OAAO,CACR,CAED,cAAAiJ,CAAeC,EAAQC,GACrBA,EAAO/C,KAAO,GAEd,IAAK,MAAMS,KAAOqC,EAAO9C,KACvB+C,EAAO9C,OAAOQ,EAAId,KAAMc,EAAI7G,OAE/B,ECzFI,MAAM8J,UAA+BxB,EAC1C,YAAAC,CAAaZ,GACX,MAAMK,EAAc,IAAIxE,EACtBmE,EAASrI,GACTqI,EAASpI,KACToI,EAASjF,MACTiF,EAAShF,YACTgF,EAAS/E,SACT+E,EAAS9E,KACT8E,EAASlE,YAGLE,EAAWgE,EAAS3D,YACtB2D,EAAS3D,cACTqF,MAAMC,QAAQ3B,EAAShE,UACvBgE,EAAShE,SACT,GAcJ,OAZIA,GAAYA,EAASrC,QACvBqC,EAASiE,SAAStD,IACZA,GAA8B,iBAAZA,GACpB0D,EAAYpE,WACVU,EAAQnB,SACRmB,EAAQlB,SACRkB,EAAQjB,eAEX,IAIE2E,CACR,CAED,eAAAQ,CAAgBb,EAAUc,GACxB,IAAKA,EAAKtF,WAAasF,EAAKrF,SAC1B,MAAM,IAAIxB,MAAM,sDAElB+F,EAAS/D,WAAW6E,EAAKtF,SAAUsF,EAAKrF,SAAUqF,EAAKpF,eACxD,CAED,kBAAAqF,CAAmBf,EAAUzD,EAAOuE,GAClC,IAAKd,EAAShE,SAASO,GACrB,MAAM,IAAItC,MAAM,oBAAoBsC,eAEtCyD,EAAS1D,cACPC,EACAuE,EAAKtF,SACLsF,EAAKrF,SACLqF,EAAKpF,eAER,CAED,aAAAsF,CAAchB,GACZ,MAAO,CACLoC,cAAepC,EAASpD,mBACxByF,cAAerC,EAASxD,mBACxB8F,SAAUtC,EAASjD,cACnBwF,YAAavC,EAASlD,iBACtB0F,UAAWxC,EAAS5C,eACpBqF,aAAczC,EAAS7C,kBACvBuF,cAAe1C,EAASnD,mBAE3B,CAED,iBAAAoE,CAAkBC,EAAeC,GAC/B,MAAO,CACLwB,sBACExB,EAAavE,mBAAqBsE,EAActE,mBAClDgG,sBACEzB,EAAa3E,mBAAqB0E,EAAc1E,mBAClDqG,iBACE1B,EAAapE,cAAgBmE,EAAcnE,cAC7C+F,kBACE3B,EAAa/D,eAAiB8D,EAAc9D,eAC9C2F,sBACE5B,EAAatE,mBAAqBqE,EAAcrE,mBAErD,CAED,UAAAuE,CAAWpB,EAAUqB,GACnB,GAAIrB,EAAShE,SAASrC,SAAW0H,EAAarF,SAASrC,OAAQ,OAAO,EAEtE,IAAK,IAAIuI,EAAI,EAAGA,EAAIlC,EAAShE,SAASrC,OAAQuI,IAC5C,GACElC,EAAShE,SAASkG,GAAG1G,WAAa6F,EAAarF,SAASkG,GAAG1G,UAC3DwE,EAAShE,SAASkG,GAAGzG,WAAa4F,EAAarF,SAASkG,GAAGzG,UAC3DuE,EAAShE,SAASkG,GAAGxG,iBACnB2F,EAAarF,SAASkG,GAAGxG,eAE3B,OAAO,EAIX,OAAO,CACR,CAED,cAAA4F,CAAeC,EAAQC,GACrBA,EAAOxF,SAAW,GAElB,IAAK,MAAMW,KAAW4E,EAAOvF,SAC3BwF,EAAOvF,WACLU,EAAQnB,SACRmB,EAAQlB,SACRkB,EAAQjB,eAGb,EC1GI,MAAMsH,UAAkCrC,EAC7C,YAAAC,CAAaZ,GACX,MAAMK,EAAc,IAAIzC,EACtBoC,EAASrI,GACTqI,EAASpI,KACToI,EAASjF,MACTiF,EAAShF,YACTgF,EAAS/E,SACT+E,EAAS9E,KACT8E,EAASnC,cAGL7B,EAAWgE,EAAS3D,YACtB2D,EAAS3D,cACTqF,MAAMC,QAAQ3B,EAAShE,UACvBgE,EAAShE,SACT,GAUJ,OARIA,GAAYA,EAASrC,QACvBqC,EAASiE,SAAStD,IACZA,GAA8B,iBAAZA,GACpB0D,EAAYpE,WAAWU,EAAQnB,SAAUmB,EAAQe,WAClD,IAIE2C,CACR,CAED,eAAAQ,CAAgBb,EAAUc,GACxB,IAAKA,EAAKtF,SACR,MAAM,IAAIvB,MAAM,4CAElB+F,EAAS/D,WAAW6E,EAAKtF,SAAUsF,EAAKpD,WACzC,CAED,kBAAAqD,CAAmBf,EAAUzD,EAAOuE,GAClC,IAAKd,EAAShE,SAASO,GACrB,MAAM,IAAItC,MAAM,oBAAoBsC,eAEtCyD,EAAS1D,cAAcC,EAAOuE,EAAKtF,SAAUsF,EAAKpD,WACnD,CAED,aAAAsD,CAAchB,GACZ,MAAO,CACLqC,cAAerC,EAASxD,mBACxByG,YAAajD,EAASjC,iBACtBmF,kBAAmBlD,EAAShC,uBAC5BmF,eAAgBnD,EAAS/B,oBACzBmF,iBAAkBpD,EAAS9B,sBAE9B,CAED,iBAAA+C,CAAkBC,EAAeC,GAC/B,MAAO,CACLyB,sBACEzB,EAAa3E,mBAAqB0E,EAAc1E,mBAClD6G,oBACElC,EAAapD,iBAAmBmD,EAAcnD,iBAChDuF,0BACEnC,EAAanD,uBACbkD,EAAclD,uBAChBuF,uBACEpC,EAAalD,oBAAsBiD,EAAcjD,oBAEtD,CAED,UAAAmD,CAAWpB,EAAUqB,GACnB,GAAIrB,EAAShE,SAASrC,SAAW0H,EAAarF,SAASrC,OAAQ,OAAO,EAEtE,IAAK,IAAIuI,EAAI,EAAGA,EAAIlC,EAAShE,SAASrC,OAAQuI,IAC5C,GACElC,EAAShE,SAASkG,GAAG1G,WAAa6F,EAAarF,SAASkG,GAAG1G,UAC3DwE,EAAShE,SAASkG,GAAGxE,aAAe2D,EAAarF,SAASkG,GAAGxE,WAE7D,OAAO,EAIX,OAAO,CACR,CAED,cAAA4D,CAAeC,EAAQC,GACrBA,EAAOxF,SAAW,GAElB,IAAK,MAAMW,KAAW4E,EAAOvF,SAC3BwF,EAAOvF,WAAWU,EAAQnB,SAAUmB,EAAQe,WAE/C,ECtFI,MAAM8F,EACX,WAAA9L,GACEO,KAAKwL,WAAa,CAChB,CAACpG,EAAaC,UAAW,IAAImE,EAC7B,CAACpE,EAAaE,QAAS,IAAI4E,EAC3B,CAAC9E,EAAaG,WAAY,IAAIwF,EAEjC,CAED,WAAAU,CAAYC,GACV,MAAMC,EAAW3L,KAAKwL,WAAWE,GACjC,IAAKC,EACH,MAAM,IAAI3J,MAAM,wCAAwC0J,KAE1D,OAAOC,CACR,CAED,gBAAAC,CAAiBF,EAAcC,GAC7B3L,KAAKwL,WAAWE,GAAgBC,CACjC,EClBI,MAAME,EACX,WAAApM,CAAYC,EAAIoM,EAASnM,EAAMoD,EAAa4E,GAC1C3H,KAAKN,GAAKA,EACVM,KAAK8L,QAAUA,EACf9L,KAAKL,KAAOA,EACZK,KAAK+C,YAAcA,GAAe,GAClC/C,KAAK2H,UAAY,GACjB3H,KAAKkD,MAAQ,GAGblD,KAAK+L,gBAAkB,IAAIR,CAC5B,CAED,iBAAAS,CAAkBrM,EAAMoD,GACtB/C,KAAKL,KAAOA,GAAQK,KAAKL,KACzBK,KAAK+C,YAAcA,GAAe/C,KAAK+C,WACxC,CAED,WAAAkJ,CAAYlE,GACV,IACE,MACMK,EADWpI,KAAK+L,gBAAgBN,YAAY1D,EAAS9E,MAC9B0F,aAAaZ,GAE1C,OADA/H,KAAK2H,UAAUlH,KAAK2H,GACbA,CACR,CAAC,MAAO8D,GACP,MAAM,IAAIlK,MAAM,2BAA2BkK,EAAMC,UAClD,CACF,CAED,eAAA3D,CAAgBD,GACd,OAAOvI,KAAK2H,UAAU5F,MAAMqK,GAAOA,EAAG1M,KAAO6I,GAC9C,CAED,eAAAK,CAAgBL,EAAYM,GAC1B,MAAMd,EAAW/H,KAAKwI,gBAAgBD,GACtC,IAAKR,EACH,MAAM,IAAI/F,MAAM,oBAAoBuG,eAKtC,OAFiBvI,KAAK+L,gBAAgBN,YAAY1D,EAAS9E,MAClD2F,gBAAgBb,EAAUc,GAC5Bd,CACR,CAGD,gBAAAsE,CAAiB9D,EAAYpC,EAAM/F,GACjC,OAAOJ,KAAK4I,gBAAgBL,EAAY,CAAEpC,OAAM/F,UACjD,CAED,oBAAAkM,CAAqB/D,EAAYhF,EAAUC,EAAUC,EAAiB,MACpE,OAAOzD,KAAK4I,gBAAgBL,EAAY,CACtChF,WACAC,WACAC,kBAEH,CAED,6BAAA8I,CAA8BhE,EAAYhF,EAAUkC,EAAa,MAC/D,OAAOzF,KAAK4I,gBAAgBL,EAAY,CAAEhF,WAAUkC,cACrD,CAED,kBAAAqD,CAAmBP,EAAYjE,EAAOuE,GACpC,MAAMd,EAAW/H,KAAKwI,gBAAgBD,GACtC,IAAKR,EACH,MAAM,IAAI/F,MAAM,oBAAoBuG,eAGrBvI,KAAK+L,gBAAgBN,YAAY1D,EAAS9E,MAClD6F,mBAAmBf,EAAUzD,EAAOuE,EAC9C,CAGD,mBAAA2D,CAAoBjE,EAAY5B,EAAUR,EAAM/F,GAC9C,OAAOJ,KAAK8I,mBAAmBP,EAAY5B,EAAU,CAAER,OAAM/F,UAC9D,CAED,uBAAAqM,CACElE,EACArE,EACAX,EACAC,EACAC,GAEA,OAAOzD,KAAK8I,mBAAmBP,EAAYrE,EAAc,CACvDX,WACAC,WACAC,kBAEH,CAED,gCAAAiJ,CACEnE,EACArE,EACAX,EACAkC,GAEA,OAAOzF,KAAK8I,mBAAmBP,EAAYrE,EAAc,CACvDX,WACAkC,cAEH,CAED,cAAA6C,CAAeC,GACbvI,KAAK2H,UAAY3H,KAAK2H,UAAU3C,QAC7B+C,GAAaA,EAASrI,KAAO6I,GAEjC,CAED,kBAAAoE,CAAmBpE,EAAYjE,GAC7B,MAAMyD,EAAW/H,KAAKwI,gBAAgBD,GACtC,IAAKR,EACH,MAAM,IAAI/F,MAAM,oBAAoBuG,eAGrBvI,KAAK+L,gBAAgBN,YAAY1D,EAAS9E,MAErC,aAAlB8E,EAAS9E,MAAuB8E,EAASvB,KAC3CuB,EAASvB,KAAKrC,OAAOG,EAAO,GAET,WAAlByD,EAAS9E,MAAuC,cAAlB8E,EAAS9E,OACxC8E,EAAShE,UAETgE,EAAShE,SAASI,OAAOG,EAAO,EAEnC,CAGD,qBAAAsI,CAAsBrE,EAAY5B,GAChC,OAAO3G,KAAK2M,mBAAmBpE,EAAY5B,EAC5C,CAED,yBAAAkG,CAA0BtE,EAAYrE,GACpC,OAAOlE,KAAK2M,mBAAmBpE,EAAYrE,EAC5C,CAED,kCAAA4I,CAAmCvE,EAAYrE,GAC7C,OAAOlE,KAAK2M,mBAAmBpE,EAAYrE,EAC5C,CAED,OAAAd,CAAQC,GACNrD,KAAKkD,MAAMzC,KAAK4C,EACjB,CAED,UAAA0J,CAAWC,GACThN,KAAKkD,MAAMiB,OAAO6I,EAAW,EAC9B,ECnJI,MAAMC,EACX,WAAAxN,CAAYyN,EAAiBhM,GAC3BlB,KAAKkN,gBAAkBA,EACvBlN,KAAKkB,eAAiBA,EACtBlB,KAAKM,aAAeN,KAAKkB,eAAeN,mBAAqB,GAC7DZ,KAAK+L,gBAAkB,IAAIR,EAG3BvL,KAAKmN,0BACN,CAED,wBAAAA,GAEEnN,KAAKM,aAAeN,KAAKM,aAAaiB,KAAI6L,IACxC,MAAMzM,EAAc,IAAIkL,EACtBuB,EAAS1N,GACT0N,EAAStB,QACTsB,EAASzN,KACTyN,EAASrK,aAgDX,OA5CIqK,EAASlK,OAASkK,EAASlK,MAAMxB,QACnC0L,EAASlK,MAAM8E,SAAQ3E,IACrB1C,EAAYyC,QAAQC,EAAK,IAKzB+J,EAASzF,WAAayF,EAASzF,UAAUjG,QAC3C0L,EAASzF,UAAUK,SAAQF,IAEzB,MAAMuF,EAAmBrN,KAAKkN,gBAAgB1E,gBAAgBV,EAAapI,IACvE2N,IAEmB1M,EAAYsL,YAAYoB,GAGzCvF,EAAa7E,OAASmC,EAAaC,UAAYyC,EAAatB,KAC9DsB,EAAatB,KAAKwB,SAAQf,IACxBtG,EAAY0L,iBAAiBvE,EAAapI,GAAIuH,EAAId,KAAMc,EAAI7G,OAAO,IAG9D0H,EAAa7E,OAASmC,EAAaE,QAAUwC,EAAa/D,SACjE+D,EAAa/D,SAASiE,SAAQtD,IAC5B/D,EAAY2L,qBACVxE,EAAapI,GACbgF,EAAQnB,SACRmB,EAAQlB,SACRkB,EAAQjB,eACT,IAGIqE,EAAa7E,OAASmC,EAAaG,WAAauC,EAAa/D,UACpE+D,EAAa/D,SAASiE,SAAQtD,IAC5B/D,EAAY4L,8BACVzE,EAAapI,GACbgF,EAAQnB,SACRmB,EAAQe,WACT,IAGN,IAIE9E,CAAW,GAErB,CAED,iBAAA2M,GACEtN,KAAKkB,eAAeqM,iBAAiBvN,KAAKM,aAC3C,CAED,qBAAAkN,GACE,OAAKxN,KAAKM,aAAaoB,OAChBQ,KAAKC,OAAOnC,KAAKM,aAAaiB,KAAIkM,GAAQA,EAAK/N,MAAO,EADvB,CAEvC,CAED,iBAAAgO,CAAkB5B,EAASnM,EAAMoD,GAC/B,MAAMrD,EAAKM,KAAKwN,wBACV7M,EAAc,IAAIkL,EAAYnM,EAAIoM,EAASnM,EAAMoD,GAIvD,OAFA/C,KAAKM,aAAaG,KAAKE,GACvBX,KAAKsN,oBACE3M,CACR,CAED,iBAAAgN,CAAkBC,GAChB5N,KAAKM,aAAeN,KAAKM,aAAa0E,QACnCrE,GAAgBA,EAAYjB,KAAOkO,IAEtC5N,KAAKsN,mBACN,CAED,wBAAAO,CAAyBD,EAAerF,GACtC,MAAM5H,EAAcX,KAAK8N,mBAAmBF,GACtC7F,EAAW/H,KAAKkN,gBAAgB1E,gBAAgBD,GAEtD,IAAK5H,EACH,MAAM,IAAIqB,MAAM,wBAAwB4L,eAG1C,IAAK7F,EACH,MAAM,IAAI/F,MAAM,mBAAmBuG,gBAKrC,OAFA5H,EAAYsL,YAAYlE,GACxB/H,KAAKsN,oBACE3M,CACR,CAED,6BAAAoN,CAA8BH,EAAerF,GAC3C,MAAM5H,EAAcX,KAAK8N,mBAAmBF,GAE5C,IAAKjN,EACH,MAAM,IAAIqB,MAAM,wBAAwB4L,eAK1C,OAFAjN,EAAY2H,eAAeC,GAC3BvI,KAAKsN,oBACE3M,CACR,CAED,yBAAAqN,CAA0BJ,EAAerF,EAAYM,GACnD,MAAMlI,EAAcX,KAAK8N,mBAAmBF,GAE5C,IAAKjN,EACH,MAAM,IAAIqB,MAAM,wBAAwB4L,eAG1C,MAAM7F,EAAWpH,EAAYgH,UAAU5F,MACpCgG,GAAaA,EAASrI,KAAO6I,IAGhC,IAAKR,EACH,MAAM,IAAI/F,MAAM,mBAAmBuG,wBAGrC,IAIE,OAHiBvI,KAAK+L,gBAAgBN,YAAY1D,EAAS9E,MAClD2F,gBAAgBb,EAAUc,GACnC7I,KAAKsN,oBACEvF,CACR,CAAC,MAAOmE,GACP,MAAM,IAAIlK,MAAM,6BAA6BkK,EAAMC,UACpD,CACF,CAED,6BAAA8B,CAA8BL,EAAerF,EAAYpC,EAAM/F,GAC7D,OAAOJ,KAAKgO,0BAA0BJ,EAAerF,EAAY,CAC/DpC,OACA/F,UAEH,CAED,iCAAA8N,CACEN,EACArF,EACAhF,EACAC,EACAC,EAAiB,MAEjB,OAAOzD,KAAKgO,0BAA0BJ,EAAerF,EAAY,CAC/DhF,WACAC,WACAC,kBAEH,CAED,0CAAA0K,CACEP,EACArF,EACAhF,EACAkC,EAAa,MAEb,OAAOzF,KAAKgO,0BAA0BJ,EAAerF,EAAY,CAC/DhF,WACAkC,cAEH,CAED,4BAAA2I,CAA6BR,EAAerF,EAAYjE,EAAOuE,GAC7D,MAAMlI,EAAcX,KAAK8N,mBAAmBF,GAE5C,IAAKjN,EACH,MAAM,IAAIqB,MAAM,wBAAwB4L,eAG1C,MAAM7F,EAAWpH,EAAYgH,UAAU5F,MACpCgG,GAAaA,EAASrI,KAAO6I,IAGhC,IAAKR,EACH,MAAM,IAAI/F,MAAM,mBAAmBuG,wBAGrC,IAIE,OAHiBvI,KAAK+L,gBAAgBN,YAAY1D,EAAS9E,MAClD6F,mBAAmBf,EAAUzD,EAAOuE,GAC7C7I,KAAKsN,oBACEvF,CACR,CAAC,MAAOmE,GACP,MAAM,IAAIlK,MAAM,6BAA6BkK,EAAMC,UACpD,CACF,CAED,mBAAAK,CAAoBoB,EAAerF,EAAY5B,EAAUR,EAAM/F,GAC7D,OAAOJ,KAAKoO,6BACVR,EACArF,EACA5B,EACA,CAAER,OAAM/F,UAEX,CAED,uBAAAqM,CACEmB,EACArF,EACArE,EACAX,EACAC,EACAC,GAEA,OAAOzD,KAAKoO,6BACVR,EACArF,EACArE,EACA,CAAEX,WAAUC,WAAUC,kBAEzB,CAED,gCAAAiJ,CACEkB,EACArF,EACArE,EACAX,EACAkC,GAEA,OAAOzF,KAAKoO,6BACVR,EACArF,EACArE,EACA,CAAEX,WAAUkC,cAEf,CAED,8BAAA4I,CAA+BT,EAAerF,EAAYjE,GACxD,MAAM3D,EAAcX,KAAK8N,mBAAmBF,GAE5C,IAAKjN,EACH,MAAM,IAAIqB,MAAM,wBAAwB4L,eAK1C,OAFAjN,EAAYgM,mBAAmBpE,EAAYjE,GAC3CtE,KAAKsN,oBACE3M,CACR,CAED,qBAAAiM,CAAsBgB,EAAerF,EAAY5B,GAC/C,OAAO3G,KAAKqO,+BACVT,EACArF,EACA5B,EAEH,CAED,yBAAAkG,CAA0Be,EAAerF,EAAYrE,GACnD,OAAOlE,KAAKqO,+BACVT,EACArF,EACArE,EAEH,CAED,kBAAA4J,CAAmBF,GACjB,OAAO5N,KAAKM,aAAayB,MACtBpB,GAAgBA,EAAYjB,KAAOkO,GAEvC,CAED,sBAAAU,CAAuBC,GACrB,OAAOvO,KAAKM,aAAa0E,QAAQyI,GAASA,EAAK3B,UAAYyC,GAC5D,CAED,kBAAAC,GACE,OAAOxO,KAAKM,YACb,EChSI,MAAMmO,EACX,WAAAhP,CAAYC,EAAIoM,EAAS5L,EAAMuN,EAAO,MACpCzN,KAAKN,GAAKA,EACVM,KAAK8L,QAAUA,EACf9L,KAAKE,KAAOA,GAAQ,IAAIC,KACxBH,KAAKyN,KAAOA,EACZzN,KAAK2H,UAAY,GAEjB3H,KAAK+L,gBAAkB,IAAIR,EAEvBkC,GAAQA,EAAK9F,YACf3H,KAAK2H,UAAY8F,EAAK9F,UACnBpG,KAAK6K,IACJ,IAEE,OADiBpM,KAAK+L,gBAAgBN,YAAYW,EAAGnJ,MACrC0F,aAAayD,EAC9B,CAAC,MAAOF,GAEP,OADAwC,QAAQxC,MAAM,2BAA2BA,EAAMC,WACxC,IACR,KAEFnH,QAAQoH,GAAc,OAAPA,IAErB,CAED,WAAAH,CAAYlE,GACV,IACE,MACMK,EADWpI,KAAK+L,gBAAgBN,YAAY1D,EAAS9E,MAC9B0F,aAAaZ,GAE1C,OADA/H,KAAK2H,UAAUlH,KAAK2H,GACbA,CACR,CAAC,MAAO8D,GACP,MAAM,IAAIlK,MAAM,2BAA2BkK,EAAMC,UAClD,CACF,CAED,eAAA3D,CAAgBD,GACd,OAAOvI,KAAK2H,UAAU5F,MAAMqK,GAAOA,EAAG1M,KAAO6I,GAC9C,CAED,kBAAAoG,CAAmBpG,EAAYM,GAC7B,MAAMd,EAAW/H,KAAKwI,gBAAgBD,GACtC,IAAKR,EACH,MAAM,IAAI/F,MAAM,oBAAoBuG,eAGrBvI,KAAK+L,gBAAgBN,YAAY1D,EAAS9E,MAClD2F,gBAAgBb,EAAUc,EACpC,CAED,SAAA+F,CAAUrG,EAAYpC,EAAM/F,GAC1B,OAAOJ,KAAK2O,mBAAmBpG,EAAY,CAAEpC,OAAM/F,UACpD,CAED,mBAAAyO,CAAoBtG,EAAYhF,EAAUC,EAAUC,EAAiB,MACnE,OAAOzD,KAAK2O,mBAAmBpG,EAAY,CACzChF,WACAC,WACAC,kBAEH,CAED,sBAAAqL,CAAuBvG,EAAYhF,EAAUkC,EAAa,MACxD,OAAOzF,KAAK2O,mBAAmBpG,EAAY,CAAEhF,WAAUkC,cACxD,CAED,kBAAAqD,CAAmBP,EAAYjE,EAAOuE,GACpC,MAAMd,EAAW/H,KAAKwI,gBAAgBD,GACtC,IAAKR,EACH,MAAM,IAAI/F,MAAM,oBAAoBuG,eAGrBvI,KAAK+L,gBAAgBN,YAAY1D,EAAS9E,MAClD6F,mBAAmBf,EAAUzD,EAAOuE,EAC9C,CAED,SAAAhC,CAAU0B,EAAY5B,EAAUR,EAAM/F,GACpC,OAAOJ,KAAK8I,mBAAmBP,EAAY5B,EAAU,CAAER,OAAM/F,UAC9D,CAED,mBAAA2O,CACExG,EACArE,EACAX,EACAC,EACAC,GAEA,OAAOzD,KAAK8I,mBAAmBP,EAAYrE,EAAc,CACvDX,WACAC,WACAC,kBAEH,CAED,sBAAAuL,CAAuBzG,EAAYrE,EAAcX,EAAUkC,GACzD,OAAOzF,KAAK8I,mBAAmBP,EAAYrE,EAAc,CACvDX,WACAkC,cAEH,CAED,uBAAAwJ,CAAwBvD,EAAcwD,GACpC,OAAOlP,KAAK2H,UACT3C,QAAQoH,GAAOA,EAAGnJ,OAASyI,IAC3BlH,QAAO,CAAC2K,EAAOpH,IAGPoH,GAFUnP,KAAK+L,gBAAgBN,YAAY1D,EAAS9E,MACpC8F,cAAchB,GACfmH,IAAa,IAClC,EACN,CAED,cAAA/H,GACE,OAAOnH,KAAKiP,wBAAwB7J,EAAaC,SAAU,cAC5D,CAED,gBAAAV,GACE,OAAO3E,KAAKiP,wBAAwB7J,EAAaE,OAAQ,gBAC1D,CAED,gBAAAf,GACE,OAAOvE,KAAKiP,wBAAwB7J,EAAaE,OAAQ,gBAC1D,CAED,gBAAAV,GACE,OAAO5E,KAAKiP,wBAAwB7J,EAAaE,OAAQ,gBAC1D,CAED,yBAAA8J,GACE,OAAOpP,KAAKiP,wBACV7J,EAAaG,UACb,gBAEH,CAED,uBAAA8J,GACE,MAAMC,EAAYtP,KAAK2H,UACpB3C,QAAQoH,GAAOA,EAAGnJ,OAASmC,EAAaG,YACxChE,KAAKwG,GACa/H,KAAK+L,gBAAgBN,YAAY1D,EAAS9E,MACpC8F,cAAchB,GACxBiD,aAAe,IAGhC,OAAOsE,EAAU5N,OAASQ,KAAKC,OAAOmN,GAAa,CACpD,CAED,0BAAAC,GACE,OAAOvP,KAAKiP,wBACV7J,EAAaG,UACb,iBAEH,CAED,kBAAAiK,GACE,IAAKxP,KAAKyN,KAAM,OAAO,EAEvB,GAAIzN,KAAKyN,KAAK9F,UAAUjG,OAAS1B,KAAK2H,UAAUjG,OAAQ,OAAO,EAE/D,IAAK,MAAMqG,KAAY/H,KAAK2H,UAAW,CACrC,MAAMyB,EAAepJ,KAAKyN,KAAK9F,UAAU5F,MACtCqK,GAAOA,EAAG1M,KAAOqI,EAASrI,KAG7B,IAAK0J,EAAc,OAAO,EAG1B,GADiBpJ,KAAK+L,gBAAgBN,YAAY1D,EAAS9E,MAC9CkG,WAAWpB,EAAUqB,GAChC,OAAO,CAEV,CAED,OAAO,CACR,CAED,cAAAqG,GACE,IAAKzP,KAAKyN,KAAM,OAAO,EAEvB,IAAK,MAAM1F,KAAY/H,KAAK2H,UAAW,CACrC,MAAMyB,EAAepJ,KAAKyN,KAAK9F,UAAU5F,MACtCqK,GAAOA,EAAG1M,KAAOqI,EAASrI,KAG7B,GAAI0J,EAAc,CACCpJ,KAAK+L,gBAAgBN,YAAY1D,EAAS9E,MAClDoG,eAAetB,EAAUqB,EACnC,CACF,CAED,OAAO,CACR,EC9LI,MAAMsG,EACX,WAAAjQ,CAAYyN,EAAiByC,EAAoBzO,GAC/ClB,KAAKkN,gBAAkBA,EACvBlN,KAAK2P,mBAAqBA,EAC1B3P,KAAKkB,eAAiBA,EACtBlB,KAAK4P,SAAW5P,KAAKkB,eAAe2O,eAAiB,GAGrD7P,KAAK8P,sBACN,CAED,oBAAAA,GAEE9P,KAAK4P,SAAW5P,KAAK4P,SAASrO,KAAIwO,IAChC,IAAItC,EAAO,KAGPsC,EAAYtC,WAAgCuC,IAAxBD,EAAYtC,KAAK/N,KACvC+N,EAAOzN,KAAK2P,mBAAmB7B,mBAAmBiC,EAAYtC,KAAK/N,KAIrE,MAAMoB,EAAU,IAAI2N,EAClBsB,EAAYrQ,GACZqQ,EAAYjE,QACZ,IAAI3L,KAAK4P,EAAY7P,MACrBuN,GA8CF,OA1CIsC,EAAYpI,WAAaoI,EAAYpI,UAAUjG,QACjDqO,EAAYpI,UAAUK,SAAQF,IAE5B,IAAKhH,EAAQ0H,gBAAgBV,EAAapI,IAAK,CAE7C,MAAM2N,EAAmBrN,KAAKkN,gBAAgB1E,gBAAgBV,EAAapI,IACvE2N,IAEsBvM,EAAQmL,YAAYoB,GAGxCvF,EAAatB,MAAQsB,EAAatB,KAAK9E,OACzCoG,EAAatB,KAAKwB,SAAQf,IACxBnG,EAAQ8N,UAAU9G,EAAapI,GAAIuH,EAAId,KAAMc,EAAI7G,OAAO,IAGnD0H,EAAa/D,UAAY+D,EAAa/D,SAASrC,SAC5B,WAAtBoG,EAAa7E,KACf6E,EAAa/D,SAASiE,SAAQtD,IAC5B5D,EAAQ+N,oBACN/G,EAAapI,GACbgF,EAAQnB,SACRmB,EAAQlB,SACRkB,EAAQjB,eACT,IAG0B,cAAtBqE,EAAa7E,MACpB6E,EAAa/D,SAASiE,SAAQtD,IAC5B5D,EAAQgO,uBACNhH,EAAapI,GACbgF,EAAQnB,SACRmB,EAAQe,WACT,KAKV,KAIE3E,CAAO,GAEjB,CAED,aAAAmP,GACEjQ,KAAKkB,eAAegP,aAAalQ,KAAK4P,SACvC,CAED,iBAAAO,GACE,OAAKnQ,KAAK4P,SAASlO,OACZQ,KAAKC,OAAOnC,KAAK4P,SAASrO,KAAIT,GAAWA,EAAQpB,MAAO,EAD7B,CAEnC,CAED,aAAA0Q,CAActE,EAAS5L,EAAO,KAAM0N,GAClC,IAAIH,EAAO,KACX,QAAsBuC,IAAlBpC,IACFH,EAAOzN,KAAK2P,mBAAmB7B,mBAAmBF,IAC7CH,GACH,MAAM,IAAIzL,MAAM,wBAAwB4L,eAI5C,MAAMlO,EAAKM,KAAKmQ,oBACVrP,EAAU,IAAI2N,EAAQ/O,EAAIoM,EAAS5L,GAAQ,IAAIC,KAAQsN,GAI7D,OAFAzN,KAAK4P,SAASnP,KAAKK,GACnBd,KAAKiQ,gBACEnP,CACR,CAED,oBAAAuP,CAAqBC,EAAW/H,GAC9B,MAAMzH,EAAUd,KAAKuQ,eAAeD,GAC9BvI,EAAW/H,KAAKkN,gBAAgB1E,gBAAgBD,GAEtD,IAAKzH,EACH,MAAM,IAAIkB,MAAM,mBAAmBsO,gBAGrC,IAAKvI,EACH,MAAM,IAAI/F,MAAM,mBAAmBuG,gBAKrC,OAFsBzH,EAAQmL,YAAYlE,GAC1C/H,KAAKiQ,gBACEnP,CACR,CAED,kBAAA0P,CAAmBF,EAAW/H,EAAYpC,EAAM/F,GAC9C,MAAMU,EAAUd,KAAKuQ,eAAeD,GACpC,IAAKxP,EACH,MAAM,IAAIkB,MAAM,mBAAmBsO,gBAGrCxP,EAAQ8N,UAAUrG,EAAYpC,EAAM/F,GACpCJ,KAAKiQ,eACN,CAED,kBAAAQ,CAAmBH,EAAW/H,EAAY5B,EAAUR,EAAM/F,GACxD,MAAMU,EAAUd,KAAKuQ,eAAeD,GACpC,IAAKxP,EACH,MAAM,IAAIkB,MAAM,mBAAmBsO,gBAGrCxP,EAAQ+F,UAAU0B,EAAY5B,EAAUR,EAAM/F,GAC9CJ,KAAKiQ,eACN,CAED,4BAAAS,CACEJ,EACA/H,EACAhF,EACAC,EACAC,EAAiB,MAEjB,MAAM3C,EAAUd,KAAKuQ,eAAeD,GACpC,IAAKxP,EACH,MAAM,IAAIkB,MAAM,mBAAmBsO,gBAGrCxP,EAAQ+N,oBAAoBtG,EAAYhF,EAAUC,EAAUC,GAC5DzD,KAAKiQ,eACN,CAED,4BAAAU,CACEL,EACA/H,EACArE,EACAX,EACAC,EACAC,GAEA,MAAM3C,EAAUd,KAAKuQ,eAAeD,GACpC,IAAKxP,EACH,MAAM,IAAIkB,MAAM,mBAAmBsO,gBAGrCxP,EAAQiO,oBACNxG,EACArE,EACAX,EACAC,EACAC,GAEFzD,KAAKiQ,eACN,CAED,+BAAAW,CACEN,EACA/H,EACAhF,EACAkC,EAAa,MAEb,MAAM3E,EAAUd,KAAKuQ,eAAeD,GACpC,IAAKxP,EACH,MAAM,IAAIkB,MAAM,mBAAmBsO,gBAGrCxP,EAAQgO,uBAAuBvG,EAAYhF,EAAUkC,GACrDzF,KAAKiQ,eACN,CAED,+BAAAY,CACEP,EACA/H,EACArE,EACAX,EACAkC,GAEA,MAAM3E,EAAUd,KAAKuQ,eAAeD,GACpC,IAAKxP,EACH,MAAM,IAAIkB,MAAM,mBAAmBsO,gBAGrCxP,EAAQkO,uBACNzG,EACArE,EACAX,EACAkC,GAEFzF,KAAKiQ,eACN,CAED,cAAAM,CAAeD,GACb,OAAOtQ,KAAK4P,SAAS7N,MAAMjB,GAAYA,EAAQpB,KAAO4Q,GACvD,CAED,kBAAAQ,CAAmBvC,GACjB,OAAOvO,KAAK4P,SAAS5K,QAAQlE,GAAYA,EAAQgL,UAAYyC,GAC9D,CAED,cAAAwC,GACE,OAAO/Q,KAAK4P,QACb,CAED,wBAAAoB,CAAyBV,GACvB,MAAMxP,EAAUd,KAAKuQ,eAAeD,GACpC,IAAKxP,EACH,MAAM,IAAIkB,MAAM,mBAAmBsO,gBAErC,OAAOxP,EAAQqG,gBAChB,CAED,0BAAA8J,CAA2BX,GACzB,MAAMxP,EAAUd,KAAKuQ,eAAeD,GACpC,IAAKxP,EACH,MAAM,IAAIkB,MAAM,mBAAmBsO,gBAErC,OAAOxP,EAAQ6D,kBAChB,CAED,0BAAAuM,CAA2BZ,GACzB,MAAMxP,EAAUd,KAAKuQ,eAAeD,GACpC,IAAKxP,EACH,MAAM,IAAIkB,MAAM,mBAAmBsO,gBAErC,OAAOxP,EAAQyD,kBAChB,CAED,mCAAA4M,CAAoCb,GAClC,MAAMxP,EAAUd,KAAKuQ,eAAeD,GACpC,IAAKxP,EACH,MAAM,IAAIkB,MAAM,mBAAmBsO,gBAErC,OAAOxP,EAAQsO,2BAChB,CAED,iCAAAgC,CAAkCd,GAChC,MAAMxP,EAAUd,KAAKuQ,eAAeD,GACpC,IAAKxP,EACH,MAAM,IAAIkB,MAAM,mBAAmBsO,gBAErC,OAAOxP,EAAQuO,yBAChB,CAED,oCAAAgC,CAAqCf,GACnC,MAAMxP,EAAUd,KAAKuQ,eAAeD,GACpC,IAAKxP,EACH,MAAM,IAAIkB,MAAM,mBAAmBsO,gBAErC,OAAOxP,EAAQyO,4BAChB,CAED,kBAAAC,CAAmBc,GACjB,MAAMxP,EAAUd,KAAKuQ,eAAeD,GACpC,IAAKxP,EACH,MAAM,IAAIkB,MAAM,mBAAmBsO,gBAErC,OAAOxP,EAAQ0O,oBAChB,CAED,uBAAA8B,CAAwBhB,GACtB,MAAMxP,EAAUd,KAAKuQ,eAAeD,GACpC,IAAKxP,EACH,MAAM,IAAIkB,MAAM,mBAAmBsO,gBAErC,MAAMiB,EAASzQ,EAAQ2O,iBAEvB,OADAzP,KAAKiQ,gBACEsB,CACR,ECjSI,MAAMC,EACX,WAAA/R,CAAYgS,EAAaC,GACvB1R,KAAKyR,YAAcA,EACnBzR,KAAK0R,eAAiBA,EACtB1R,KAAK+L,gBAAkB,IAAIR,CAC5B,CAED,qBAAAoG,CAAsBpD,EAAQqD,EAAY,KAAMC,EAAU,MACxD,MAAMpQ,EAAOzB,KAAKyR,YAAY3P,YAAYyM,GAC1C,IAAK9M,EACH,MAAM,IAAIO,MAAM,gBAAgBuM,eAGlC,MAAMuD,EAAoBrQ,EAAKxB,cACzB8R,EAAQH,EAAY,IAAIzR,KAAKyR,GAAa,KAC1CI,EAAMH,EAAU,IAAI1R,KAAK0R,GAAW,KAEpCI,EAAcH,EAAkB9M,QAAQ5E,IAC5C,MAAM8R,EAAa9R,EAAOF,KAC1B,QAAS6R,GAASG,GAAcH,MAAYC,GAAOE,GAAcF,EAAI,IAGvE,GAA2B,IAAvBC,EAAYvQ,OACd,MAAO,CACLyQ,mBAAoB,EACpBF,YAAa,IAOjB,MAAO,CACLE,mBAHAF,EAAYA,EAAYvQ,OAAS,GAAGtB,OAAS6R,EAAY,GAAG7R,OAI5D6R,cAEH,CAED,iBAAAG,CAAkB7D,EAAQqD,EAAY,KAAMC,EAAU,MACpD,MAAMjC,EAAW5P,KAAK0R,eAAeZ,mBAAmBvC,GAElDwD,EAAQH,EAAY,IAAIzR,KAAKyR,GAAa,KAC1CI,EAAMH,EAAU,IAAI1R,KAAK0R,GAAW,KAE1C,OAAOjC,EAAS5K,QAAQlE,IACtB,MAAMuR,EAAcvR,EAAQZ,KAC5B,QAAS6R,GAASM,GAAeN,MAAYC,GAAOK,GAAeL,EAAI,GAE1E,CAED,kBAAAM,CAAmB/D,EAAQqD,EAAY,KAAMC,EAAU,MACrD,MAAMU,EAAiBvS,KAAKoS,kBAAkB7D,EAAQqD,EAAWC,GAEjE,GAA8B,IAA1BU,EAAe7Q,OACjB,MAAO,CACLsI,oBAAqB,EACrBU,sBAAuB,EACvBC,sBAAuB,EACvB4H,eAAgB,IAuBpB,MAAO,CACLvI,oBAnBAuI,EAAeA,EAAe7Q,OAAS,GAAGyF,iBAC1CoL,EAAe,GAAGpL,iBAmBlBuD,sBAhBA6H,EAAeA,EAAe7Q,OAAS,GAAGiD,mBAC1C4N,EAAe,GAAG5N,mBAgBlBgG,sBAbA4H,EAAeA,EAAe7Q,OAAS,GAAG6C,mBAC1CgO,EAAe,GAAGhO,mBAalBgO,eAXqBA,EAAehR,KAAKT,IAAa,CACtDZ,KAAMY,EAAQZ,KACdyJ,YAAa7I,EAAQqG,iBACrBgD,cAAerJ,EAAQ6D,mBACvByF,cAAetJ,EAAQyD,uBAS1B,CAED,mBAAAiO,CAAoBjE,EAAQhG,EAAYqJ,EAAY,KAAMC,EAAU,MAClE,MAAMU,EAAiBvS,KAAKoS,kBAAkB7D,EAAQqD,EAAWC,GAC3DlK,EAAY,GAElB,IAAK,MAAM7G,KAAWyR,EAAgB,CACpC,MAAMxK,EAAWjH,EAAQ6G,UAAU5F,MAChCgG,GAAaA,EAASrI,KAAO6I,IAE5BR,GACFJ,EAAUlH,KAAK,CACbP,KAAMY,EAAQZ,KACd6H,SAAUA,GAGf,CAED,GAAyB,IAArBJ,EAAUjG,OACZ,MAAO,CACL+Q,SAAU,GACVtG,QAAS,mDAIb,MAAMlD,EAAgBtB,EAAU,GAAGI,SAEnC,IACE,MAAM4D,EAAW3L,KAAK+L,gBAAgBN,YAAYxC,EAAchG,MAE1DyP,EAAe/K,EAAUpG,KAAKoR,IAC3B,CACLzS,KAAMyS,EAAKzS,QACRyL,EAAS5C,cAAc4J,EAAK5K,cASnC,MAAO,IALiB4D,EAAS3C,kBAC/BrB,EAAU,GAAGI,SACbJ,EAAUA,EAAUjG,OAAS,GAAGqG,UAKhC0K,SAAUC,EAEb,CAAC,MAAOxG,GAEP,OADAwC,QAAQxC,MAAM,+BAA+BA,EAAMC,WAC5C,CACLsG,SAAU,GACVtG,QAAS,+BAA+BD,EAAMC,UAEjD,CACF,CAED,wBAAAyG,CAAyBrE,EAAQqD,EAAY,KAAMC,EAAU,MAC3D,MAAMgB,EAAiB7S,KAAK2R,sBAC1BpD,EACAqD,EACAC,GAEIiB,EAAkB9S,KAAKsS,mBAAmB/D,EAAQqD,EAAWC,GAE7DpQ,EAAOzB,KAAKyR,YAAY3P,YAAYyM,GACpCzO,EAAgB2B,EAAOA,EAAK3B,cAAgB,KAMlD,MAAO,CACLiT,cAAe,CACbC,cANFvR,GAAQA,EAAKxB,cAAcyB,OAAS,EAChCD,EAAKxB,cAAc,GAAGG,OACtB,KAKFN,gBACAmT,OAAQJ,EAAeV,mBACvBe,QAASL,EAAeZ,aAE1BkB,eAAgB,CACdC,cAAeN,EAAgBP,eAAe7Q,OAC9C2R,kBAAmBP,EAAgBP,eAAe/N,QAChD,CAAC8O,EAAKxS,IAAYwS,EAAMxS,EAAQ6I,aAChC,GAEF4J,qBAAsBT,EAAgBP,eAAe/N,QACnD,CAAC8O,EAAKxS,IAAYwS,EAAMxS,EAAQqJ,eAChC,GAEFqJ,mBAAoBV,EAAgBP,eAAe/N,QACjD,CAAC8O,EAAKxS,IAAYwS,EAAMxS,EAAQsJ,eAChC,GAEFqI,SAAUK,GAGf,ECxLI,MAAMW,EACT,WAAAhU,CAAYiU,GACV1T,KAAK0T,WAAaA,CACnB,CAED,OAAAC,GACE,GAAsB,oBAAXC,OAAwB,OAAO,KAC1C,MAAM/K,EAAOgL,aAAaC,QAAQ9T,KAAK0T,YACvC,OAAO7K,EAAOkL,KAAKC,MAAMnL,GAAQ,IAClC,CAED,QAAAoL,CAASpL,GACe,oBAAX+K,QACXC,aAAaK,QAAQlU,KAAK0T,WAAYK,KAAKI,UAAUtL,GACtD,CAED,SAAAuL,GACwB,oBAAXR,QACXC,aAAaQ,WAAWrU,KAAK0T,WAC9B,ECjBE,MAAMY,EACX,WAAA7U,GACEO,KAAKuU,YAAc,IAAId,EAAe,qBACtCzT,KAAKwU,gBAAkB,IAAIf,EAAe,yBAC1CzT,KAAKyU,mBAAqB,IAAIhB,EAAe,6BAC7CzT,KAAK0U,eAAiB,IAAIjB,EAAe,wBAGzCzT,KAAK2U,oBACN,CAED,kBAAAA,GAEwB,oBAAXf,SAEN5T,KAAKuU,YAAYZ,WACpB3T,KAAKuU,YAAYN,SAAS,IAGvBjU,KAAKwU,gBAAgBb,WACxB3T,KAAKwU,gBAAgBP,SAAS,IAG3BjU,KAAKyU,mBAAmBd,WAC3B3T,KAAKyU,mBAAmBR,SAAS,IAG9BjU,KAAK0U,eAAef,WACvB3T,KAAK0U,eAAeT,SAAS,IAEhC,CAGD,QAAA7S,GACE,OAAOpB,KAAKuU,YAAYZ,WAAa,EACtC,CAED,SAAA9R,CAAUV,GACRnB,KAAKuU,YAAYN,SAAS9S,EAC3B,CAGD,YAAAyG,GACE,OAAO5H,KAAKwU,gBAAgBb,WAAa,EAC1C,CAED,aAAAzL,CAAcP,GACZ3H,KAAKwU,gBAAgBP,SAAStM,EAC/B,CAGD,eAAA/G,GACE,OAAOZ,KAAKyU,mBAAmBd,WAAa,EAC7C,CAED,gBAAApG,CAAiBqH,GACf5U,KAAKyU,mBAAmBR,SAASW,EAClC,CAGD,WAAA/E,GACE,OAAO7P,KAAK0U,eAAef,WAAa,EACzC,CAED,YAAAzD,CAAaN,GACX5P,KAAK0U,eAAeT,SAASrE,EAC9B,CAGD,YAAAiF,GACE7U,KAAKuU,YAAYH,YACjBpU,KAAKwU,gBAAgBJ,YACrBpU,KAAKyU,mBAAmBL,YACxBpU,KAAK0U,eAAeN,YACpBpU,KAAK2U,oBACN,ECrEI,MAAMG,EACX,WAAArV,GAEEO,KAAKkB,eAAiB,IAAIoT,EAG1BtU,KAAKyR,YAAc,IAAIxQ,EAAYjB,KAAKkB,gBACxClB,KAAKkN,gBAAkB,IAAIxF,EAAgB1H,KAAKkB,gBAChDlB,KAAK2P,mBAAqB,IAAI1C,EAAmBjN,KAAKkN,gBAAiBlN,KAAKkB,gBAC5ElB,KAAK0R,eAAiB,IAAIhC,EACxB1P,KAAKkN,gBACLlN,KAAK2P,mBACL3P,KAAKkB,gBAEPlB,KAAK+U,kBAAoB,IAAIvD,EAC3BxR,KAAKyR,YACLzR,KAAK0R,eAER,CAID,SAAAsD,GACEtG,QAAQuG,IAAIjV,KAAKyR,YAAY7O,cAC9B,CAED,OAAAsS,CAAQvV,EAAMC,EAAUC,EAAOC,EAAeC,GAC5C,IACE,MAAMuC,EAAUtC,KAAKyR,YAAYrP,aAC/BzC,EACAC,EACAC,EACAC,EACAC,GAGF,OADA2O,QAAQuG,IAAI,gBAAgB3S,EAAQ3C,wBAC7B2C,CACR,CAAC,MAAO4J,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,SAAAiJ,CAAUtV,EAAOD,GACf,IACE,MAAM6B,EAAOzB,KAAKyR,YAAYlP,UAAU1C,EAAOD,GAE/C,OADA8O,QAAQuG,IAAI,gBAAgBxT,EAAK9B,wBAC1B8B,CACR,CAAC,MAAOyK,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,YAAA3L,CAAaC,GACX,IACER,KAAKyR,YAAYjP,iBAAiBhC,GAClCkO,QAAQuG,IAAI,+BAA+BzU,OAC5C,CAAC,MAAO0L,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,aAAAlL,CAAcrB,EAAMC,EAAUC,EAAOE,GACnC,IACEC,KAAKyR,YAAY/O,kBAAkB/C,EAAMC,EAAUC,EAAOE,GAC1D2O,QAAQuG,IAAI,+BACb,CAAC,MAAO/I,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAID,aAAAkJ,GACE1G,QAAQuG,IAAIjV,KAAKkN,gBAAgBzE,kBAClC,CAED,sBAAAlB,CAAuB5H,EAAMmD,EAAOC,EAAaC,EAAUuD,EAAUC,GACnE,MAAM4B,EAAcpI,KAAKkN,gBAAgB3F,uBACvC5H,EACAmD,EACAC,EACAC,EACAuD,EACAC,GAGF,OADAkI,QAAQuG,IAAI,cAAc7M,EAAYzI,kBAC/ByI,CACR,CAED,oBAAAZ,CAAqB7H,EAAMmD,EAAOC,EAAaC,EAAUa,GACvD,MAAMuE,EAAcpI,KAAKkN,gBAAgB1F,qBACvC7H,EACAmD,EACAC,EACAC,EACAa,GAGF,OADA6K,QAAQuG,IAAI,qBAAqB7M,EAAYzI,kBACtCyI,CACR,CAED,uBAAAX,CAAwB9H,EAAMmD,EAAOC,EAAaC,EAAU4C,GAC1D,MAAMwC,EAAcpI,KAAKkN,gBAAgBzF,wBACvC9H,EACAmD,EACAC,EACAC,EACA4C,GAGF,OADA8I,QAAQuG,IAAI,8BAA8B7M,EAAYzI,kBAC/CyI,CACR,CAED,qBAAAC,CACEpF,EACAtD,EACAmD,EACAC,EACAC,EACAsE,GAEA,MAAMc,EAAcpI,KAAKkN,gBAAgB7E,sBACvCpF,EACAtD,EACAmD,EACAC,EACAC,EACAsE,GAGF,OADAoH,QAAQuG,IAAI,GAAGhS,gBAAmBmF,EAAYzI,kBACvCyI,CACR,CAED,cAAAE,CAAeC,GACbvI,KAAKkN,gBAAgB5E,eAAeC,EACrC,CAID,gBAAA8M,GACE3G,QAAQuG,IAAIjV,KAAK2P,mBAAmBnB,qBACrC,CAED,iBAAAd,CAAkB/N,EAAMoD,GACtB,IACE,MAAMwL,EAASvO,KAAKyR,YAAY9O,iBAAiBjD,GAC3CiB,EAAcX,KAAK2P,mBAAmBjC,kBAC1Ca,EACA5O,EACAoD,GAGF,OADA2L,QAAQuG,IAAI,gCACLtU,CACR,CAAC,MAAOuL,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,iBAAAyB,CAAkBC,GAChB,IACE5N,KAAK2P,mBAAmBhC,kBAAkBC,EAC3C,CAAC,MAAO1B,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,wBAAA2B,CAAyBD,EAAerF,GACtC,IACE,MAAMR,EAAW/H,KAAKkN,gBAAgB1E,gBAAgBD,GAChD5H,EAAcX,KAAK2P,mBAAmB9B,yBAC1CD,EACArF,GAEFmG,QAAQuG,IACN,cAAclN,EAASpI,yCAAyCgB,EAAYhB,OAE/E,CAAC,MAAOuM,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,6BAAA6B,CAA8BH,EAAerF,GAC3C,IACE,OAAOvI,KAAK2P,mBAAmB5B,8BAC7BH,EACArF,EAEH,CAAC,MAAO2D,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,6BAAA+B,CAA8BL,EAAerF,EAAYpC,EAAM/F,GAC7D,IACEJ,KAAK2P,mBAAmB1B,8BACtBL,EACArF,EACApC,EACA/F,EAEH,CAAC,MAAO8L,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,iCAAAgC,CACEN,EACArF,EACAhF,EACAC,EACAC,EAAiB,MAEjB,IACE,MAAMsE,EACJ/H,KAAK2P,mBAAmBzB,kCACtBN,EACArF,EACAhF,EACAC,EACAC,GAEJiL,QAAQuG,IAAI,wCAAwClN,EAASpI,OAC9D,CAAC,MAAOuM,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,0CAAAiC,CACEP,EACArF,EACAhF,EACAkC,EAAa,MAEb,IACE,MAAMsC,EACJ/H,KAAK2P,mBAAmBxB,2CACtBP,EACArF,EACAhF,EACAkC,GAEJiJ,QAAQuG,IACN,8CAA8ClN,EAASpI,OAE1D,CAAC,MAAOuM,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,uBAAAoJ,CAAwB1H,GACtB,IACE,MAAMjN,EACJX,KAAK2P,mBAAmB7B,mBAAmBF,GAC7Cc,QAAQuG,IAAItU,EAAYgH,UACzB,CAAC,MAAOuE,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAID,YAAAqJ,GACE7G,QAAQuG,IAAIjV,KAAK0R,eAAeX,iBACjC,CAED,aAAAX,CAAclQ,EAAO,KAAM0N,GACzB,IACE,MAAMW,EAASvO,KAAKyR,YAAY9O,iBAAiBjD,GAC3CoB,EAAUd,KAAK0R,eAAetB,cAClC7B,EACArO,EACA0N,GAGF,OADAc,QAAQuG,IAAI,sBACLnU,CACR,CAAC,MAAOoL,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,oBAAAmE,CAAqBC,EAAW/H,GAC9B,IACE,MAAMzH,EAAUd,KAAK0R,eAAerB,qBAClCC,EACA/H,GAEIR,EAAW/H,KAAKkN,gBAAgB1E,gBAAgBD,GAEtD,OADAmG,QAAQuG,IAAI,YAAYlN,EAASpI,yBAC1BmB,CACR,CAAC,MAAOoL,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,kBAAAsE,CAAmBF,EAAW/H,EAAYpC,EAAM/F,GAC9C,IACEJ,KAAK0R,eAAelB,mBAClBF,EACA/H,EACApC,EACA/F,GAEFsO,QAAQuG,IAAI,6BAA6B9O,gBAAmB/F,OAC7D,CAAC,MAAO8L,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,kBAAAuE,CAAmBH,EAAW/H,EAAY5B,EAAUR,EAAM/F,GACxD,IACEJ,KAAK0R,eAAejB,mBAClBH,EACA/H,EACA5B,EACAR,EACA/F,GAEFsO,QAAQuG,IAAI,8BAA8B9O,cAAiB/F,OAC5D,CAAC,MAAO8L,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,4BAAAwE,CACEJ,EACA/H,EACAhF,EACAC,EACAC,EAAiB,MAEjB,IACEzD,KAAK0R,eAAehB,6BAClBJ,EACA/H,EACAhF,EACAC,EACAC,GAEFiL,QAAQuG,IAAI,2BAA2B1R,YAAmBC,OAC3D,CAAC,MAAO0I,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,4BAAAyE,CACEL,EACA/H,EACArE,EACAX,EACAC,EACAC,GAEA,IACEzD,KAAK0R,eAAef,6BAClBL,EACA/H,EACArE,EACAX,EACAC,EACAC,GAEFiL,QAAQuG,IAAI,4BAA4B1R,YAAmBC,OAC5D,CAAC,MAAO0I,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,+BAAA0E,CACEN,EACA/H,EACAhF,EACAkC,EAAa,MAEb,IACEzF,KAAK0R,eAAed,gCAClBN,EACA/H,EACAhF,EACAkC,GAEFiJ,QAAQuG,IACN,iCAAiC1R,wBAC/BkC,GAAc,eAGnB,CAAC,MAAOyG,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,+BAAA2E,CACEP,EACA/H,EACArE,EACAX,EACAkC,GAEA,IACEzF,KAAK0R,eAAeb,gCAClBP,EACA/H,EACArE,EACAX,EACAkC,GAEFiJ,QAAQuG,IACN,kCAAkC1R,wBAChCkC,GAAc,eAGnB,CAAC,MAAOyG,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,WAAAsJ,CAAYlF,GACV,IACE,MAAMxP,EAAUd,KAAK0R,eAAenB,eAAeD,GACnD5B,QAAQuG,IAAInU,EACb,CAAC,MAAOoL,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,kBAAAsD,CAAmBc,GACjB,IACE,OAAOtQ,KAAK0R,eAAelC,mBAAmBc,EAC/C,CAAC,MAAOpE,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,uBAAAoF,CAAwBhB,GACtB,IACE,OAAOtQ,KAAK0R,eAAeJ,wBAAwBhB,EACpD,CAAC,MAAOpE,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAID,wBAAA8E,CAAyBV,GACvB,IACE,MAAM3G,EACJ3J,KAAK0R,eAAeV,yBAAyBV,GAE/C,OADA5B,QAAQuG,IAAI,4BAA8BtL,GACnCA,CACR,CAAC,MAAOuC,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,0BAAA+E,CAA2BX,GACzB,IACE,MAAMnG,EACJnK,KAAK0R,eAAeT,2BAA2BX,GAEjD,OADA5B,QAAQuG,IAAI,kCAAoC9K,EAAgB,OACzDA,CACR,CAAC,MAAO+B,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,0BAAAgF,CAA2BZ,GACzB,IACE,MAAMlG,EACJpK,KAAK0R,eAAeR,2BAA2BZ,GAIjD,OAHA5B,QAAQuG,IACN,4CAA8C7K,EAAgB,UAEzDA,CACR,CAAC,MAAO8B,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,mCAAAiF,CAAoCb,GAClC,IACE,MAAMlG,EACJpK,KAAK0R,eAAeP,oCAAoCb,GAM1D,OALA5B,QAAQuG,IACN,yDACE7K,EACA,WAEGA,CACR,CAAC,MAAO8B,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,iCAAAkF,CAAkCd,GAChC,IACE,MAAMtF,EACJhL,KAAK0R,eAAeN,kCAAkCd,GAMxD,OALA5B,QAAQuG,IACN,8DACEjK,EACA,WAEGA,CACR,CAAC,MAAOkB,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,oCAAAmF,CAAqCf,GACnC,IACE,MAAMpF,EACJlL,KAAK0R,eAAeL,qCAAqCf,GAI3D,OAHA5B,QAAQuG,IACN,mDAAqD/J,GAEhDA,CACR,CAAC,MAAOgB,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAID,qBAAAyF,CAAsBC,EAAY,KAAMC,EAAU,MAChD,IACE,MAAMxQ,EAAcrB,KAAKyR,YAAY9O,iBAC/BsP,EAAcjS,KAAK+U,kBAAkBpD,sBACzCtQ,EAAY3B,GACZkS,EACAC,GAGF,OADAnD,QAAQuG,IAAIhD,GACLA,CACR,CAAC,MAAO/F,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,kBAAAoG,CAAmBV,EAAY,KAAMC,EAAU,MAC7C,IACE,MAAMxQ,EAAcrB,KAAKyR,YAAY9O,iBAC/BmQ,EAAkB9S,KAAK+U,kBAAkBzC,mBAC7CjR,EAAY3B,GACZkS,EACAC,GAGF,OADAnD,QAAQuG,IAAInC,GACLA,CACR,CAAC,MAAO5G,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,mBAAAsG,CAAoBjK,EAAYqJ,EAAY,KAAMC,EAAU,MAC1D,IACE,MAAMxQ,EAAcrB,KAAKyR,YAAY9O,iBAC/B8S,EAAmBzV,KAAK+U,kBAAkBvC,oBAC9CnR,EAAY3B,GACZ6I,EACAqJ,EACAC,GAGF,OADAnD,QAAQuG,IAAIQ,GACLA,CACR,CAAC,MAAOvJ,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,iBAAAwJ,CAAkBnN,EAAYqJ,EAAY,KAAMC,EAAU,MACxD,IACE,MAAM9J,EAAW/H,KAAKkN,gBAAgB1E,gBAAgBD,GAEtD,IAAKR,GAAYA,EAAS9E,OAASmC,EAAaE,OAE9C,YADAoJ,QAAQuG,IAAI,gCAId,MAAM5T,EAAcrB,KAAKyR,YAAY9O,iBAC/BgT,EAAiB3V,KAAK+U,kBAAkBvC,oBAC5CnR,EAAY3B,GACZ6I,EACAqJ,EACAC,GAIF,OADAnD,QAAQuG,IAAI,8BAA+BU,GACpCA,CACR,CAAC,MAAOzJ,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,CAED,oBAAA0J,CAAqBrN,EAAYqJ,EAAY,KAAMC,EAAU,MAC3D,IACE,MAAM9J,EAAW/H,KAAKkN,gBAAgB1E,gBAAgBD,GAEtD,IAAKR,GAAYA,EAAS9E,OAASmC,EAAaG,UAE9C,YADAmJ,QAAQuG,IAAI,yCAId,MAAM5T,EAAcrB,KAAKyR,YAAY9O,iBAC/BkT,EAAoB7V,KAAK+U,kBAAkBvC,oBAC/CnR,EAAY3B,GACZ6I,EACAqJ,EACAC,GAIF,OADAnD,QAAQuG,IAAI,uCAAwCY,GAC7CA,CACR,CAAC,MAAO3J,GAEP,MADAwC,QAAQxC,MAAMA,EAAMC,SACdD,CACP,CACF,0YC9nBiC,IAC3B,IAAI4I"}