class e{constructor(e,t,s,r,o,i){this.id=e,this.name=t,this.password=s,this.email=r,this.currentWeight=o,this.weightHistory=[{date:new Date,weight:o}],this.height=i,this.workoutsHistory=[],this.workoutPlans=[]}updateWeight(e){this.currentWeight=e,this.weightHistory.push({date:new Date,weight:e})}addWorkoutPlan(e){this.workoutPlans.push(e)}getWorkoutPlans(){return this.workoutPlans}addWorkout(e){this.workoutsHistory.push(e)}getWorkoutHistory(){return this.workoutsHistory}updateProfile(e,t,s,r){this.name=e||this.name,this.password=t||this.password,this.email=s||this.email,this.height=r||this.height}}class t{constructor(e){this.storageManager=e,this.users=this.storageManager.getUsers()||[],this.currentUser=null,this._deserializeUsers()}_deserializeUsers(){this.users=this.users.map((t=>{const s=new e(t.id,t.name,t.password,t.email,t.currentWeight,t.height);return t.weightHistory&&t.weightHistory.length&&(s.weightHistory=t.weightHistory.map((e=>({date:new Date(e.date),weight:e.weight})))),s}))}_saveUsers(){this.storageManager.saveUsers(this.users)}getUserById(e){const t=this.users.find((t=>t.id===e));if(!t)throw new Error(`Пользователь с ID ${e} не найден`);return t}generateUserId(){return this.users.length?Math.max(...this.users.map((e=>e.id)))+1:1}registerUser(t,s,r,o,i){if(this.users.some((e=>e.email===r)))throw new Error("Пользователь с таким email уже существует");const a=this.generateUserId(),n=new e(a,t,s,r,o,i);return this.users.push(n),this._saveUsers(),n}loginUser(e,t){const s=this.users.find((t=>t.email===e));if(!s)throw new Error("Пользователя с таким email не существует");if(s.password!==t)throw new Error("Неверный пароль");return this.currentUser=s,s}updateUserWeight(e){this.validateCurrentUser(),this.currentUser.updateWeight(e),this._saveUsers()}updateUserProfile(e,t,s,r){this.validateCurrentUser(),this.currentUser.updateProfile(e,t,s,r),this._saveUsers()}getCurrentUser(){return this.currentUser}validateCurrentUser(){if(!this.currentUser)throw new Error("Пользователь не авторизован")}getAllUsers(){return this.users}}class s{constructor(e,t,s,r,o,i){this.id=e,this.name=t,this.image=s,this.description=r||"",this.mediaUrl=o,this.type=i,this.notes=[]}updateExercise(e,t,s){this.name=e||this.name,this.description=t||this.description,this.mediaUrl=s||this.mediaUrl}addNote(e){this.notes.push(e)}}class r{constructor(e,t,s=null){this.duration=e,this.distance=t,this.caloriesBurned=s}calculatePace(){return this.distance&&0!==this.distance?this.duration/this.distance:0}calculateSpeed(){return this.duration&&0!==this.duration?this.distance/this.duration*60:0}}class o extends s{constructor(e,t,s,r,o,i,a){super(e,t,s,r,o,i),this.cardioType=a,this.sessions=[]}addSession(e,t,s=null){this.sessions.push(new r(e,t,s))}removeSession(e){this.sessions.splice(e,1)}getSessions(){return this.sessions}updateSession(e,t,s,r){this.sessions[e].duration=t||this.sessions[e].duration,this.sessions[e].distance=s||this.sessions[e].distance,this.sessions[e].caloriesBurned=r||this.sessions[e].caloriesBurned}getTotalDuration(){return this.sessions.reduce(((e,t)=>e+(t.duration||0)),0)}getTotalDistance(){return this.sessions.reduce(((e,t)=>e+(t.distance||0)),0)}getTotalCalories(){return this.sessions.reduce(((e,t)=>e+(t.caloriesBurned||0)),0)}getAveragePace(){return 0===this.sessions.length?0:this.sessions.reduce(((e,t)=>e+t.calculatePace()),0)/this.sessions.length}getBestPace(){return 0===this.sessions.length?0:Math.min(...this.sessions.map((e=>e.calculatePace())).filter((e=>e>0)))}getAverageSpeed(){return 0===this.sessions.length?0:this.sessions.reduce(((e,t)=>e+t.calculateSpeed()),0)/this.sessions.length}getBestSpeed(){return 0===this.sessions.length?0:Math.max(...this.sessions.map((e=>e.calculateSpeed())))}}const i={STRENGTH:"Strength",CARDIO:"Cardio",ENDURANCE:"Endurance"};class a{constructor(e,t=null){this.duration=e,this.difficulty=t}calculateIntensity(){return this.difficulty&&this.duration?this.difficulty*this.duration/60:0}}class n extends s{constructor(e,t,s,r,o,i,a){super(e,t,s,r,o,i),this.targetMuscle=a,this.sessions=[]}addSession(e,t=null){this.sessions.push(new a(e,t))}removeSession(e){this.sessions.splice(e,1)}getSessions(){return this.sessions}updateSession(e,t,s){this.sessions[e].duration=t||this.sessions[e].duration,this.sessions[e].difficulty=s||this.sessions[e].difficulty}getTotalDuration(){return this.sessions.reduce(((e,t)=>e+(t.duration||0)),0)}getAverageDuration(){return 0===this.sessions.length?0:this.getTotalDuration()/this.sessions.length}getMaxDuration(){return 0===this.sessions.length?0:Math.max(...this.sessions.map((e=>e.duration)))}getAverageDifficulty(){return 0===this.sessions.length?0:this.sessions.reduce(((e,t)=>e+(t.difficulty||0)),0)/this.sessions.length}getTotalIntensity(){return this.sessions.reduce(((e,t)=>e+t.calculateIntensity()),0)}getAverageIntensity(){return 0===this.sessions.length?0:this.getTotalIntensity()/this.sessions.length}}class c{constructor(e,t=null){this.reps=e,this.weight=t}calculateOneRepMax(){return this.weight&&this.reps?Math.round(this.weight*(1+this.reps/30)):0}}class u extends s{constructor(e,t,s,r,o,i,a,n){super(e,t,s,r,o,i),this.bodyPart=a,this.sets=n||[]}addSet(e,t){this.sets.push(new c(e,t))}removeSet(e){this.sets.splice(e,1)}getSets(){return this.sets}updateSet(e,t,s){this.sets[e].reps=t||this.sets[e].reps,this.sets[e].weight=s||this.sets[e].weight}getAverageOneRepMax(){return this.sets.reduce(((e,t)=>e+t.calculateOneRepMax()),0)/this.sets.length}getBestOneRepMax(){return Math.max(...this.sets.map((e=>e.calculateOneRepMax())))}getMaxWeight(){return Math.max(...this.sets.map((e=>e.weight)))}getTotalWeight(){return this.sets.reduce(((e,t)=>e+(t.weight||0)*t.reps),0)}}class h{static createExercise(e,t,s,r,o,a,n){switch(e){case i.STRENGTH:return this.createStrengthExercise(t,s,r,o,a,n);case i.CARDIO:return this.createCardioExercise(t,s,r,o,a,n);case i.ENDURANCE:return this.createEnduranceExercise(t,s,r,o,a,n);default:throw new Error(`Неподдерживаемый тип упражнения: ${e}`)}}static createStrengthExercise(e,t,s,r,o,a,n=[]){return new u(e,t,s,r,o,i.STRENGTH,a,n)}static createCardioExercise(e,t,s,r,a,n){return new o(e,t,s,r,a,i.CARDIO,n)}static createEnduranceExercise(e,t,s,r,o,a){return new n(e,t,s,r,o,i.ENDURANCE,a)}}class l{constructor(e){this.storageManager=e,this.exercises=this.storageManager.getExercises()||[],this._deserializeExercises()}_deserializeExercises(){this.exercises=this.exercises.map((e=>{let t;return e.type===i.STRENGTH?(t=new u(e.id,e.name,e.image,e.description,e.mediaUrl,e.type,e.bodyPart,[]),e.sets&&e.sets.length&&e.sets.forEach((e=>{t.addSet(e.reps,e.weight)}))):e.type===i.CARDIO?(t=new o(e.id,e.name,e.image,e.description,e.mediaUrl,e.type,e.cardioType),e.sessions&&e.sessions.length&&e.sessions.forEach((e=>{t.addSession(e.duration,e.distance,e.caloriesBurned)}))):e.type===i.ENDURANCE&&(t=new n(e.id,e.name,e.image,e.description,e.mediaUrl,e.type,e.targetMuscle),e.sessions&&e.sessions.length&&e.sessions.forEach((e=>{t.addSession(e.duration,e.difficulty)}))),e.notes&&e.notes.length&&e.notes.forEach((e=>{t.addNote(e)})),t}))}_saveExercises(){this.storageManager.saveExercises(this.exercises)}generateExerciseId(){return this.exercises.length?Math.max(...this.exercises.map((e=>e.id)))+1:0}createStrengthExercise(e,t,s,r,o){const i=this.generateExerciseId(),a=h.createStrengthExercise(i,e,t,s,r,o);return this.exercises.push(a),this._saveExercises(),a}createCardioExercise(e,t,s,r,o){const i=this.generateExerciseId(),a=h.createCardioExercise(i,e,t,s,r,o);return this.exercises.push(a),this._saveExercises(),a}createEnduranceExercise(e,t,s,r,o){const i=this.generateExerciseId(),a=h.createEnduranceExercise(i,e,t,s,r,o);return this.exercises.push(a),this._saveExercises(),a}createGenericExercise(e,t,s,r,o,i){const a=this.generateExerciseId(),n=h.createExercise(e,a,t,s,r,o,i);return this.exercises.push(n),this._saveExercises(),n}removeExercise(e){this.exercises=this.exercises.filter((t=>t.id!==e)),this._saveExercises()}clearExerciseSets(e,t){const s=this.getWorkoutById(e);if(!s)return;const r=s.exercises.find((e=>e.id===t));r&&(r.sets&&(r.sets=[]),r.completedSets&&(r.completedSets=[]),this._saveWorkouts())}clearExerciseCardioSessions(e,t){const s=this.getWorkoutById(e);if(!s)return;const r=s.exercises.find((e=>e.id===t));r&&(r.sessions&&(r.sessions=[]),r.completedSessions&&(r.completedSessions=[]),this._saveWorkouts())}clearExerciseEnduranceSessions(e,t){this.clearExerciseCardioSessions(e,t)}getExerciseById(e){return this.exercises.find((t=>t.id===e))}getAllExercises(){return this.exercises}}class g{copyExercise(e){throw new Error("Method must be implemented by concrete strategy")}addTrackingData(e,t){throw new Error("Method must be implemented by concrete strategy")}updateTrackingData(e,t,s){throw new Error("Method must be implemented by concrete strategy")}getStatistics(e){throw new Error("Method must be implemented by concrete strategy")}calculateProgress(e,t){throw new Error("Method must be implemented by concrete strategy")}hasChanges(e,t){throw new Error("Method must be implemented by concrete strategy")}updatePlanData(e,t){throw new Error("Method must be implemented by concrete strategy")}}class d extends g{copyExercise(e){const t=new u(e.id,e.name,e.image,e.description,e.mediaUrl,e.type,e.bodyPart,[]),s=e.getSets?e.getSets():Array.isArray(e.sets)?e.sets:[];return s&&s.length&&s.forEach((e=>{e&&"object"==typeof e&&"reps"in e&&"weight"in e&&t.addSet(e.reps,e.weight)})),t}addTrackingData(e,t){if(!t.reps||!t.weight)throw new Error("Reps and weight required for strength exercise");e.addSet(t.reps,t.weight)}updateTrackingData(e,t,s){if(!e.sets[t])throw new Error(`Set at index ${t} not found`);e.updateSet(t,s.reps,s.weight)}getStatistics(e){return{totalWeight:e.getTotalWeight(),bestOneRepMax:e.getBestOneRepMax(),maxWeight:e.getMaxWeight()}}calculateProgress(e,t){return{bestOneReMaxProgress:t.getBestOneRepMax()-e.getBestOneRepMax(),maxWeightProgress:t.getMaxWeight()-e.getMaxWeight(),totalWeightProgress:t.getTotalWeight()-e.getTotalWeight()}}hasChanges(e,t){if(e.sets.length!==t.sets.length)return!0;for(let s=0;s<e.sets.length;s++)if(e.sets[s].reps!==t.sets[s].reps||e.sets[s].weight!==t.sets[s].weight)return!0;return!1}updatePlanData(e,t){t.sets=[];for(const s of e.sets)t.addSet(s.reps,s.weight)}}class w extends g{copyExercise(e){const t=new o(e.id,e.name,e.image,e.description,e.mediaUrl,e.type,e.cardioType),s=e.getSessions?e.getSessions():Array.isArray(e.sessions)?e.sessions:[];return s&&s.length&&s.forEach((e=>{e&&"object"==typeof e&&t.addSession(e.duration,e.distance,e.caloriesBurned)})),t}addTrackingData(e,t){if(!t.duration||!t.distance)throw new Error("Duration and distance required for cardio exercise");e.addSession(t.duration,t.distance,t.caloriesBurned)}updateTrackingData(e,t,s){if(!e.sessions[t])throw new Error(`Session at index ${t} not found`);e.updateSession(t,s.duration,s.distance,s.caloriesBurned)}getStatistics(e){const t=e.sessions||[],s=t.reduce(((e,t)=>e+(Number(t.distance)||0)),0),r=t.reduce(((e,t)=>e+(Number(t.duration)||0)),0),o=t.reduce(((e,t)=>e+(Number(t.caloriesBurned)||0)),0);let i=0,a=0,n=0,c=0;if(t.length>0&&s>0){const e=t.filter((e=>(Number(e.distance)||0)>0)).map((e=>(Number(e.duration)||0)/(Number(e.distance)||1)));i=Math.min(...e),a=r/s;const o=t.filter((e=>(Number(e.duration)||0)>0)).map((e=>(Number(e.distance)||0)/(Number(e.duration)||1)*60));n=Math.max(...o),c=s/(r/60)}return{totalDistance:s,distance:s,totalDuration:r,duration:r,bestPace:i,averagePace:a,bestSpeed:n,averageSpeed:c,totalCalories:o,caloriesBurned:o}}calculateProgress(e,t){const s=this.getStatistics(e),r=this.getStatistics(t);return{distanceProgress:r.totalDistance-s.totalDistance,durationProgress:r.totalDuration-s.totalDuration,caloriesProgress:r.totalCalories-s.totalCalories,totalDistanceProgress:r.totalDistance-s.totalDistance,totalDurationProgress:r.totalDuration-s.totalDuration,bestPaceProgress:r.bestPace-s.bestPace,bestSpeedProgress:r.bestSpeed-s.bestSpeed,totalCaloriesProgress:r.totalCalories-s.totalCalories}}hasChanges(e,t){if(e.sessions.length!==t.sessions.length)return!0;for(let s=0;s<e.sessions.length;s++)if(e.sessions[s].duration!==t.sessions[s].duration||e.sessions[s].distance!==t.sessions[s].distance||e.sessions[s].caloriesBurned!==t.sessions[s].caloriesBurned)return!0;return!1}updatePlanData(e,t){t.sessions=[];for(const s of e.sessions)t.addSession(s.duration,s.distance,s.caloriesBurned)}}class y extends g{copyExercise(e){const t=new n(e.id,e.name,e.image,e.description,e.mediaUrl,e.type,e.targetMuscle),s=e.getSessions?e.getSessions():Array.isArray(e.sessions)?e.sessions:[];return s&&s.length&&s.forEach((e=>{e&&"object"==typeof e&&t.addSession(e.duration,e.difficulty)})),t}addTrackingData(e,t){if(!t.duration)throw new Error("Duration required for endurance exercise");e.addSession(t.duration,t.difficulty)}updateTrackingData(e,t,s){if(!e.sessions[t])throw new Error(`Session at index ${t} not found`);e.updateSession(t,s.duration,s.difficulty)}getStatistics(e){const t=e.sessions||[],s=t.reduce(((e,t)=>e+(Number(t.duration)||0)),0),r=t.length>0?t.reduce(((e,t)=>e+(Number(t.difficulty)||0)),0)/t.length:0;return{totalDuration:s,duration:s,maxDuration:t.length>0?Math.max(...t.map((e=>Number(e.duration)||0))):0,averageDifficulty:r,totalIntensity:r,difficulty:r,sessionsCount:t.length}}calculateProgress(e,t){const s=this.getStatistics(e),r=this.getStatistics(t);return{durationProgress:r.totalDuration-s.totalDuration,intensityProgress:r.totalIntensity-s.totalIntensity,totalDurationProgress:r.totalDuration-s.totalDuration,maxDurationProgress:r.maxDuration-s.maxDuration,averageDifficultyProgress:r.averageDifficulty-s.averageDifficulty,totalIntensityProgress:r.totalIntensity-s.totalIntensity}}hasChanges(e,t){if(e.sessions.length!==t.sessions.length)return!0;for(let s=0;s<e.sessions.length;s++)if(e.sessions[s].duration!==t.sessions[s].duration||e.sessions[s].difficulty!==t.sessions[s].difficulty)return!0;return!1}updatePlanData(e,t){t.sessions=[];for(const s of e.sessions)t.addSession(s.duration,s.difficulty)}}class k{constructor(){this.strategies={[i.STRENGTH]:new d,[i.CARDIO]:new w,[i.ENDURANCE]:new y}}getStrategy(e){const t=this.strategies[e];if(!t)throw new Error(`No strategy found for exercise type: ${e}`);return t}registerStrategy(e,t){this.strategies[e]=t}}class E{constructor(e,t,s,r,o){this.id=e,this.ownerId=t,this.name=s,this.description=r||"",this.exercises=[],this.notes=[],this.strategyFactory=new k}updateWorkoutPlan(e,t){this.name=e||this.name,this.description=t||this.description}addExercise(e){try{const t=this.strategyFactory.getStrategy(e.type).copyExercise(e);return this.exercises.push(t),t}catch(e){throw new Error(`Failed to add exercise: ${e.message}`)}}getExerciseById(e){return this.exercises.find((t=>t.id===e))}addTrackingData(e,t){const s=this.getExerciseById(e);if(!s)throw new Error(`Exercise with id ${e} not found`);return this.strategyFactory.getStrategy(s.type).addTrackingData(s,t),s}addSetToExercise(e,t,s){return this.addTrackingData(e,{reps:t,weight:s})}addSessionToExercise(e,t,s,r=null){return this.addTrackingData(e,{duration:t,distance:s,caloriesBurned:r})}addEnduranceSessionToExercise(e,t,s=null){return this.addTrackingData(e,{duration:t,difficulty:s})}updateTrackingData(e,t,s){const r=this.getExerciseById(e);if(!r)throw new Error(`Exercise with id ${e} not found`);this.strategyFactory.getStrategy(r.type).updateTrackingData(r,t,s)}updateSetInExercise(e,t,s,r){return this.updateTrackingData(e,t,{reps:s,weight:r})}updateSessionInExercise(e,t,s,r,o){return this.updateTrackingData(e,t,{duration:s,distance:r,caloriesBurned:o})}updateEnduranceSessionInExercise(e,t,s,r){return this.updateTrackingData(e,t,{duration:s,difficulty:r})}removeExercise(e){this.exercises=this.exercises.filter((t=>t.id!==e))}removeTrackingData(e,t){const s=this.getExerciseById(e);if(!s)throw new Error(`Exercise with id ${e} not found`);this.strategyFactory.getStrategy(s.type),"Strength"===s.type&&s.sets?s.sets.splice(t,1):"Cardio"!==s.type&&"Endurance"!==s.type||!s.sessions||s.sessions.splice(t,1)}removeSetFromExercise(e,t){return this.removeTrackingData(e,t)}removeSessionFromExercise(e,t){return this.removeTrackingData(e,t)}removeEnduranceSessionFromExercise(e,t){return this.removeTrackingData(e,t)}addNote(e){this.notes.push(e)}removeNote(e){this.notes.splice(e,1)}}class S{constructor(e,t){this.exerciseService=e,this.storageManager=t,this.workoutPlans=this.storageManager.getWorkoutPlans()||[],this.strategyFactory=new k,this._deserializeWorkoutPlans()}_deserializeWorkoutPlans(){this.workoutPlans=this.workoutPlans.map((e=>{const t=new E(e.id,e.ownerId,e.name,e.description);return e.notes&&e.notes.length&&e.notes.forEach((e=>{t.addNote(e)})),e.exercises&&e.exercises.length&&e.exercises.forEach((e=>{const s=this.exerciseService.getExerciseById(e.id);s&&(t.addExercise(s),e.type===i.STRENGTH&&e.sets?e.sets.forEach((s=>{t.addSetToExercise(e.id,s.reps,s.weight)})):e.type===i.CARDIO&&e.sessions?e.sessions.forEach((s=>{t.addSessionToExercise(e.id,s.duration,s.distance,s.caloriesBurned)})):e.type===i.ENDURANCE&&e.sessions&&e.sessions.forEach((s=>{t.addEnduranceSessionToExercise(e.id,s.duration,s.difficulty)})))})),t}))}_saveWorkoutPlans(){this.storageManager.saveWorkoutPlans(this.workoutPlans)}generateWorkoutPlanId(){return this.workoutPlans.length?Math.max(...this.workoutPlans.map((e=>e.id)))+1:0}createWorkoutPlan(e,t,s){const r=this.generateWorkoutPlanId(),o=new E(r,e,t,s);return this.workoutPlans.push(o),this._saveWorkoutPlans(),o}deleteWorkoutPlan(e){this.workoutPlans=this.workoutPlans.filter((t=>t.id!==e)),this._saveWorkoutPlans()}addExerciseToWorkoutPlan(e,t){const s=this.getWorkoutPlanById(e),r=this.exerciseService.getExerciseById(t);if(!s)throw new Error(`План тренировки с ID ${e} не найден`);if(!r)throw new Error(`Упражнение с ID ${t} не найдено`);return s.addExercise(r),this._saveWorkoutPlans(),s}removeExerciseFromWorkoutPlan(e,t){const s=this.getWorkoutPlanById(e);if(!s)throw new Error(`План тренировки с ID ${e} не найден`);return s.removeExercise(t),this._saveWorkoutPlans(),s}addTrackingDataToExercise(e,t,s){const r=this.getWorkoutPlanById(e);if(!r)throw new Error(`План тренировки с ID ${e} не найден`);const o=r.exercises.find((e=>e.id===t));if(!o)throw new Error(`Упражнение с ID ${t} не найдено в плане`);try{return this.strategyFactory.getStrategy(o.type).addTrackingData(o,s),this._saveWorkoutPlans(),o}catch(e){throw new Error(`Ошибка добавления данных: ${e.message}`)}}addSetToExerciseInWorkoutPlan(e,t,s,r){return this.addTrackingDataToExercise(e,t,{reps:s,weight:r})}addSessionToExerciseInWorkoutPlan(e,t,s,r,o=null){return this.addTrackingDataToExercise(e,t,{duration:s,distance:r,caloriesBurned:o})}addEnduranceSessionToExerciseInWorkoutPlan(e,t,s,r=null){return this.addTrackingDataToExercise(e,t,{duration:s,difficulty:r})}updateTrackingDataInExercise(e,t,s,r){const o=this.getWorkoutPlanById(e);if(!o)throw new Error(`План тренировки с ID ${e} не найден`);const i=o.exercises.find((e=>e.id===t));if(!i)throw new Error(`Упражнение с ID ${t} не найдено в плане`);try{return this.strategyFactory.getStrategy(i.type).updateTrackingData(i,s,r),this._saveWorkoutPlans(),i}catch(e){throw new Error(`Ошибка обновления данных: ${e.message}`)}}updateSetInExercise(e,t,s,r,o){return this.updateTrackingDataInExercise(e,t,s,{reps:r,weight:o})}updateSessionInExercise(e,t,s,r,o,i){return this.updateTrackingDataInExercise(e,t,s,{duration:r,distance:o,caloriesBurned:i})}updateEnduranceSessionInExercise(e,t,s,r,o){return this.updateTrackingDataInExercise(e,t,s,{duration:r,difficulty:o})}removeTrackingDataFromExercise(e,t,s){const r=this.getWorkoutPlanById(e);if(!r)throw new Error(`План тренировки с ID ${e} не найден`);return r.removeTrackingData(t,s),this._saveWorkoutPlans(),r}removeSetFromExercise(e,t,s){return this.removeTrackingDataFromExercise(e,t,s)}removeSessionFromExercise(e,t,s){return this.removeTrackingDataFromExercise(e,t,s)}getWorkoutPlanById(e){return this.workoutPlans.find((t=>t.id===e))}getWorkoutPlansForUser(e){return this.workoutPlans.filter((t=>t.ownerId===e))}getAllWorkoutPlans(){return this.workoutPlans}addCardioSessionToExerciseInWorkoutPlan(e,t,s,r,o){const i=this.getWorkoutPlanById(e);if(!i)throw new Error(`План ${e} не найден`);const a=i.exercises.findIndex((e=>e.id===t));if(-1===a)throw new Error(`Упражнение ${t} не найдено в плане ${e}`);return i.exercises[a].sessions||(i.exercises[a].sessions=[]),i.exercises[a].sessions.push({duration:s,distance:r,caloriesBurned:o}),this._saveWorkoutPlans(),i}addEnduranceSessionToExerciseInWorkoutPlan(e,t,s,r){const o=this.getWorkoutPlanById(e);if(!o)throw new Error(`План ${e} не найден`);const i=o.exercises.findIndex((e=>e.id===t));if(-1===i)throw new Error(`Упражнение ${t} не найдено в плане ${e}`);return o.exercises[i].sessions||(o.exercises[i].sessions=[]),o.exercises[i].sessions.push({duration:s,difficulty:r}),this._saveWorkoutPlans(),o}}class p{constructor(e,t,s,r=null){this.id=e,this.ownerId=t,this.date=s||new Date,this.plan=r,this.exercises=[],this.strategyFactory=new k,r&&r.exercises&&(this.exercises=r.exercises.map((e=>{try{return this.strategyFactory.getStrategy(e.type).copyExercise(e)}catch(e){return console.error(`Error copying exercise: ${e.message}`),null}})).filter((e=>null!==e)))}addExercise(e){try{const t=this.strategyFactory.getStrategy(e.type).copyExercise(e);return this.exercises.push(t),t}catch(e){throw new Error(`Failed to add exercise: ${e.message}`)}}getExerciseById(e){return this.exercises.find((t=>t.id===e))}recordTrackingData(e,t){const s=this.getExerciseById(e);if(!s)throw new Error(`Exercise with id ${e} not found`);this.strategyFactory.getStrategy(s.type).addTrackingData(s,t)}recordSet(e,t,s){return this.recordTrackingData(e,{reps:t,weight:s})}recordCardioSession(e,t,s,r=null){return this.recordTrackingData(e,{duration:t,distance:s,caloriesBurned:r})}recordEnduranceSession(e,t,s=null){return this.recordTrackingData(e,{duration:t,difficulty:s})}updateTrackingData(e,t,s){const r=this.getExerciseById(e);if(!r)throw new Error(`Exercise with id ${e} not found`);this.strategyFactory.getStrategy(r.type).updateTrackingData(r,t,s)}updateSet(e,t,s,r){return this.updateTrackingData(e,t,{reps:s,weight:r})}updateCardioSession(e,t,s,r,o){return this.updateTrackingData(e,t,{duration:s,distance:r,caloriesBurned:o})}updateEnduranceSession(e,t,s,r){return this.updateTrackingData(e,t,{duration:s,difficulty:r})}getTotalStatisticByType(e,t){return this.exercises.filter((t=>t.type===e)).reduce(((e,s)=>e+(this.strategyFactory.getStrategy(s.type).getStatistics(s)[t]||0)),0)}getTotalWeight(){return this.getTotalStatisticByType(i.STRENGTH,"totalWeight")}getTotalDistance(){return this.getTotalStatisticByType(i.CARDIO,"totalDistance")}getTotalDuration(){return this.getTotalStatisticByType(i.CARDIO,"totalDuration")}getTotalCalories(){return this.getTotalStatisticByType(i.CARDIO,"totalCalories")}getTotalEnduranceDuration(){return this.getTotalStatisticByType(i.ENDURANCE,"totalDuration")}getMaxEnduranceDuration(){const e=this.exercises.filter((e=>e.type===i.ENDURANCE)).map((e=>this.strategyFactory.getStrategy(e.type).getStatistics(e).maxDuration||0));return e.length?Math.max(...e):0}getTotalEnduranceIntensity(){return this.getTotalStatisticByType(i.ENDURANCE,"totalIntensity")}hasChangesFromPlan(){if(!this.plan)return!1;if(this.plan.exercises.length>this.exercises.length)return!0;for(const e of this.exercises){const t=this.plan.exercises.find((t=>t.id===e.id));if(!t)return!0;if(this.strategyFactory.getStrategy(e.type).hasChanges(e,t))return!0}return!1}updatePlanSets(){if(!this.plan)return!1;for(const e of this.exercises){const t=this.plan.exercises.find((t=>t.id===e.id));if(t){this.strategyFactory.getStrategy(e.type).updatePlanData(e,t)}}return!0}}class x{constructor(e,t,s){this.exerciseService=e,this.workoutPlanService=t,this.storageManager=s,this.workouts=this.storageManager.getWorkouts()||[],this._deserializeWorkouts()}_deserializeWorkouts(){this.workouts=this.workouts.map((e=>{let t=null;e.plan&&void 0!==e.plan.id&&(t=this.workoutPlanService.getWorkoutPlanById(e.plan.id));const s=new p(e.id,e.ownerId,new Date(e.date),t);return e.exercises&&e.exercises.length&&e.exercises.forEach((e=>{if(!s.getExerciseById(e.id)){const t=this.exerciseService.getExerciseById(e.id);t&&(s.addExercise(t),e.sets&&e.sets.length?e.sets.forEach((t=>{s.recordSet(e.id,t.reps,t.weight)})):e.sessions&&e.sessions.length&&("Cardio"===e.type?e.sessions.forEach((t=>{s.recordCardioSession(e.id,t.duration,t.distance,t.caloriesBurned)})):"Endurance"===e.type&&e.sessions.forEach((t=>{s.recordEnduranceSession(e.id,t.duration,t.difficulty)}))))}})),s}))}_saveWorkouts(){this.storageManager.saveWorkouts(this.workouts)}generateWorkoutId(){return this.workouts.length?Math.max(...this.workouts.map((e=>e.id)))+1:0}createWorkout(e,t=null,s){let r=null;if(void 0!==s&&(r=this.workoutPlanService.getWorkoutPlanById(s),!r))throw new Error(`План тренировки с ID ${s} не найден`);const o=this.generateWorkoutId(),i=new p(o,e,t||new Date,r);return this.workouts.push(i),this._saveWorkouts(),i}addExerciseToWorkout(e,t){const s=this.getWorkoutById(e),r=this.exerciseService.getExerciseById(t);if(!s)throw new Error(`Тренировка с ID ${e} не найдена`);if(!r)throw new Error(`Упражнение с ID ${t} не найдено`);return s.addExercise(r),this._saveWorkouts(),s}recordSetInWorkout(e,t,s,r){const o=this.getWorkoutById(e);if(!o)throw new Error(`Тренировка с ID ${e} не найдена`);o.recordSet(t,s,r),this._saveWorkouts()}updateSetInWorkout(e,t,s,r,o){const i=this.getWorkoutById(e);if(!i)throw new Error(`Тренировка с ID ${e} не найдена`);i.updateSet(t,s,r,o),this._saveWorkouts()}recordCardioSessionInWorkout(e,t,s,r,o=null){const i=this.getWorkoutById(e);if(!i)throw new Error(`Тренировка с ID ${e} не найдена`);i.recordCardioSession(t,s,r,o),this._saveWorkouts()}updateCardioSessionInWorkout(e,t,s,r,o,i){const a=this.getWorkoutById(e);if(!a)throw new Error(`Тренировка с ID ${e} не найдена`);a.updateCardioSession(t,s,r,o,i),this._saveWorkouts()}recordEnduranceSessionInWorkout(e,t,s,r=null){const o=this.getWorkoutById(e);if(!o)throw new Error(`Тренировка с ID ${e} не найдена`);o.recordEnduranceSession(t,s,r),this._saveWorkouts()}updateEnduranceSessionInWorkout(e,t,s,r,o){const i=this.getWorkoutById(e);if(!i)throw new Error(`Тренировка с ID ${e} не найдена`);i.updateEnduranceSession(t,s,r,o),this._saveWorkouts()}getWorkoutById(e){return this.workouts.find((t=>t.id===e))}getWorkoutsForUser(e){return this.workouts.filter((t=>t.ownerId===e))}getAllWorkouts(){return this.workouts}getTotalWeightForWorkout(e){const t=this.getWorkoutById(e);if(!t)throw new Error(`Тренировка с ID ${e} не найдена`);return t.getTotalWeight()}getTotalDistanceForWorkout(e){const t=this.getWorkoutById(e);if(!t)throw new Error(`Тренировка с ID ${e} не найдена`);return t.getTotalDistance()}getTotalDurationForWorkout(e){const t=this.getWorkoutById(e);if(!t)throw new Error(`Тренировка с ID ${e} не найдена`);return t.getTotalDuration()}getTotalEnduranceDurationForWorkout(e){const t=this.getWorkoutById(e);if(!t)throw new Error(`Тренировка с ID ${e} не найдена`);return t.getTotalEnduranceDuration()}getMaxEnduranceDurationForWorkout(e){const t=this.getWorkoutById(e);if(!t)throw new Error(`Тренировка с ID ${e} не найдена`);return t.getMaxEnduranceDuration()}getEnduranceTotalIntensityForWorkout(e){const t=this.getWorkoutById(e);if(!t)throw new Error(`Тренировка с ID ${e} не найдена`);return t.getTotalEnduranceIntensity()}hasChangesFromPlan(e){const t=this.getWorkoutById(e);if(!t)throw new Error(`Тренировка с ID ${e} не найдена`);return t.hasChangesFromPlan()}updatePlanSetsInWorkout(e){const t=this.getWorkoutById(e);if(!t)throw new Error(`Тренировка с ID ${e} не найдена`);const s=t.updatePlanSets();return this._saveWorkouts(),s}getExerciseInWorkout(e,t){const s=this.getWorkoutById(e);if(!s)throw new Error(`Тренировка с ID ${e} не найдена`);const r=s.exercises.find((e=>e.id===t));if(!r)throw new Error(`Упражнение с ID ${t} не найдено в тренировке ${e}`);return r}clearExerciseSets(e,t){const s=this.getWorkoutById(e);if(!s)return;const r=s.exercises.find((e=>e.id===t));r&&(r.sets&&(r.sets=[]),r.completedSets&&(r.completedSets=[]),this._saveWorkouts())}clearExerciseCardioSessions(e,t){const s=this.getWorkoutById(e);if(!s)return;const r=s.exercises.find((e=>e.id===t));r&&(r.sessions&&(r.sessions=[]),r.completedSessions&&(r.completedSessions=[]),this._saveWorkouts())}clearExerciseEnduranceSessions(e,t){this.clearExerciseCardioSessions(e,t)}}class f{constructor(e,t){this.userService=e,this.workoutService=t,this.strategyFactory=new k}getUserWeightProgress(e,t=null,s=null){const r=this.userService.getUserById(e);if(!r)throw new Error(`User with ID ${e} not found`);const o=r.weightHistory,i=t?new Date(t):null,a=s?new Date(s):null,n=o.filter((e=>{const t=e.date;return(!i||t>=i)&&(!a||t<=a)}));if(0===n.length)return{userWeightProgress:0,dateWeights:[]};return{userWeightProgress:n[n.length-1].weight-n[0].weight,dateWeights:n}}getWorkoutsByDate(e,t=null,s=null){const r=this.workoutService.getWorkoutsForUser(e),o=t?new Date(t):null,i=s?new Date(s):null;return r.filter((e=>{const t=e.date;return(!o||t>=o)&&(!i||t<=i)}))}getWorkoutProgress(e,t=null,s=null){const r=this.getWorkoutsByDate(e,t,s);if(0===r.length)return{totalWeightProgress:0,totalDistanceProgress:0,totalDurationProgress:0,workoutsByDate:[]};return{totalWeightProgress:r[r.length-1].getTotalWeight()-r[0].getTotalWeight(),totalDistanceProgress:r[r.length-1].getTotalDistance()-r[0].getTotalDistance(),totalDurationProgress:r[r.length-1].getTotalDuration()-r[0].getTotalDuration(),workoutsByDate:r.map((e=>({date:e.date,totalWeight:e.getTotalWeight(),totalDistance:e.getTotalDistance(),totalDuration:e.getTotalDuration()})))}}getExerciseProgress(e,t,s=null,r=null){const o=this.getWorkoutsByDate(e,s,r),i=[];for(const e of o){const s=e.exercises.find((e=>e.id===t));s&&i.push({date:e.date,exercise:s})}if(0===i.length)return{progress:[],message:"No exercise data found for the specified period"};const a=i[0].exercise;try{const e=this.strategyFactory.getStrategy(a.type),t=i.map((t=>({date:t.date,exerciseId:t.exercise.id,...e.getStatistics(t.exercise)}))),s=e.calculateProgress(i[0].exercise,i[i.length-1].exercise),r=a.type.toUpperCase();let o={};return"ENDURANCE"===r||"ENDURANCE"===r?!s.intensityProgress&&s.totalIntensityProgress&&(o.intensityProgress=s.totalIntensityProgress):"CARDIO"!==r&&"CARDIO"!==r||(!s.distanceProgress&&s.totalDistanceProgress&&(o.distanceProgress=s.totalDistanceProgress),!s.durationProgress&&s.totalDurationProgress&&(o.durationProgress=s.totalDurationProgress)),{...s,...o,progress:t}}catch(e){return console.error(`Error calculating progress: ${e.message}`),{progress:[],message:`Error calculating progress: ${e.message}`}}}getUserStatisticsSummary(e,t=null,s=null){const r=this.getUserWeightProgress(e,t,s),o=this.getWorkoutProgress(e,t,s),i=this.userService.getUserById(e),a=i?i.currentWeight:null;return{weightMetrics:{initialWeight:i&&i.weightHistory.length>0?i.weightHistory[0].weight:null,currentWeight:a,change:r.userWeightProgress,history:r.dateWeights},workoutMetrics:{totalWorkouts:o.workoutsByDate.length,totalWeightLifted:o.workoutsByDate.reduce(((e,t)=>e+t.totalWeight),0),totalDistanceCovered:o.workoutsByDate.reduce(((e,t)=>e+t.totalDistance),0),totalDurationSpent:o.workoutsByDate.reduce(((e,t)=>e+t.totalDuration),0),progress:o}}}}class m{constructor(e){this.storageKey=e}getData(){if("undefined"==typeof window)return null;const e=localStorage.getItem(this.storageKey);return e?JSON.parse(e):null}saveData(e){"undefined"!=typeof window&&localStorage.setItem(this.storageKey,JSON.stringify(e))}clearData(){"undefined"!=typeof window&&localStorage.removeItem(this.storageKey)}}class D{constructor(){this.userStorage=new m("workout-app-users"),this.exerciseStorage=new m("workout-app-exercises"),this.workoutPlanStorage=new m("workout-app-workout-plans"),this.workoutStorage=new m("workout-app-workouts"),this._initializeStorage()}_initializeStorage(){"undefined"!=typeof window&&(this.userStorage.getData()||this.userStorage.saveData([]),this.exerciseStorage.getData()||this.exerciseStorage.saveData([]),this.workoutPlanStorage.getData()||this.workoutPlanStorage.saveData([]),this.workoutStorage.getData()||this.workoutStorage.saveData([]))}syncLocalStorageWithLibrary(e){if(e&&e.storageManager)try{const t=JSON.parse(localStorage.getItem("workout-app-users")||"[]"),s=JSON.parse(localStorage.getItem("workout-app-exercises")||"[]"),r=JSON.parse(localStorage.getItem("workout-app-workouts")||"[]"),o=JSON.parse(localStorage.getItem("workout-app-workout-plans")||"[]");console.log("Синхронизация данных из localStorage с библиотекой:"),console.log(`- Пользователей: ${t.length}`),console.log(`- Упражнений: ${s.length}`),console.log(`- Тренировок: ${r.length}`),console.log(`- Планов тренировок: ${o.length}`),e.storageManager.saveUsers(t),e.storageManager.saveExercises(s),e.storageManager.saveWorkouts(r),e.storageManager.saveWorkoutPlans(o),e.exerciseService._deserializeExercises(),e.workoutService._deserializeWorkouts(),e.workoutPlanService._deserializeWorkoutPlans();const i=e.exerciseService.getAllExercises(),a=e.workoutService.getAllWorkouts();return console.log("После синхронизации:"),console.log(`- Упражнений в сервисе: ${i.length}`),console.log(`- Тренировок в сервисе: ${a.length}`),{success:!0,counts:{users:t.length,exercises:s.length,workouts:r.length,workoutPlans:o.length}}}catch(e){return console.error("Ошибка при синхронизации данных:",e),{success:!1,error:e.message}}else console.error("Планировщик или storageManager недоступны")}getUsers(){return this.userStorage.getData()||[]}saveUsers(e){this.userStorage.saveData(e)}getExercises(){return this.exerciseStorage.getData()||[]}saveExercises(e){this.exerciseStorage.saveData(e)}getWorkoutPlans(){return this.workoutPlanStorage.getData()||[]}saveWorkoutPlans(e){this.workoutPlanStorage.saveData(e)}getWorkouts(){return this.workoutStorage.getData()||[]}saveWorkouts(e){this.workoutStorage.saveData(e)}clearAllData(){this.userStorage.clearData(),this.exerciseStorage.clearData(),this.workoutPlanStorage.clearData(),this.workoutStorage.clearData(),this._initializeStorage()}}class W{constructor(){this.storageManager=new D,this.userService=new t(this.storageManager),this.exerciseService=new l(this.storageManager),this.workoutPlanService=new S(this.exerciseService,this.storageManager),this.workoutService=new x(this.exerciseService,this.workoutPlanService,this.storageManager),this.statisticsService=new f(this.userService,this.workoutService)}showUsers(){console.log(this.userService.getAllUsers())}userReg(e,t,s,r,o){try{const i=this.userService.registerUser(e,t,s,r,o);return console.log(`Пользователь ${i.name} зарегестрирован`),i}catch(e){throw console.error(e.message),e}}userLogin(e,t){try{const s=this.userService.loginUser(e,t);return console.log(`Пользователь ${s.name} вошёл в систему`),s}catch(e){throw console.error(e.message),e}}updateWeight(e){try{this.userService.updateUserWeight(e),console.log(`Пользователь обновил вес на ${e} кг`)}catch(e){throw console.error(e.message),e}}updateProfile(e,t,s,r){try{this.userService.updateUserProfile(e,t,s,r),console.log("Пользователь обновил профиль")}catch(e){throw console.error(e.message),e}}showExercises(){console.log(this.exerciseService.getAllExercises())}createStrengthExercise(e,t,s,r,o,i){const a=this.exerciseService.createStrengthExercise(e,t,s,r,o,i);return console.log(`Упражнение ${a.name} добавлено`),a}createCardioExercise(e,t,s,r,o){const i=this.exerciseService.createCardioExercise(e,t,s,r,o);return console.log(`Кардио упражнение ${i.name} добавлено`),i}createEnduranceExercise(e,t,s,r,o){const i=this.exerciseService.createEnduranceExercise(e,t,s,r,o);return console.log(`Упражнение на выносливость ${i.name} добавлено`),i}createGenericExercise(e,t,s,r,o,i){const a=this.exerciseService.createGenericExercise(e,t,s,r,o,i);return console.log(`${e} упражнение ${a.name} добавлено`),a}removeExercise(e){this.exerciseService.removeExercise(e)}showWorkoutPlans(){console.log(this.workoutPlanService.getAllWorkoutPlans())}createWorkoutPlan(e,t){try{const s=this.userService.getCurrentUser().id,r=this.workoutPlanService.createWorkoutPlan(s,e,t);return console.log("Программа тренировок создана"),r}catch(e){throw console.error(e.message),e}}deleteWorkoutPlan(e){try{this.workoutPlanService.deleteWorkoutPlan(e)}catch(e){throw console.error(e.message),e}}addExerciseToWorkoutPlan(e,t){try{const s=this.exerciseService.getExerciseById(t),r=this.workoutPlanService.addExerciseToWorkoutPlan(e,t);console.log(`Упражнение ${s.name} добавлено в программу тренировок ${r.name}`)}catch(e){throw console.error(e.message),e}}removeExerciseFromWorkoutPlan(e,t){try{return this.workoutPlanService.removeExerciseFromWorkoutPlan(e,t)}catch(e){throw console.error(e.message),e}}addSetToExerciseInWorkoutPlan(e,t,s,r){try{this.workoutPlanService.addSetToExerciseInWorkoutPlan(e,t,s,r)}catch(e){throw console.error(e.message),e}}addSessionToExerciseInWorkoutPlan(e,t,s,r,o=null){try{const i=this.workoutPlanService.addSessionToExerciseInWorkoutPlan(e,t,s,r,o);console.log(`Кардио сессия добавлена в упражнение ${i.name}`)}catch(e){throw console.error(e.message),e}}addEnduranceSessionToExerciseInWorkoutPlan(e,t,s,r=null){try{const o=this.workoutPlanService.addEnduranceSessionToExerciseInWorkoutPlan(e,t,s,r);console.log(`Сессия выносливости добавлена в упражнение ${o.name}`)}catch(e){throw console.error(e.message),e}}getWorkoutPlanExercises(e){try{const t=this.workoutPlanService.getWorkoutPlanById(e);console.log(t.exercises)}catch(e){throw console.error(e.message),e}}showWorkouts(){console.log(this.workoutService.getAllWorkouts())}createWorkout(e=null,t){try{const s=this.userService.getCurrentUser().id,r=this.workoutService.createWorkout(s,e,t);return console.log("Тренировка создана"),r}catch(e){throw console.error(e.message),e}}addExerciseToWorkout(e,t){try{const s=this.workoutService.addExerciseToWorkout(e,t),r=this.exerciseService.getExerciseById(t);return console.log(`Exercise ${r.name} added to workout`),s}catch(e){throw console.error(e.message),e}}recordSetInWorkout(e,t,s,r){try{this.workoutService.recordSetInWorkout(e,t,s,r),console.log(`Записан сет со значениями ${s} повторений ${r} кг`)}catch(e){throw console.error(e.message),e}}updateSetInWorkout(e,t,s,r,o){try{this.workoutService.updateSetInWorkout(e,t,s,r,o),console.log(`Сет обновлён со значениями ${r} подходов ${o} кг`)}catch(e){throw console.error(e.message),e}}recordCardioSessionInWorkout(e,t,s,r,o=null){try{this.workoutService.recordCardioSessionInWorkout(e,t,s,r,o),console.log(`Записана кардио сессия: ${s} минут, ${r} км`)}catch(e){throw console.error(e.message),e}}updateCardioSessionInWorkout(e,t,s,r,o,i){try{this.workoutService.updateCardioSessionInWorkout(e,t,s,r,o,i),console.log(`Кардио сессия обновлена: ${r} минут, ${o} км`)}catch(e){throw console.error(e.message),e}}recordEnduranceSessionInWorkout(e,t,s,r=null){try{this.workoutService.recordEnduranceSessionInWorkout(e,t,s,r),console.log(`Записана сессия выносливости: ${s} секунд, сложность: ${r||"не указана"}`)}catch(e){throw console.error(e.message),e}}updateEnduranceSessionInWorkout(e,t,s,r,o){try{this.workoutService.updateEnduranceSessionInWorkout(e,t,s,r,o),console.log(`Сессия выносливости обновлена: ${r} секунд, сложность: ${o||"не указана"}`)}catch(e){throw console.error(e.message),e}}showWorkout(e){try{const t=this.workoutService.getWorkoutById(e);console.log(t)}catch(e){throw console.error(e.message),e}}hasChangesFromPlan(e){try{return this.workoutService.hasChangesFromPlan(e)}catch(e){throw console.error(e.message),e}}updatePlanSetsInWorkout(e){try{return this.workoutService.updatePlanSetsInWorkout(e)}catch(e){throw console.error(e.message),e}}getTotalWeightForWorkout(e){try{const t=this.workoutService.getTotalWeightForWorkout(e);return console.log("Общий вес за тренировку: "+t),t}catch(e){throw console.error(e.message),e}}getTotalDistanceForWorkout(e){try{const t=this.workoutService.getTotalDistanceForWorkout(e);return console.log("Общая дистанция за тренировку: "+t+" км"),t}catch(e){throw console.error(e.message),e}}getTotalDurationForWorkout(e){try{const t=this.workoutService.getTotalDurationForWorkout(e);return console.log("Общая длительность кардио за тренировку: "+t+" минут"),t}catch(e){throw console.error(e.message),e}}getTotalEnduranceDurationForWorkout(e){try{const t=this.workoutService.getTotalEnduranceDurationForWorkout(e);return console.log("Общее время упражнений на выносливость за тренировку: "+t+" секунд"),t}catch(e){throw console.error(e.message),e}}getMaxEnduranceDurationForWorkout(e){try{const t=this.workoutService.getMaxEnduranceDurationForWorkout(e);return console.log("Максимальная продолжительность упражнения на выносливость: "+t+" секунд"),t}catch(e){throw console.error(e.message),e}}getEnduranceTotalIntensityForWorkout(e){try{const t=this.workoutService.getEnduranceTotalIntensityForWorkout(e);return console.log("Общая интенсивность упражнений на выносливость: "+t),t}catch(e){throw console.error(e.message),e}}getUserWeightProgress(e=null,t=null){try{const s=this.userService.getCurrentUser(),r=this.statisticsService.getUserWeightProgress(s.id,e,t);return console.log(r),r}catch(e){throw console.error(e.message),e}}getWorkoutProgress(e=null,t=null){try{const s=this.userService.getCurrentUser(),r=this.statisticsService.getWorkoutProgress(s.id,e,t);return console.log(r),r}catch(e){throw console.error(e.message),e}}getExerciseProgress(e,t=null,s=null){try{const r=this.userService.getCurrentUser(),o=this.statisticsService.getExerciseProgress(r.id,e,t,s);return console.log(o),o}catch(e){throw console.error(e.message),e}}getCardioProgress(e,t=null,s=null){try{const r=this.exerciseService.getExerciseById(e);if(!r||r.type!==i.CARDIO)return void console.log("Кардио упражнение не найдено");const o=this.userService.getCurrentUser(),a=this.statisticsService.getExerciseProgress(o.id,e,t,s);return console.log("Прогресс кардио упражнения:",a),a}catch(e){throw console.error(e.message),e}}getEnduranceProgress(e,t=null,s=null){try{const r=this.exerciseService.getExerciseById(e);if(!r||r.type!==i.ENDURANCE)return void console.log("Упражнение на выносливость не найдено");const o=this.userService.getCurrentUser(),a=this.statisticsService.getExerciseProgress(o.id,e,t,s);return console.log("Прогресс упражнения на выносливость:",a),a}catch(e){throw console.error(e.message),e}}}const P=()=>new W;export{o as CardioExercise,n as EnduranceExercise,s as Exercise,h as ExerciseFactory,l as ExerciseService,i as ExerciseType,D as LocalStorageManager,f as StatisticsService,u as StrengthExercise,e as User,t as UserService,p as Workout,E as WorkoutPlan,S as WorkoutPlanService,x as WorkoutService,P as createWorkoutPlanner};
//# sourceMappingURL=index.esm.js.map
